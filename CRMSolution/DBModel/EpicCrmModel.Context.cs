//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EpicCrmEntities : DbContext
    {
        public EpicCrmEntities()
            : base("name=EpicCrmEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<TenantEmployee> TenantEmployees { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<IMEI> IMEIs { get; set; }
        public virtual DbSet<Tracking> Trackings { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<DistanceCalcErrorLog> DistanceCalcErrorLogs { get; set; }
        public virtual DbSet<SqliteActionBatch> SqliteActionBatches { get; set; }
        public virtual DbSet<SqliteActionDup> SqliteActionDups { get; set; }
        public virtual DbSet<SqliteActionProcessLog> SqliteActionProcessLogs { get; set; }
        public virtual DbSet<TransportType> TransportTypes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<DataFeedProcessLog> DataFeedProcessLogs { get; set; }
        public virtual DbSet<CodeTable> CodeTables { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ExpenseItemImage> ExpenseItemImages { get; set; }
        public virtual DbSet<ExpenseItem> ExpenseItems { get; set; }
        public virtual DbSet<SqliteExpense> SqliteExpenses { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
        public virtual DbSet<SqliteOrder> SqliteOrders { get; set; }
        public virtual DbSet<SqliteOrderItem> SqliteOrderItems { get; set; }
        public virtual DbSet<SqlitePayment> SqlitePayments { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentImage> PaymentImages { get; set; }
        public virtual DbSet<ReturnOrder> ReturnOrders { get; set; }
        public virtual DbSet<ReturnOrderItem> ReturnOrderItems { get; set; }
        public virtual DbSet<SqliteReturnOrder> SqliteReturnOrders { get; set; }
        public virtual DbSet<SqliteReturnOrderItem> SqliteReturnOrderItems { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<OfficeHierarchy> OfficeHierarchies { get; set; }
        public virtual DbSet<SqliteAction> SqliteActions { get; set; }
        public virtual DbSet<SalesPersonAssociation> SalesPersonAssociations { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<ActivityImage> ActivityImages { get; set; }
        public virtual DbSet<ProductPrice> ProductPrices { get; set; }
        public virtual DbSet<TenantHoliday> TenantHolidays { get; set; }
        public virtual DbSet<TenantWorkDay> TenantWorkDays { get; set; }
        public virtual DbSet<ExpenseApproval> ExpenseApprovals { get; set; }
        public virtual DbSet<Expense> Expenses { get; set; }
        public virtual DbSet<AppVersion> AppVersions { get; set; }
        public virtual DbSet<ExecAppImei> ExecAppImeis { get; set; }
        public virtual DbSet<SqliteActionImage> SqliteActionImages { get; set; }
        public virtual DbSet<SqliteExpenseImage> SqliteExpenseImages { get; set; }
        public virtual DbSet<SqlitePaymentImage> SqlitePaymentImages { get; set; }
        public virtual DbSet<TenantSMSLog> TenantSMSLogs { get; set; }
        public virtual DbSet<TenantSMSSchedule> TenantSMSSchedules { get; set; }
        public virtual DbSet<TenantSmsType> TenantSmsTypes { get; set; }
        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        public virtual DbSet<SMSProcessLog> SMSProcessLogs { get; set; }
        public virtual DbSet<SqliteCancelledLeave> SqliteCancelledLeaves { get; set; }
        public virtual DbSet<EntityContact> EntityContacts { get; set; }
        public virtual DbSet<EntityCrop> EntityCrops { get; set; }
        public virtual DbSet<SqliteEntityContact> SqliteEntityContacts { get; set; }
        public virtual DbSet<SqliteEntityCrop> SqliteEntityCrops { get; set; }
        public virtual DbSet<ActivityContact> ActivityContacts { get; set; }
        public virtual DbSet<OrderImage> OrderImages { get; set; }
        public virtual DbSet<SqliteOrderImage> SqliteOrderImages { get; set; }
        public virtual DbSet<SqliteActionContact> SqliteActionContacts { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<GstRate> GstRates { get; set; }
        public virtual DbSet<SqliteDeviceLog> SqliteDeviceLogs { get; set; }
        public virtual DbSet<EntityImage> EntityImages { get; set; }
        public virtual DbSet<SqliteEntityImage> SqliteEntityImages { get; set; }
        public virtual DbSet<SqliteEntityWorkFlow> SqliteEntityWorkFlows { get; set; }
        public virtual DbSet<EntityWorkFlowDetail> EntityWorkFlowDetails { get; set; }
        public virtual DbSet<EmployeeDay> EmployeeDays { get; set; }
        public virtual DbSet<SqliteActionLocation> SqliteActionLocations { get; set; }
        public virtual DbSet<SqliteEntityLocation> SqliteEntityLocations { get; set; }
        public virtual DbSet<EntityAgreement> EntityAgreements { get; set; }
        public virtual DbSet<WorkflowSeason> WorkflowSeasons { get; set; }
        public virtual DbSet<SqliteEntityWorkFlowV2> SqliteEntityWorkFlowV2 { get; set; }
        public virtual DbSet<ActivityType> ActivityTypes { get; set; }
        public virtual DbSet<ExcelUploadHistory> ExcelUploadHistories { get; set; }
        public virtual DbSet<ExcelUploadStatu> ExcelUploadStatus { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<StaffDivision> StaffDivisions { get; set; }
        public virtual DbSet<StaffDivisionInput> StaffDivisionInputs { get; set; }
        public virtual DbSet<StaffDailyReportData> StaffDailyReportDatas { get; set; }
        public virtual DbSet<StaffMessage> StaffMessages { get; set; }
        public virtual DbSet<CustomerDivisionBalance> CustomerDivisionBalances { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<AgreementNumber> AgreementNumbers { get; set; }
        public virtual DbSet<SqliteAdvanceRequest> SqliteAdvanceRequests { get; set; }
        public virtual DbSet<SqliteAgreement> SqliteAgreements { get; set; }
        public virtual DbSet<SqliteIssueReturn> SqliteIssueReturns { get; set; }
        public virtual DbSet<AdvanceRequest> AdvanceRequests { get; set; }
        public virtual DbSet<SqliteTerminateAgreement> SqliteTerminateAgreements { get; set; }
        public virtual DbSet<TerminateAgreementRequest> TerminateAgreementRequests { get; set; }
        public virtual DbSet<TenantSmsData> TenantSmsDatas { get; set; }
        public virtual DbSet<PPA> PPAs { get; set; }
        public virtual DbSet<ExcelUploadError> ExcelUploadErrors { get; set; }
        public virtual DbSet<SqliteBankDetailImage> SqliteBankDetailImages { get; set; }
        public virtual DbSet<EntityBankDetailImage> EntityBankDetailImages { get; set; }
        public virtual DbSet<EntityBankDetail> EntityBankDetails { get; set; }
        public virtual DbSet<SqliteBankDetail> SqliteBankDetails { get; set; }
        public virtual DbSet<WorkFlowFollowUp> WorkFlowFollowUps { get; set; }
        public virtual DbSet<SqliteEntityWorkFlowFollowUp> SqliteEntityWorkFlowFollowUps { get; set; }
        public virtual DbSet<WorkFlowSchedule> WorkFlowSchedules { get; set; }
        public virtual DbSet<EntityWorkFlowDetailItemUsed> EntityWorkFlowDetailItemUseds { get; set; }
        public virtual DbSet<SqliteEntityWorkFlowItemUsed> SqliteEntityWorkFlowItemUseds { get; set; }
        public virtual DbSet<Transporter> Transporters { get; set; }
        public virtual DbSet<SqliteSTR> SqliteSTRs { get; set; }
        public virtual DbSet<SqliteSTRImage> SqliteSTRImages { get; set; }
        public virtual DbSet<STR> STRs { get; set; }
        public virtual DbSet<STRImage> STRImages { get; set; }
        public virtual DbSet<STRTag> STRTags { get; set; }
        public virtual DbSet<STRWeight> STRWeights { get; set; }
        public virtual DbSet<IssueReturn> IssueReturns { get; set; }
        public virtual DbSet<DWSPaymentReference> DWSPaymentReferences { get; set; }
        public virtual DbSet<GRNNumber> GRNNumbers { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<StockInput> StockInputs { get; set; }
        public virtual DbSet<RequestNumber> RequestNumbers { get; set; }
        public virtual DbSet<StockRequest> StockRequests { get; set; }
        public virtual DbSet<StockRequestTag> StockRequestTags { get; set; }
        public virtual DbSet<StockBalance> StockBalances { get; set; }
        public virtual DbSet<StockLedger> StockLedgers { get; set; }
        public virtual DbSet<StockInputTag> StockInputTags { get; set; }
        public virtual DbSet<StockRequestFulfill> StockRequestFulfills { get; set; }
        public virtual DbSet<EntityWorkFlow> EntityWorkFlows { get; set; }
        public virtual DbSet<ItemMasterTypeName> ItemMasterTypeNames { get; set; }
        public virtual DbSet<ItemMaster> ItemMasters { get; set; }
        public virtual DbSet<EntitySurvey> EntitySurveys { get; set; }
        public virtual DbSet<SqliteSurvey> SqliteSurveys { get; set; }
        public virtual DbSet<DW> DWS { get; set; }
        public virtual DbSet<DWSAudit> DWSAudits { get; set; }
        public virtual DbSet<SqliteSTRDW> SqliteSTRDWS { get; set; }
        public virtual DbSet<EmployeeAchieved> EmployeeAchieveds { get; set; }
        public virtual DbSet<EmployeeMonthlyTarget> EmployeeMonthlyTargets { get; set; }
        public virtual DbSet<EmployeeYearlyTarget> EmployeeYearlyTargets { get; set; }
        public virtual DbSet<SqliteAnswer> SqliteAnswers { get; set; }
        public virtual DbSet<SqliteAnswerDetail> SqliteAnswerDetails { get; set; }
        public virtual DbSet<SqliteQuestionnaire> SqliteQuestionnaires { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<AnswerDetail> AnswerDetails { get; set; }
        public virtual DbSet<CustomerQuestionnaire> CustomerQuestionnaires { get; set; }
        public virtual DbSet<TransporterBankDetail> TransporterBankDetails { get; set; }
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<FeatureControl> FeatureControls { get; set; }
        public virtual DbSet<QuestionPaper> QuestionPapers { get; set; }
        public virtual DbSet<QuestionPaperAnswer> QuestionPaperAnswers { get; set; }
        public virtual DbSet<QuestionPaperQuestion> QuestionPaperQuestions { get; set; }
        public virtual DbSet<TransporterPaymentReference> TransporterPaymentReferences { get; set; }
        public virtual DbSet<STRPayment> STRPayments { get; set; }
        public virtual DbSet<BonusAgreementDetail> BonusAgreementDetails { get; set; }
        public virtual DbSet<BonusPaymentReference> BonusPaymentReferences { get; set; }
        public virtual DbSet<BonusRate> BonusRates { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<PurgeLog> PurgeLogs { get; set; }
        public virtual DbSet<ProjectAudit> ProjectAudits { get; set; }
        public virtual DbSet<ProjectAssignment> ProjectAssignments { get; set; }
        public virtual DbSet<SqliteTaskAction> SqliteTaskActions { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskAction> TaskActions { get; set; }
        public virtual DbSet<TaskAssignment> TaskAssignments { get; set; }
        public virtual DbSet<TaskAudit> TaskAudits { get; set; }
        public virtual DbSet<SqliteTask> SqliteTasks { get; set; }
        public virtual DbSet<Entity> Entities { get; set; }
        public virtual DbSet<SqliteEntity> SqliteEntities { get; set; }
        public virtual DbSet<HolidayList> HolidayLists { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<Leave> Leaves { get; set; }
        public virtual DbSet<SqliteLeave> SqliteLeaves { get; set; }
        public virtual DbSet<GeoLocation> GeoLocations { get; set; }
        public virtual DbSet<DayPlanTarget> DayPlanTargets { get; set; }
        public virtual DbSet<SqliteDayPlanTarget> SqliteDayPlanTargets { get; set; }
        public virtual DbSet<EntityNumber> EntityNumbers { get; set; }
    
        public virtual int AddActivityData(Nullable<long> employeeDayId, Nullable<System.DateTime> activityDateTime, string clientName, string clientPhone, string clientType, string activityType, string comments, string clientCode, Nullable<decimal> activityAmount, Nullable<bool> atBusiness, Nullable<int> imageCount, Nullable<int> contactCount, Nullable<int> activityTrackingType, ObjectParameter activityId)
        {
            var employeeDayIdParameter = employeeDayId.HasValue ?
                new ObjectParameter("employeeDayId", employeeDayId) :
                new ObjectParameter("employeeDayId", typeof(long));
    
            var activityDateTimeParameter = activityDateTime.HasValue ?
                new ObjectParameter("activityDateTime", activityDateTime) :
                new ObjectParameter("activityDateTime", typeof(System.DateTime));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("clientName", clientName) :
                new ObjectParameter("clientName", typeof(string));
    
            var clientPhoneParameter = clientPhone != null ?
                new ObjectParameter("clientPhone", clientPhone) :
                new ObjectParameter("clientPhone", typeof(string));
    
            var clientTypeParameter = clientType != null ?
                new ObjectParameter("clientType", clientType) :
                new ObjectParameter("clientType", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("activityType", activityType) :
                new ObjectParameter("activityType", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(string));
    
            var activityAmountParameter = activityAmount.HasValue ?
                new ObjectParameter("activityAmount", activityAmount) :
                new ObjectParameter("activityAmount", typeof(decimal));
    
            var atBusinessParameter = atBusiness.HasValue ?
                new ObjectParameter("atBusiness", atBusiness) :
                new ObjectParameter("atBusiness", typeof(bool));
    
            var imageCountParameter = imageCount.HasValue ?
                new ObjectParameter("imageCount", imageCount) :
                new ObjectParameter("imageCount", typeof(int));
    
            var contactCountParameter = contactCount.HasValue ?
                new ObjectParameter("contactCount", contactCount) :
                new ObjectParameter("contactCount", typeof(int));
    
            var activityTrackingTypeParameter = activityTrackingType.HasValue ?
                new ObjectParameter("activityTrackingType", activityTrackingType) :
                new ObjectParameter("activityTrackingType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActivityData", employeeDayIdParameter, activityDateTimeParameter, clientNameParameter, clientPhoneParameter, clientTypeParameter, activityTypeParameter, commentsParameter, clientCodeParameter, activityAmountParameter, atBusinessParameter, imageCountParameter, contactCountParameter, activityTrackingTypeParameter, activityId);
        }
    
        public virtual int AddTrackingData(Nullable<long> employeeDayId, Nullable<System.DateTime> trackingDateTime, Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<long> activityId, Nullable<bool> isMilestone, Nullable<bool> isStartOfDay, Nullable<bool> isEndOfDay, ObjectParameter trackingId)
        {
            var employeeDayIdParameter = employeeDayId.HasValue ?
                new ObjectParameter("employeeDayId", employeeDayId) :
                new ObjectParameter("employeeDayId", typeof(long));
    
            var trackingDateTimeParameter = trackingDateTime.HasValue ?
                new ObjectParameter("trackingDateTime", trackingDateTime) :
                new ObjectParameter("trackingDateTime", typeof(System.DateTime));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(decimal));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("activityId", activityId) :
                new ObjectParameter("activityId", typeof(long));
    
            var isMilestoneParameter = isMilestone.HasValue ?
                new ObjectParameter("isMilestone", isMilestone) :
                new ObjectParameter("isMilestone", typeof(bool));
    
            var isStartOfDayParameter = isStartOfDay.HasValue ?
                new ObjectParameter("isStartOfDay", isStartOfDay) :
                new ObjectParameter("isStartOfDay", typeof(bool));
    
            var isEndOfDayParameter = isEndOfDay.HasValue ?
                new ObjectParameter("isEndOfDay", isEndOfDay) :
                new ObjectParameter("isEndOfDay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrackingData", employeeDayIdParameter, trackingDateTimeParameter, latitudeParameter, longitudeParameter, activityIdParameter, isMilestoneParameter, isStartOfDayParameter, isEndOfDayParameter, trackingId);
        }
    
        public virtual int EndEmployeeDay(Nullable<long> employeeDayId, Nullable<System.DateTime> endDateTime, ObjectParameter status)
        {
            var employeeDayIdParameter = employeeDayId.HasValue ?
                new ObjectParameter("employeeDayId", employeeDayId) :
                new ObjectParameter("employeeDayId", typeof(long));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("endDateTime", endDateTime) :
                new ObjectParameter("endDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EndEmployeeDay", employeeDayIdParameter, endDateTimeParameter, status);
        }
    
        public virtual int StartEmployeeDay(Nullable<long> employeeId, Nullable<System.DateTime> startDateTime, string phoneModel, string phoneOS, string appVersion, ObjectParameter employeeDayId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("startDateTime", startDateTime) :
                new ObjectParameter("startDateTime", typeof(System.DateTime));
    
            var phoneModelParameter = phoneModel != null ?
                new ObjectParameter("PhoneModel", phoneModel) :
                new ObjectParameter("PhoneModel", typeof(string));
    
            var phoneOSParameter = phoneOS != null ?
                new ObjectParameter("PhoneOS", phoneOS) :
                new ObjectParameter("PhoneOS", typeof(string));
    
            var appVersionParameter = appVersion != null ?
                new ObjectParameter("AppVersion", appVersion) :
                new ObjectParameter("AppVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StartEmployeeDay", employeeIdParameter, startDateTimeParameter, phoneModelParameter, phoneOSParameter, appVersionParameter, employeeDayId);
        }
    
        public virtual ObjectResult<sp_DashboardData_ResultSet> sp_DashboardData(Nullable<System.DateTime> reportStartDate, Nullable<System.DateTime> reportEndDate)
        {
            var reportStartDateParameter = reportStartDate.HasValue ?
                new ObjectParameter("reportStartDate", reportStartDate) :
                new ObjectParameter("reportStartDate", typeof(System.DateTime));
    
            var reportEndDateParameter = reportEndDate.HasValue ?
                new ObjectParameter("reportEndDate", reportEndDate) :
                new ObjectParameter("reportEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DashboardData_ResultSet>("sp_DashboardData", reportStartDateParameter, reportEndDateParameter);
        }
    
        public virtual ObjectResult<GetTrackingRecordsForDistanceCalculation_Result> GetTrackingRecordsForDistanceCalculation(Nullable<int> recordCount)
        {
            var recordCountParameter = recordCount.HasValue ?
                new ObjectParameter("recordCount", recordCount) :
                new ObjectParameter("recordCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrackingRecordsForDistanceCalculation_Result>("GetTrackingRecordsForDistanceCalculation", recordCountParameter);
        }
    
        public virtual int ClearEmployeeData(Nullable<long> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearEmployeeData", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetSqliteActionBatchForProcessing_Result> GetSqliteActionBatchForProcessing(Nullable<int> recordCount, Nullable<long> tenantId, Nullable<long> employeeId)
        {
            var recordCountParameter = recordCount.HasValue ?
                new ObjectParameter("recordCount", recordCount) :
                new ObjectParameter("recordCount", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSqliteActionBatchForProcessing_Result>("GetSqliteActionBatchForProcessing", recordCountParameter, tenantIdParameter, employeeIdParameter);
        }
    
        public virtual int TransformDataFeed(Nullable<long> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformDataFeed", tenantIdParameter);
        }
    
        public virtual ObjectResult<GetSignedInEmployeeData_Result> GetSignedInEmployeeData(Nullable<System.DateTime> inputDate)
        {
            var inputDateParameter = inputDate.HasValue ?
                new ObjectParameter("inputDate", inputDate) :
                new ObjectParameter("inputDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSignedInEmployeeData_Result>("GetSignedInEmployeeData", inputDateParameter);
        }
    
        public virtual int ProcessSqliteOrderData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteOrderData", batchIdParameter);
        }
    
        public virtual int ProcessSqlitePaymentData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqlitePaymentData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteReturnOrderData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteReturnOrderData", batchIdParameter);
        }
    
        public virtual int TransformOfficeHierarchy(Nullable<long> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformOfficeHierarchy", tenantIdParameter);
        }
    
        public virtual ObjectResult<GetInFieldSalesPeople_Result> GetInFieldSalesPeople(Nullable<System.DateTime> inputDate, Nullable<long> tenantId)
        {
            var inputDateParameter = inputDate.HasValue ?
                new ObjectParameter("inputDate", inputDate) :
                new ObjectParameter("inputDate", typeof(System.DateTime));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInFieldSalesPeople_Result>("GetInFieldSalesPeople", inputDateParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<string> SMS_GetEndDayStaffCode(Nullable<long> tenantId, Nullable<System.DateTime> runDate)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var runDateParameter = runDate.HasValue ?
                new ObjectParameter("runDate", runDate) :
                new ObjectParameter("runDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SMS_GetEndDayStaffCode", tenantIdParameter, runDateParameter);
        }
    
        public virtual ObjectResult<string> SMS_GetStartDayStaffCode(Nullable<long> tenantId, Nullable<System.DateTime> runDate)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var runDateParameter = runDate.HasValue ?
                new ObjectParameter("runDate", runDate) :
                new ObjectParameter("runDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SMS_GetStartDayStaffCode", tenantIdParameter, runDateParameter);
        }
    
        public virtual ObjectResult<string> GetStaffCodes(Nullable<long> tenantId, Nullable<System.DateTime> todayDate, string sprocName)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("todayDate", todayDate) :
                new ObjectParameter("todayDate", typeof(System.DateTime));
    
            var sprocNameParameter = sprocName != null ?
                new ObjectParameter("sprocName", sprocName) :
                new ObjectParameter("sprocName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetStaffCodes", tenantIdParameter, todayDateParameter, sprocNameParameter);
        }
    
        public virtual ObjectResult<GetOrderForAgentSMS_Result> GetOrderForAgentSMS(Nullable<int> recordCount, Nullable<long> tenantId, Nullable<long> employeeId)
        {
            var recordCountParameter = recordCount.HasValue ?
                new ObjectParameter("recordCount", recordCount) :
                new ObjectParameter("recordCount", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderForAgentSMS_Result>("GetOrderForAgentSMS", recordCountParameter, tenantIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<GetOrderForCustomerSMS_Result> GetOrderForCustomerSMS(Nullable<int> recordCount, Nullable<long> tenantId, Nullable<long> employeeId)
        {
            var recordCountParameter = recordCount.HasValue ?
                new ObjectParameter("recordCount", recordCount) :
                new ObjectParameter("recordCount", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderForCustomerSMS_Result>("GetOrderForCustomerSMS", recordCountParameter, tenantIdParameter, employeeIdParameter);
        }
    
        public virtual int ProcessSqliteEntityData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteEntityData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteEntityWorkFlowData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteEntityWorkFlowData");
        }
    
        public virtual int ProcessSqliteExpenseData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteExpenseData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteIssueReturnData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteIssueReturnData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteEntityWorkFlowDataV2(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteEntityWorkFlowDataV2", batchIdParameter);
        }
    
        public virtual int RegisterUser(Nullable<long> tenantId, Nullable<long> timeIntervalInMs, string staffCode, string imei, ObjectParameter outStatus, ObjectParameter outEmployeeId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var timeIntervalInMsParameter = timeIntervalInMs.HasValue ?
                new ObjectParameter("timeIntervalInMs", timeIntervalInMs) :
                new ObjectParameter("timeIntervalInMs", typeof(long));
    
            var staffCodeParameter = staffCode != null ?
                new ObjectParameter("staffCode", staffCode) :
                new ObjectParameter("staffCode", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("imei", imei) :
                new ObjectParameter("imei", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterUser", tenantIdParameter, timeIntervalInMsParameter, staffCodeParameter, imeiParameter, outStatus, outEmployeeId);
        }
    
        public virtual ObjectResult<GetOfficeHierarchyForAll_Result> GetOfficeHierarchyForAll(Nullable<long> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOfficeHierarchyForAll_Result>("GetOfficeHierarchyForAll", tenantIdParameter);
        }
    
        public virtual ObjectResult<GetOfficeHierarchyForStaff_Result> GetOfficeHierarchyForStaff(Nullable<long> tenantId, string staffCode)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var staffCodeParameter = staffCode != null ?
                new ObjectParameter("staffCode", staffCode) :
                new ObjectParameter("staffCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOfficeHierarchyForStaff_Result>("GetOfficeHierarchyForStaff", tenantIdParameter, staffCodeParameter);
        }
    
        public virtual ObjectResult<GetOfficeHierarchyForStaff_Result> GetOfficeHierarchyForSuperAdmin(Nullable<long> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOfficeHierarchyForStaff_Result>("GetOfficeHierarchyForSuperAdmin", tenantIdParameter);
        }
    
        public virtual ObjectResult<TableSchema_Result> TableSchema(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TableSchema_Result>("TableSchema", tableNameParameter);
        }
    
        public virtual int TransformCustomerDataFeed(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformCustomerDataFeed", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformProductDataFeed(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformProductDataFeed", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformSalesPersonDataFeed(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformSalesPersonDataFeed", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformDivisionSegmentData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformDivisionSegmentData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformStaffMessageData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformStaffMessageData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformStaffDivisionData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformStaffDivisionData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformStaffDailyReportData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformStaffDailyReportData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformCustomerDivisionBalance(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformCustomerDivisionBalance", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual ObjectResult<GetCustomerDivisionBalance_Result> GetCustomerDivisionBalance(Nullable<long> tenantId, string staffCode, string areaCode)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var staffCodeParameter = staffCode != null ?
                new ObjectParameter("staffCode", staffCode) :
                new ObjectParameter("staffCode", typeof(string));
    
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("areaCode", areaCode) :
                new ObjectParameter("areaCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerDivisionBalance_Result>("GetCustomerDivisionBalance", tenantIdParameter, staffCodeParameter, areaCodeParameter);
        }
    
        public virtual int TransformAgreementNumberData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformAgreementNumberData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int ProcessSqliteAdvanceRequestData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteAdvanceRequestData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteTerminateAgreementData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteTerminateAgreementData", batchIdParameter);
        }
    
        public virtual int TransformItemMasterData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformItemMasterData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual ObjectResult<GetTenantSmsData_Result> GetTenantSmsData(Nullable<int> recordCount, Nullable<long> tenantId, string smsType)
        {
            var recordCountParameter = recordCount.HasValue ?
                new ObjectParameter("recordCount", recordCount) :
                new ObjectParameter("recordCount", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var smsTypeParameter = smsType != null ?
                new ObjectParameter("smsType", smsType) :
                new ObjectParameter("smsType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTenantSmsData_Result>("GetTenantSmsData", recordCountParameter, tenantIdParameter, smsTypeParameter);
        }
    
        public virtual int TransformPPAData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformPPAData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformEntityNumberData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformEntityNumberData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int ProcessSqliteBankDetailsData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteBankDetailsData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteAgreementData(Nullable<long> batchId, string agreementDefaultStatus)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            var agreementDefaultStatusParameter = agreementDefaultStatus != null ?
                new ObjectParameter("agreementDefaultStatus", agreementDefaultStatus) :
                new ObjectParameter("agreementDefaultStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteAgreementData", batchIdParameter, agreementDefaultStatusParameter);
        }
    
        public virtual int ProcessSqliteEntityWorkFlowDataV3(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteEntityWorkFlowDataV3", batchIdParameter);
        }
    
        public virtual int TransformTransporterDataFeed(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformTransporterDataFeed", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int ProcessSqliteSTRData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteSTRData", batchIdParameter);
        }
    
        public virtual int ReAssignSTRNumber(Nullable<long> strId, Nullable<long> fromStrTagId, Nullable<long> toStrTagId, string updatedBy)
        {
            var strIdParameter = strId.HasValue ?
                new ObjectParameter("strId", strId) :
                new ObjectParameter("strId", typeof(long));
    
            var fromStrTagIdParameter = fromStrTagId.HasValue ?
                new ObjectParameter("fromStrTagId", fromStrTagId) :
                new ObjectParameter("fromStrTagId", typeof(long));
    
            var toStrTagIdParameter = toStrTagId.HasValue ?
                new ObjectParameter("toStrTagId", toStrTagId) :
                new ObjectParameter("toStrTagId", typeof(long));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReAssignSTRNumber", strIdParameter, fromStrTagIdParameter, toStrTagIdParameter, updatedByParameter);
        }
    
        public virtual int ReAssignDwsSTRNumber(Nullable<long> dwsId, Nullable<long> fromStrTagId, Nullable<long> toStrTagId, string updatedBy)
        {
            var dwsIdParameter = dwsId.HasValue ?
                new ObjectParameter("dwsId", dwsId) :
                new ObjectParameter("dwsId", typeof(long));
    
            var fromStrTagIdParameter = fromStrTagId.HasValue ?
                new ObjectParameter("fromStrTagId", fromStrTagId) :
                new ObjectParameter("fromStrTagId", typeof(long));
    
            var toStrTagIdParameter = toStrTagId.HasValue ?
                new ObjectParameter("toStrTagId", toStrTagId) :
                new ObjectParameter("toStrTagId", typeof(long));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReAssignDwsSTRNumber", dwsIdParameter, fromStrTagIdParameter, toStrTagIdParameter, updatedByParameter);
        }
    
        public virtual int ReCalculateSTRTotals(Nullable<long> strId, string updatedBy)
        {
            var strIdParameter = strId.HasValue ?
                new ObjectParameter("strId", strId) :
                new ObjectParameter("strId", typeof(long));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReCalculateSTRTotals", strIdParameter, updatedByParameter);
        }
    
        public virtual int CalculateDWSOnSiloCheck(Nullable<long> strWeightId, Nullable<long> strTagId, string updatedBy)
        {
            var strWeightIdParameter = strWeightId.HasValue ?
                new ObjectParameter("strWeightId", strWeightId) :
                new ObjectParameter("strWeightId", typeof(long));
    
            var strTagIdParameter = strTagId.HasValue ?
                new ObjectParameter("strTagId", strTagId) :
                new ObjectParameter("strTagId", typeof(long));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateDWSOnSiloCheck", strWeightIdParameter, strTagIdParameter, updatedByParameter);
        }
    
        public virtual int SetDWSStatus(Nullable<long> strTagId, string toDWSStatus, string updatedBy)
        {
            var strTagIdParameter = strTagId.HasValue ?
                new ObjectParameter("strTagId", strTagId) :
                new ObjectParameter("strTagId", typeof(long));
    
            var toDWSStatusParameter = toDWSStatus != null ?
                new ObjectParameter("toDWSStatus", toDWSStatus) :
                new ObjectParameter("toDWSStatus", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetDWSStatus", strTagIdParameter, toDWSStatusParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<string> TableList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TableList");
        }
    
        public virtual ObjectResult<string> GetGRNNumber(Nullable<int> count)
        {
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetGRNNumber", countParameter);
        }
    
        public virtual int TransformGRNNumberData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformGRNNumberData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformVendorDataFeed(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformVendorDataFeed", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual ObjectResult<string> GetRequestNumber(Nullable<int> count)
        {
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetRequestNumber", countParameter);
        }
    
        public virtual int TransformRequestNumberData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformRequestNumberData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int PostStockLedgerFromInput(Nullable<long> stockInputTagId, string updatedBy)
        {
            var stockInputTagIdParameter = stockInputTagId.HasValue ?
                new ObjectParameter("stockInputTagId", stockInputTagId) :
                new ObjectParameter("stockInputTagId", typeof(long));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostStockLedgerFromInput", stockInputTagIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<GetEntityWorkFlow_Result> GetEntityWorkFlow(Nullable<long> tenantId, string staffCode, string areaCode)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var staffCodeParameter = staffCode != null ?
                new ObjectParameter("staffCode", staffCode) :
                new ObjectParameter("staffCode", typeof(string));
    
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("areaCode", areaCode) :
                new ObjectParameter("areaCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEntityWorkFlow_Result>("GetEntityWorkFlow", tenantIdParameter, staffCodeParameter, areaCodeParameter);
        }
    
        public virtual int UpdateWorkflowStatus(Nullable<long> entityWorkflowId, string currentUser)
        {
            var entityWorkflowIdParameter = entityWorkflowId.HasValue ?
                new ObjectParameter("entityWorkflowId", entityWorkflowId) :
                new ObjectParameter("entityWorkflowId", typeof(long));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("currentUser", currentUser) :
                new ObjectParameter("currentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWorkflowStatus", entityWorkflowIdParameter, currentUserParameter);
        }
    
        public virtual int TransformSurveyNumberData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformSurveyNumberData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int ProcessSqliteSurveyData(Nullable<long> batchId, string surveyDefaultStatus)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            var surveyDefaultStatusParameter = surveyDefaultStatus != null ?
                new ObjectParameter("surveyDefaultStatus", surveyDefaultStatus) :
                new ObjectParameter("surveyDefaultStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteSurveyData", batchIdParameter, surveyDefaultStatusParameter);
        }
    
        public virtual int TransformEmployeeAchievedData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformEmployeeAchievedData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformEmployeeMonthlyTargetData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformEmployeeMonthlyTargetData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformEmployeeYearlyTargetData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformEmployeeYearlyTargetData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int ProcessSqliteDayPlanTargetData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteDayPlanTargetData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteQuestionnaireData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteQuestionnaireData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteTaskActionData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteTaskActionData", batchIdParameter);
        }
    
        public virtual int ProcessSqliteTaskData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteTaskData", batchIdParameter);
        }
    
        public virtual int TransformBonusRateDataFeed(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformBonusRateDataFeed", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformPPAStaffData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformPPAStaffData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformStaffHQData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformStaffHQData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual int TransformHolidayListDataFeed(Nullable<long> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformHolidayListDataFeed", tenantIdParameter);
        }
    
        public virtual int TransformLeaveTypeDataFeed(Nullable<long> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformLeaveTypeDataFeed", tenantIdParameter);
        }
    
        public virtual int ProcessSqliteLeaveData(Nullable<long> batchId)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessSqliteLeaveData", batchIdParameter);
        }
    
        public virtual int AddGeoLocationData(Nullable<long> employeeId, string clientCode, Nullable<System.DateTime> trackingDateTime, Nullable<decimal> latitude, Nullable<decimal> longitude, ObjectParameter geoLocationId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(string));
    
            var trackingDateTimeParameter = trackingDateTime.HasValue ?
                new ObjectParameter("trackingDateTime", trackingDateTime) :
                new ObjectParameter("trackingDateTime", typeof(System.DateTime));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGeoLocationData", employeeIdParameter, clientCodeParameter, trackingDateTimeParameter, latitudeParameter, longitudeParameter, geoLocationId);
        }
    
        public virtual int TransformSOParentSOData(Nullable<long> tenantId, Nullable<bool> isCompleteRefresh)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(long));
    
            var isCompleteRefreshParameter = isCompleteRefresh.HasValue ?
                new ObjectParameter("IsCompleteRefresh", isCompleteRefresh) :
                new ObjectParameter("IsCompleteRefresh", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransformSOParentSOData", tenantIdParameter, isCompleteRefreshParameter);
        }
    
        public virtual ObjectResult<string> GetSOStaffCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSOStaffCodes");
        }
    }
}
