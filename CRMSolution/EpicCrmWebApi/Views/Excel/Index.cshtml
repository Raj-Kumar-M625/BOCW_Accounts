@{
    ViewBag.Title = "Excel Upload";

    Dictionary<string, ICollection<DomainEntities.TableSchema>> schemaDictionary = ViewBag.SchemaDictionary as Dictionary<string, ICollection<DomainEntities.TableSchema>>;

    List<ErrorObject> errorList = ViewBag.ErrorList as List<ErrorObject>;

    string tenantName = ViewBag.TenantName as String;
    string dataType = ViewBag.DataType as String;

    // create a table of options being shown
    ICollection<DomainEntities.CodeTableEx> optionsList = ViewBag.OptionsList;

    ICollection<EpicCrmWebApi.ExcelUploadStatus> excelUploadStatus = ViewBag.ExcelUploadStatus;

    bool allowCSVUpload = (bool)ViewBag.AllowCSVUpload;
    bool allowExcelUpload = (bool)ViewBag.AllowExcelUpload;

    bool IsSetupSuperAdmin = ViewBag.IsSetupSuperAdmin;

    // create reg ex pattern string to test for excel or csv or both
    string regexPattern = "";
    string[] regexPatteryArray = new string[] { "", "" };
    if (@allowCSVUpload)
    {
        regexPatteryArray[0] = "csv";
    }
    if(@allowExcelUpload)
    {
        regexPatteryArray[1] = "xlsx";
    }
    regexPattern = String.Join("|", regexPatteryArray).Trim(new char[] { '|', ' ' });
}
<h2>@tenantName : Select the data type and file to upload </h2>

@using (Html.BeginForm("Upload3", "Excel", FormMethod.Post, new { enctype = "multipart/form-data", id="uploadForm" }))
{
<div class="well" id="optionsDiv">
    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Data Type</label>
                <select class="form-control" id="selDataType" name="tableName">
                    <option value="">Select Type</option>
                    @foreach (var o in optionsList.OrderBy(x => x.DisplaySequence))
                    {
                        if (@o.Code.Equals(dataType, StringComparison.OrdinalIgnoreCase))
                        {
                            <option value="@o.Code" selected>@o.CodeName</option>
                        }
                        else
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="form-group">
                <label>File</label>
                <input type="file" id="fileControl" name="UploadedFile" class="form-control"/>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>&nbsp;</label>
                <input type="button" id="btnUpload" value="Upload" class="form-control btn-success" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group">
            <label class="control-label col-md-2">Do you want to perform a complete refresh of data?</label>
            <div class="col-sm-3">
                <select class="form-control" id="idCompleteRefresh" name="IsCompleteRefresh">
                    <option value="">Select Refresh Type</option>
                    <option value="False">No - Keep existing data in OLTP tables</option>
                    <option value="TRUE">Yes - Overwrite existing data in OLTP tables</option>
                </select>
            </div>
        </div>
    </div>
</div>
}

<div class="jumbotron" id="waitDiv" style="visibility:hidden;">
    <h2>The selected file is being sent to the server. Please wait...</h2>
</div>


@foreach (var k in schemaDictionary.Keys)
{
    ViewData["dataType"] = k;
    <div id="@k" style="visibility:hidden;" class="schemaDiv">
        @Html.Partial("_TableSchemaDisplay", schemaDictionary[k])
    </div>
}

@if (errorList != null)
{
    <div id="errorList">
        <h2>Upload Process Log</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Cell Reference</th>
                    <th>Description</th>
                    <th>Expected Value</th>
                    <th>Actual Value</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var s in errorList)
                {
                    <tr>
                        <td>@s.MessageType</td>
                        <td>@s.CellReference</td>
                        <td>@s.Description</td>
                        <td>@s.ExpectedValue</td>
                        <td>@s.ActualValue</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (excelUploadStatus != null && excelUploadStatus.Count > 0)
{
    <div id="excelUploadStatus">
        <h2>Upload Status</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>&nbsp;</th>
                    <th>Type</th>
                    <th>Is Complete Refresh</th>
                    <th>Row Count</th>
                    <th>By</th>
                    <th>Request Time</th>
                    <th>Posting Time</th>

                    <th>Local File Name</th>
                    <th>Is Parsed</th>
                    <th>Error Count</th>
                    <th></th>

                    @if (IsSetupSuperAdmin)
                    {
                        <th>Is Locked</th>
                        <th>Lock Time</th>

                        <th>Server File Name</th>
                        <th></th>
                    }
                    <th></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var s in excelUploadStatus.OrderByDescending(x=> x.RequestTimestamp).ThenBy(x=> x.UploadType))
                {
                    string guidForRow = Guid.NewGuid().ToString();
                    string guid = Guid.NewGuid().ToString();
                    int colCount = IsSetupSuperAdmin ? 16 : 12;

                    @* Image Name*@
                string imageName = "";
                if (s.IsPosted)
                {
                    imageName = "greenImage.png";
                }
                else if (s.IsParsed && s.ErrorCount == 0)
                {
                    imageName = "yellowImage.png";
                }
                else if (s.IsParsed && s.ErrorCount > 0)
                {
                    imageName = "redImage.png";
                }
                else
                {
                    imageName = "blackImage.png";
                }

                    <tr>
                        <td>
                            <img src="~/Content/img/@imageName" alt="">
                        </td>
                        <td>@s.UploadType</td>
                        <td>@s.IsCompleteRefresh</td>
                        <td>@s.RecordCount</td>
                        <td>@s.RequestedBy</td>
                        <td>@Html.DisplayFor(t => s.RequestTimestamp)</td>
                        @if (s.IsPosted)
                        {
                            <td>@Html.DisplayFor(t => s.PostingTimestamp)</td>
                        }
                        else
                        {
                            <td>Pending</td>
                        }

                        <td>@s.LocalFileName</td>
                        <td>@s.IsParsed</td>
                        <td>@s.ErrorCount</td>

                        @if (s.IsParsed)
                        {
                            <td>
                            <a href="" title="Show Logs" onclick="detailAnchorClicked('@guidForRow', '@guid', '@s.Id'); return false;">Log</a>
                            </td>
                        }
                        else
                        {
                            <td>&nbsp;</td>
                        }


                        @if (IsSetupSuperAdmin)
                        {
                            <td>@s.IsLocked</td>
                            if (s.IsLocked)
                            {
                                <td>@Html.DisplayFor(t => s.LockTimestamp)</td>
                            }
                            else
                            {
                                <td>&nbsp;</td>
                            }

                            <td>@s.UploadFileName</td>
                            if (s.DoesFileExist)
                            {
                                <td>
                                    <a href="/TestBed/PreSignedLinkFromS3?fileName=@s.UploadFileName">Download</a>
                                </td>
                            }
                            else
                            {
                                <td>&nbsp;</td>
                            }
                        }

                        @if (s.IsPosted == false)
                        {
                        <td>
                            <a href="/Excel/DeletePendingUpload?uploadId=@s.Id" title="Delete @s.UploadType Upload">Delete</a>
                        </td>
                        }
                        else
                        {
                            <td>&nbsp;</td>
                        }
                    </tr>

                    <tr class="detailRow" id="@guidForRow">
                        <td style="border-top:none;font-weight:bold;">&nbsp;</td>
                        <td style="border-top:none;" id="@guid" colspan="@colCount">&nbsp;</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@section scripts{
    <script>
            $(document).ready(
                function () {
                    $(".detailRow").hide();
                    $("#btnUpload").off('click').on('click', UploadClicked);

                    // once user changes selection boxes, clear results area;
                    $('Select#selDataType').change(function () {
                        TypeChanged();
                        HideErrorList();
                    });
                    $('input').change(function () { ClearResults(); });

                    HideAllSchema();

                    $("#waitDiv").removeAttr("style");
                    $("#waitDiv").hide();

                    // show the schema when coming on post back
                    TypeChanged();
                }
            );

            function HideErrorList()
            {
                $('#errorList').hide();
            }

            function HideUploadStatus() {
                $('#excelUploadStatus').hide();
            }

            function HideAllSchema()
            {
                $(".schemaDiv").each(function () {
                    $(this).removeAttr("style");
                    $(this).hide();
                });
            }

            function TypeChanged() {
                ClearResults();
                HideAllSchema();
                $('#fileControl').val('');
                var selVal = $("#selDataType").val();
                if (selVal == undefined || selVal == '')
                {
                    ;
                }
                else
                {
                    $("div#" + selVal).show();
                }
            }

            function ClearResults() {
                $('#messageDiv').html('');
            }

            var UploadClicked = function (event) {
                //alert('Upload Clicked');

                // ensure type is selected
                var selectedType = $('#selDataType').val();
                if (selectedType == '')
                {
                    alert("Please select Data Type to upload");
                    return;
                }
                
                var selectedFile = $('#fileControl').val();
                if (selectedFile == undefined || selectedFile == '')
                {
                    alert("Please select file to upload");
                    return;
                }

                // ensure the extension of file is correct
                var regexPattern = /^.+(@regexPattern)$/i;
                if (regexPattern.test(selectedFile) == false)
                {
                    alert("Given File type is not supported.");
                    return;
                }

                // validate refresh type
                var refreshType = $('#idCompleteRefresh').val();
                if (refreshType == '') {
                    alert("Please select Refresh option.");
                    return;
                }

                //alert(selectedFile);

                //$("#btnUpload").hide();

                HideAllSchema();
                HideErrorList();

                HideUploadStatus();

                $("#optionsDiv").hide();

                $("#waitDiv").removeAttr("style");
                $("#waitDiv").show();

                document.getElementById('uploadForm').submit();
            }

            var openDetailBlocks = {};
            function detailAnchorClicked(rowGuid, targetGuid, itemId) {
                if (openDetailBlocks[rowGuid] == undefined) // never opened
                {
                    openDetailBlocks[rowGuid] = 1;  // first time click
                    $('#' + rowGuid).show();
                    $('#' + targetGuid).html('<p>Please wait</p>');

                    $.ajax('/Excel/GetParseErrors', {
                        cache: false,
                        type: "Get",
                        contentType: "application/json",
                        data: { 'Id': itemId },
                        success: function (data, textStatus, jqXHR) {
                            $('#' + targetGuid).html(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("An error occured while getting data.")
                        }
                    });
                }
                else if (openDetailBlocks[rowGuid] == 1) {
                    $('#' + rowGuid).hide();
                    openDetailBlocks[rowGuid] = 0;
                }
                else if (openDetailBlocks[rowGuid] == 0) // currently closed, open it
                {
                    $('#' + rowGuid).show();
                    openDetailBlocks[rowGuid] = 1;
                }
            }

    </script>
}

@section styles{
    <style>
    .tableSchemaHead,th
    {
        text-align:center!important;
        background-color:lightgrey!important;
    }

    table.schemaTable tr td
    {
        text-align:center!important;
    }

    td
    {
        text-align:center!important;
    }

    </style>
}