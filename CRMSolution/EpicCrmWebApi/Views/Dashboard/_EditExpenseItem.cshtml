@model ExpenseItemViewModel
@{
    //IEnumerable<DomainEntities.CodeTableEx> clientType = (List<DomainEntities.CodeTableEx>)ViewBag.ClientType;

    string title = "Edit ExpenseItem";

    //Model.Odometer = Model.OdometerEnd - Model.OdometerStart;
    //if (Model.Id > 0)
    //{
    //    title = "Edit ExpenseItem";
    //}
    //else
    //{
    //    title = "Add ExpenseItem";
    //}
}


@using (Html.BeginForm("EditExpenseItem", "Dashboard", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <span style="font-size:large;">@title</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.ExpenseType)
        @Html.HiddenFor(model => model.TransportType)
        @Html.HiddenFor(model => model.FuelType)
        @Html.HiddenFor(model => model.FuelQuantityInLiters)
        @Html.HiddenFor(model => model.Amount)
        @Html.HiddenFor(model => model.Odometer)
        @Html.HiddenFor(model => model.Comment)
        @*@Html.HiddenFor(model => model.ClientType)
        @Html.HiddenFor(model => model.ClientName)
        @Html.HiddenFor(model => model.ClientCode)
        @Html.HiddenFor(model => model.ActualStartDate)
        @Html.HiddenFor(model => model.ActualEndDate)
        @Html.HiddenFor(model => model.CyclicCount)*@


        <table class="table table-bordered table-striped table-condensed" style="margin-top:2px;margin-bottom:5px;" id="idDetailsTable">
            <tr>
                <th>@Html.DisplayNameFor(model => model.ExpenseType)</th>
                <th>@Html.DisplayNameFor(model => model.TransportType)</th>
                <th>@Html.DisplayNameFor(model => model.FuelType)</th>
                <th>@Html.DisplayNameFor(model => model.FuelQuantityInLiters)</th>
                <th>@Html.DisplayNameFor(model => model.Amount)</th>
                <th>@Html.DisplayNameFor(model => model.OdometerStart)</th>
                @*<th>@Html.DisplayNameFor(model => model.Comment)</th>*@
            </tr>
            <tr>
                <td>@Html.DisplayFor(modelItem => Model.ExpenseType)</td>
                <td>@Html.DisplayFor(modelItem => Model.TransportType)</td>
                <td>@Html.DisplayFor(modelItem => Model.FuelType)</td>
                <td>@Html.DisplayFor(modelItem => Model.FuelQuantityInLiters)</td>
                <td>@Html.DisplayFor(modelItem => Model.Amount)</td>
                <td>@Html.DisplayFor(modelItem => Model.Odometer)</td>
                @*<td>@Html.DisplayFor(modelItem => Model.Comment)</td>*@
            </tr>
        </table>

         <div class="form-group">
            <div>
                @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.DeductedAmount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.DeductedAmount, new { htmlAttributes = new { @class = "form-control", @id = "idDeductedAmount" } })
                    @*@Html.ValidationMessageFor(model => model.DeductedAmount, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.RevisedAmount, htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.RevisedAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "idRevisedAmount" } })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-5 col-md-4">
                <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
            </div>
        </div>
    </div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}

<script type="text/javascript">

    //$('#popupSaveButton').on('click', function () { Save() });
    var amount = @Model.Amount;

    function CalculateRevisedAmount() {
        $('#idWait').hide();
        var deductedAmount = $('#idDeductedAmount').val();
        if (isNaN(deductedAmount)) {
            ShowAlertArea("Error!", "Please enter a valid Amount", true);
            return false;
        }
        else {
            var revisedAmount = amount - deductedAmount;
            $('#idRevisedAmount').val(Number(revisedAmount));
        }
    }

    $('#idDeductedAmount').on('input', function (e) {
        CalculateRevisedAmount();
    });

    //function Save() {
    //    var collectiveData = {};
    //    $("#popupForm").hide();
    //    $("#idWait").show();

    //    $('#idCancelLinkContainer').remove();

    //    $.ajax('/Dashboard/EditExpenseItem', {
    //        type: "POST",
    //        contentType: "application/JSON",
    //        data: JSON.stringify(collectiveData),
    //        success: function (data, textStatus, jqXHR) {

    //            $formHtml = $(data); // make it Jquery object
    //            $("#resultArea").html($formHtml);

    //            $formContainer = $("div#divOverGlass");

    //            // attach event on cancel
    //            $formHtml.find("#popupCancelLink").click(
    //                {
    //                    formContainer: $formContainer,
    //                    form: $formHtml
    //                }, cancelLinkClickOnGlassForm);
    //        },
    //        error: function (jqXHR, textStatus, errorThrown) {
    //            alert("An error occured. Please refresh the page and try again.")
    //            $formContainer = $("div#divOverGlass");
    //            HideGlassForm({
    //                formContainer: $formContainer
    //            })
    //        }
    //    });

    //}

</script>