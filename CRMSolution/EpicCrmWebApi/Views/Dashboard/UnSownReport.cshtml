@model EpicCrmWebApi.ModelFilter
@{
    IEnumerable<DomainEntities.CodeTableEx> statusValues = ViewBag.AgreementStatus;
    IEnumerable<DomainEntities.CodeTable> activeCrops = ViewBag.ActiveCrops;

    bool uniqueIdEnabled = CRMUtilities.Utils.SiteConfigData.EntityModuleUniqueIdVisible;
    bool agreementsEnabled = CRMUtilities.Utils.SiteConfigData.IsEntityAgreementEnabled;

    IEnumerable<DomainEntities.OfficeHierarchy> officeHierarchy = (IEnumerable<DomainEntities.OfficeHierarchy>)ViewBag.OfficeHierarchy;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();

    bool SMSOnDemandFeatureEnabled = (bool)ViewBag.SMSOnDemandFeatureEnabled;
    int MaxSMSTextSize = (int)ViewBag.MaxSMSTextSize;
}

@{
    string t = $"UnSown Report";
    Html.RenderPartial("_CodeSnippetPageHeader", t);
}

<div class="well" id="idSearchWell">
    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Zone</label>
                <select class="form-control" id="selZone">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Area</label>
                <select class="form-control" id="selArea">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Territory</label>
                <select class="form-control" id="selTerritory">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>HQ</label>
                <select class="form-control" id="selHQ">
                    <option value="All">All</option>
                </select>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>Crop</label>
                <select class="form-control" id="selCrop">
                    <option value="All">All</option>
                    @foreach (var o in activeCrops.OrderBy(x => x.Code))
                    {
                        <option value="@o.Code">@o.Code</option>
                    }
                </select>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Client Name</label>
                <input type="text" class="form-control" id="clientName" />
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Client Type</label>
                <select class="form-control" id="selClientType">
                    <option value="All">All</option>
                    @foreach (var o in Model.ClientType.OrderBy(x => x.DisplaySequence))
                    {
                        <option value="@o.Code">@o.Code</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Employee Code</label>
                <input type="text" class="form-control" id="employeeCode" />
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Employee Name</label>
                <input type="text" class="form-control" id="employeeName" />
            </div>
        </div>
      
    </div>
    <div class="row">
        @if (uniqueIdEnabled)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>UniqueId</label>
                    <input type="text" class="form-control" id="uniqueId" />
                </div>
            </div>
        }

        @if (agreementsEnabled)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Agreement Number</label>
                    <input type="text" class="form-control" id="agreementNumber" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Agreement Status</label>
                    <select class="form-control" id="selStatus" name="Status">
                        <option value="All">Select</option>
                        @foreach (var o in statusValues.OrderBy(x => x.DisplaySequence))
                        {
                            if (o.Code.StartsWith("Not", StringComparison.OrdinalIgnoreCase))
                            {
                                <option value="@o.Code" selected>@o.Code</option>
                            }
                            else
                            {
                                <option value="@o.Code">@o.Code</option>
                            }
                        }
                    </select>
                </div>
            </div>
        }

        <div class="col-sm-2">
            <div class="form-group">
                <label>&nbsp;</label>
                <input type="button" id="btnSearch" value="Search" class="form-control btn-success" />
            </div>
        </div>
    </div>
</div>
<div id="dataArea">
</div>


<script type="text/javascript">
    // Office Hierarchy object
        @Html.Raw("var OfficeHierarchy =[];")

        @foreach(var oh in officeHierarchy)
        {
            sb.AppendLine("var joh = { };");

            sb.AppendLine($"joh.ZoneCode = '{oh.ZoneCode}';");
            sb.AppendLine($"joh.ZoneName = '{oh.ZoneName}';");
            sb.AppendLine($"joh.AreaCode = '{oh.AreaCode}'; ");
            sb.AppendLine($"joh.AreaName = '{oh.AreaName}';");
            sb.AppendLine($"joh.TerritoryCode = '{oh.TerritoryCode}'; ");
            sb.AppendLine($"joh.TerritoryName = '{oh.TerritoryName}'; ");
            sb.AppendLine($"joh.HQCode = '{oh.HQCode}'; ");
            sb.AppendLine($"joh.HQName = '{oh.HQName}';");
            sb.AppendLine("OfficeHierarchy.push(joh);");
        }
    @Html.Raw(sb.ToString());
    @Html.Raw($"var SMSOnDemandFeatureEnabled={SMSOnDemandFeatureEnabled.ToString().ToLower()}");
</script>


@section scripts{
<script src="/Scripts/jquery.datetimepicker.js"></script>
    <script>
        $(document).ready(
            function () {
                ShowSearch();
                $("#btnSearch").off('click').on('click', btnSearchClicked);
                $("#showSearch").off('click').on('click', ShowSearch);

                // once user changes selection boxes, clear results area;
                $('Select').change(function () { ClearResults(); });
                $('input').change(function () { ClearResults(); });

                $('.justDate').datetimepicker({ inline: false, format: 'd-m-Y', timepicker: false, yearStart: 2017, yearEnd: 2099 });

                $('.justDate').attr({ 'placeholder': 'dd-mm-yyyy' });

                // zone/Area/Territory/HQ changed
                $('#selZone').change(function () { ZonesSelectionChanged(); })
                $('#selArea').change(function () { AreasSelectionChanged(); })
                $('#selTerritory').change(function () { TerritoriesSelectionChanged(); })
                   
                var selectedObj = {};
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    selectedObj[o.ZoneName] = o.ZoneCode;
                }
                Object.keys(selectedObj).sort().forEach(function (element) {
                    var opt = new Option(element, selectedObj[element]);
                    $('#selZone').append(opt);
                });
            });


        // Search button
        var btnSearchClicked = function (event) {
            DisableSearchButton();
            var searchCriteria = CaptureSearchCriteria();

            // Agreement status must be selected due to nature of report and filters applied
            if (searchCriteria.AgreementStatus == undefined || searchCriteria.AgreementStatus == 'All')
            {
                $('#dataArea').html('<p>Please Select Agreement Status...</p>');
                EnableSearchButton();
                return;
            }

            //alert(JSON.stringify(searchCriteria));

            var agNum = searchCriteria.AgreementNumber;
            var uniqueId = searchCriteria.UniqueId;
            var selStatus = searchCriteria.AgreementStatus;

            if ($("#clientName").val() == '' && $("#selClientType").val() == 'All' 
                && $("#employeeCode").val() == '' && $("#employeeName").val() == '' &&
                (agNum == '' || agNum == undefined) &&
                (uniqueId == '' || uniqueId == undefined) &&
                (selStatus == 'All' || selStatus == undefined) &&
                $("#selZone").val() == 'All' &&
                $("#selArea").val() == 'All' &&
                $("#selTerritory").val() == 'All' &&
                $("#selHQ").val() == 'All' &&
                $("#selCrop").val() == 'All'
                )
            {
                $('#dataArea').html('<p>Please Enter Your Search Criteria...</p>');
                EnableSearchButton();
                return;
            }

            $('#dataArea').html('<p>Please wait...</p>');

            $.ajax('GetSearchUnSownReport', {
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: searchCriteria,
                success: function (data, textStatus, jqXHR) {
                    {
                        var $dataAsHtml = $(data);
                        var showSelectionCBoxes = false;

                        // count the number of tr rows
                        var resultRowCount = $dataAsHtml.find("tr").not(':first').size();
                        //alert('ResultRowCount = ' + resultRowCount);
                        if (SMSOnDemandFeatureEnabled == true && resultRowCount > 1)   // > 1 as one row is header row;
                        {
                            // show check box for SMS only if result has rows and a column Employee Code
                            colNumForEmployeeCode = 0;

                            // from 2nd row get the column index where Employee Code is listed
                            var totColumns = 0;
                            $dataAsHtml.find("tr:nth-child(2)").find('th').each(function (index, element) {
                                var colHeading = $(element).text().trim();
                                totColumns++;
                                if (colHeading == 'Employee Code') {
                                    colNumForEmployeeCode = index + 1;
                                }
                            });

                            if (colNumForEmployeeCode > 0) {
                                colNumForEmployeeCode++; // we are adding check box;
                                showSelectionCBoxes = true;
                                // now add one column in the table
                                //$dataAsHtml.find("tr:first-child").prepend("<td><input type='button' id='btnSend' value='SMS' class='form-control btn-success'/></td>");
                                $dataAsHtml.find("tr:first-child").prepend("<td>&nbsp;</td>");
                                $dataAsHtml.find("tr:nth-child(2)").prepend("<th>All<input class='check-box allRecMark' type='checkbox'/></th>");
                                $dataAsHtml.find("tr").not(':first').not(':nth-child(2)').prepend("<td><input class='check-box oneRecMark' type='checkbox'/></td>");

                                $dataAsHtml.find("tbody").append("<tr class='smsButtonRow'></tr>");
                                //$dataAsHtml.find("tr.smsButtonRow").append("<td colspan='2'></td>");
                                totColumns++;
                                $dataAsHtml.find("tr.smsButtonRow").append("<td colspan='" + totColumns + "'><b>Message Text</b> max @MaxSMSTextSize char | Duplicate and in-active employees will be auto removed. <input style='width:50%;' type='text' id='txtSMS' class='form-control' maxlength='@MaxSMSTextSize'/><input style='width:200px;' type='button' id='btnSend' value='Send Message' class='form-control btn-success'/><input style='width:200px;' type='button' id='btnShowMarked' value='Show Selected' title='Show checked rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowUnMarked' value='Show Un-selected' title ='Show un-selected rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowAll' value='Show All' title='Show all rows' class='form-control btn-warning'/></td>");
                            }
                        }


                        $('#dataArea').empty();
                        $('#dataArea').html($dataAsHtml);

                        if (showSelectionCBoxes) {
                            // add event handler for check / uncheck all
                            $("input.allRecMark").click(function () {
                                $("input.oneRecMark").prop('checked', $(this).prop('checked'));
                            });

                            $('input#btnSend').click(sendMessageButtonClicked);
                            $('input#btnShowMarked').click(showMarkedRowsClicked);
                            $('input#btnShowUnMarked').click(showUnMarkedRowsClicked);
                            $('input#btnShowAll').click(showAllRowsClicked);

                            $('input#btnSend').css('display', 'inline');
                            $('input#btnShowMarked').css('display', 'inline');
                            $('input#btnShowUnMarked').css('display', 'inline');
                            $('input#btnShowAll').css('display', 'inline');
                        }  // showSelectionCBoxes
                    }


                    // resultRowCount > 1 - as first row is header row;
                    if (document.getElementById("downloadLinkArea") != null && resultRowCount > 1) {
                        // create link to download the data as excel
                        // do some text replacements - remove links etc.
                        var dataToSave = data.replace(/<a.*\">/g, "").replace(/<\/a>/g, "");
                        // Checked check box to be turned into 'Yes'
                        dataToSave = dataToSave.replace(/<input checked=\"checked\" class=\"check-box\" disabled=\"disabled\" type=\"checkbox\" \/>/g, "Yes");

                        // now create html and remove header row from downloadable data
                        var $dataAsHtml = $(dataToSave);
                        $dataAsHtml.find("#dataTableHeader").remove();
                        // remove all rows that are there to show order details inline
                        // it will be there only for orders;
                        //$dataAsHtml.find(".orderDetailRow").remove();
                        dataToSave = $('<div>').append($dataAsHtml).html();

                        var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                        var url = URL.createObjectURL(blob);

                        var a = document.createElement('a');
                        a.download = "DownloadReport.xls";
                        a.href = url;
                        a.textContent = "Download as Excel";

                        document.getElementById("downloadLinkArea").appendChild(a);
                    }

                    $(".editInPopup").off('click').on('click', editPopupLinkClicked);
                    $(".addInPopup").off('click').on('click', addPopupLinkClicked);
                    EnableSearchButton();
                    if (resultRowCount > 1)
                    {
                        HideSearch();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("An error occured while getting data matching your search criteria.")
                    EnableSearchButton();
                }
            });
        }

        function CaptureSearchCriteria() {
            var searchCriteria = {};
            searchCriteria.ClientName = $("#clientName").val();
            searchCriteria.ClientType = $("#selClientType").val();
            searchCriteria.EmployeeCode = $("#employeeCode").val();
            searchCriteria.EmployeeName = $("#employeeName").val();
            searchCriteria.AgreementNumber = $("#agreementNumber").val();
            searchCriteria.UniqueId = $("#uniqueId").val();
            searchCriteria.AgreementStatus = $("#selStatus").val();
            searchCriteria.Zone = $("#selZone").val();
            searchCriteria.Area = $("#selArea").val();
            searchCriteria.Territory = $("#selTerritory").val();
            searchCriteria.HQ = $("#selHQ").val();
            searchCriteria.Crop = $("#selCrop").val();

            return searchCriteria;
        }

        function sendMessageButtonClicked() {
            $('input#btnSend').hide();
            var selectedStaffCode = [];
            $("input.oneRecMark").each(function (index, element) {
                if ($(element).is(':checked')) {
                    var v = $(element).parent().parent().find('td:nth-child(' + colNumForEmployeeCode + ')').text().trim();
                    // store in array only if it does not exist
                    if (/^[0-9a-zA-Z]{8}$/.test(v) && selectedStaffCode.indexOf(v) === -1) {
                        selectedStaffCode.push(v);
                    }
                }
            });

            if (selectedStaffCode.length == 0) {
                alert('Please mark rows and try again.');
                $('input#btnSend').show();
                return;
            }

            // pick up the text for SMS
            var smsText = $('#txtSMS').val().trim();
            if (/^[a-zA-Z0-9 ._,()+?><\/:;\-|\=\*\%\$\#\!]{10,@MaxSMSTextSize}$/.test(smsText) == false) {
                alert('Invalid SMS Text - can have 10 to @MaxSMSTextSize alpha and numeric characters with embedded spaces, dash and underscore only.');
                $('input#btnSend').show();
                return;
            }

            // confirm if person wants to send message
            var sSave = window.confirm("Do you want to send message: '" + smsText + "' to " + selectedStaffCode.length + " people?");
            if (sSave == false) {
                $('input#btnSend').show();
                return;
            }

            var transmitData = {};
            transmitData.staffCodes = selectedStaffCode;
            transmitData.smsText = smsText;

            $.ajax('/Dashboard/SendMessageOnDemand', {
                traditional: true,
                cache: false,
                type: "Get",
                contentType: "application/json",
                dataType: "json",
                data: transmitData,
                success: function (data, textStatus, jqXHR) {
                    if (data.Status) {
                        // clear message and uncheck all check boxes;
                        $('#txtSMS').val('');
                        $("input.allRecMark").prop('checked', false);
                        $("input.oneRecMark").prop('checked', false);
                    }
                    else {
                        data.Message = "Error: " + data.Message;
                    }

                    alert(data.Message);

                    $('input#btnSend').show();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("An error occured while sending messages. Please try again.")
                    $('input#btnSend').show();
                }
            });

            $('input#btnSend').show();
        }

        function showMarkedRowsClicked() {
            $("input.oneRecMark").each(function (index, element) {
                var trow = $(element).parent().parent();
                ($(element).is(':checked')) ? trow.show() : trow.hide();
                if (trow.hasClass('orderDetailRow')) {
                    trow.hide();
                }
            });
        }

        function showUnMarkedRowsClicked() {
            $("input.oneRecMark").each(function (index, element) {
                var trow = $(element).parent().parent();
                ($(element).is(':checked')) ? trow.hide() : trow.show();
                if (trow.hasClass('orderDetailRow')) {
                    trow.hide();
                }
            });
        }

        function showAllRowsClicked() {
            $("input.oneRecMark").each(function (index, element) {
                var trow = $(element).parent().parent();
                if (trow.hasClass('orderDetailRow')) {
                    trow.hide();
                }
                else {
                    trow.show();
                }
            });
        }

        function DisableSearchButton() {
            $("#btnSearch").hide();
        }

        function EnableSearchButton() {
            $("#btnSearch").show();
        }

        function HideSearch() {
            $("#idSearchWell").hide();
            $("#showSearch").show();
        }

        function ShowSearch() {
            $("#idSearchWell").show("slow");
            $("#showSearch").hide();
        }

        function ClearResults() {
            $('#dataArea').html('');
        }

        function ZonesSelectionChanged() {
            $('#selArea option:not(:first-child)').remove();
            $('#selTerritory option:not(:first-child)').remove();
            $('#selHQ option:not(:first-child)').remove();

            // get current value of Zone
            var selectedZone = $("#selZone").val();
            FillAreasForZone(selectedZone);
        }

        function FillAreasForZone(z) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == z) {
                    // use Area Name as key so we can sort by name
                    selectedObj[o.AreaName] = o.AreaCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selArea').append(opt);
            });
        }

        function AreasSelectionChanged() {
            $('#selTerritory option:not(:first-child)').remove();
            $('#selHQ option:not(:first-child)').remove();
            var selectedZone = $("#selZone").val();
            var selectedArea = $("#selArea").val();
            FillTerritories(selectedZone, selectedArea);
        }

        // zone and area
        function FillTerritories(zo, ar) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar) {
                    selectedObj[o.TerritoryName] = o.TerritoryCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selTerritory').append(opt);
            });
        }

        function TerritoriesSelectionChanged() {
            $('#selHQ option:not(:first-child)').remove();
            var selectedZone = $("#selZone").val();
            var selectedArea = $("#selArea").val();
            var selectedTerritory = $("#selTerritory").val();
            FillHQ(selectedZone, selectedArea, selectedTerritory);
        }

        // zone, area, tr
        function FillHQ(zo, ar, tr) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar && o.TerritoryCode == tr) {
                    selectedObj[o.HQName] = o.HQCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selHQ').append(opt);
            });
        }

    </script>
}
