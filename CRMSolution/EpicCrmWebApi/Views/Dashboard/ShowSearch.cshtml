@model EpicCrmWebApi.ModelFilter

@{
    ViewBag.Title = "Search";
    string reportType = ViewBag.ReportType;
    bool showAmountFilters = (bool)ViewBag.ShowAmountFilters;

    bool showClientTypeFilter = (bool)ViewBag.ShowClientTypeFilter;
    bool showClientNameFilter = (bool)ViewBag.ShowClientNameFilter;
    bool showActivityTypeFilter = (bool)ViewBag.ShowActivityTypeFilter;

    bool showEmployeeStatusFilter = (bool)ViewBag.ShowEmployeeStatusFilter;
    bool showDepartmentFilter = (bool)ViewBag.ShowDepartmentFilter;
    bool showDesignationFilter = (bool)ViewBag.ShowDesignationFilter;
    bool showOrderIdFilter = (bool)ViewBag.ShowOrderIdFilter;
    bool showEntityWorkFLowFilter = (bool)ViewBag.ShowEntityWorkFLowFilter;
    bool showEntityWorkFlowStatusFilter = (bool)ViewBag.ShowEntityWorkFlowStatusFilter;
    bool showEntityNameFilter = (bool)ViewBag.ShowEntityNameFilter;
    bool showDateFilters = (bool)ViewBag.ShowDateFilters;

    bool showPlannedDateFilters = (bool)ViewBag.ShowPlannedDateFilters;
    bool showHarvestDateFilter = (bool)ViewBag.ShowHarvestDateFilter;


    bool showDistanceFilters = (bool)ViewBag.ShowDistanceFilters;
    bool showAgreementNumberFilter = (bool)ViewBag.ShowAgreementNumberFilter;

    bool showAgreementStatusFilter = (bool)ViewBag.ShowAgreementStatusFilter;
    bool showCropFilter = (bool)ViewBag.ShowCropFilter;

    bool showSlipNumberFilter = (bool)ViewBag.ShowSlipNumberFilter;
    bool showRowStatusFilter = (bool)ViewBag.ShowRowStatusFilter;
    bool showQuestionnaireTypeFilter = (bool)ViewBag.ShowQuestionnaireTypeFilter;
    string searchButtonText = (string)ViewBag.SearchButtonText;
    IEnumerable<DomainEntities.OfficeHierarchy>
    officeHierarchy = (IEnumerable<DomainEntities.OfficeHierarchy>
        )ViewBag.OfficeHierarchy;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();

    bool SMSOnDemandFeatureEnabled = (bool)ViewBag.SMSOnDemandFeatureEnabled;
    int MaxSMSTextSize = (int)ViewBag.MaxSMSTextSize;

    bool ShowPdfReportOption = (bool)ViewBag.ShowPdfReportOption;
    string EmployeeExpenseRdlcReportName = (string)ViewBag.EmployeeExpenseRdlcReportName;

    IEnumerable<DomainEntities.CodeTableEx>
        statusValues = ViewBag.StatusValues;

    //Added By:Ajith; Purpose:Dealer Questionnaire; Date: 12/06/2021
    IEnumerable<DomainEntities.Questionnaire.QuestionPaper>
        QuestionPaper = ViewBag.QuestionPaper;
    //Added By:PankajKumar; Purpose: Added Day Planning Report; Date: 30/04/2021
    bool showTargetStatusFilter = (bool)ViewBag.ShowTargetStatusFilter;
    bool showPlanTypeFilter = (bool)ViewBag.ShowPlanTypeFilter;
    bool showGeoTagStatusFilter = (bool)ViewBag.ShowGeoTagStatusFilter;

    bool showUniqueIdFilter = (bool)ViewBag.ShowUniqueIdFilter;
    bool showSeasonFilter = (bool)ViewBag.ShowSeasonFilter;
    IEnumerable<string>
        Seasons = ViewBag.ShowSeasonData;

    bool showCustomerFilter = (bool)ViewBag.CustomerFilter;
    bool showEmployeeFilter = (bool)ViewBag.EmployeeFilter;
    bool showBankDetailStatus = (bool)ViewBag.ShowBankDetailStatusFilter;
    bool showBusinessRoleFilter = (bool)ViewBag.ShowBusinessRoleFilter;
    bool showProfileStatusFilter = (bool)ViewBag.ShowProfileStatusFilter;
    bool showAgreementReportFilter = (bool)ViewBag.ShowAgreementRpeortFilters;

    @* temporary fix for reitzel Stage testing - else this code to remove duplicates is already there in Dashboard Controller*@
Model.WorkFlowPhases = Model.WorkFlowPhases.GroupBy(x => x.Code)
.Select(x => new DomainEntities.CodeTableEx()
{
Code = x.Key,
CodeName = x.Key,
DisplaySequence = x.First().DisplaySequence
})
.ToList();
}

@{
    string t = $"Specify the {ViewBag.ReportType} criteria and click {searchButtonText}";
    Html.RenderPartial("_CodeSnippetPageHeader", t);
}


@* https://www.w3schools.com/Bootstrap/bootstrap_scrollspy.asp
    http://www.eyecon.ro/bootstrap-datepicker/
    https://tarruda.github.io/bootstrap-datetimepicker/
*@
<div class="well" id="idSearchWell">
    <div class="row">
        @if (!showAgreementReportFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Zone</label>
                    <select class="form-control" id="selZone">
                        <option value="All">All</option>
                        @*@foreach (var o in Model.Zones.OrderBy(x => x.CodeName))
                            {
                            <option value="@o.Code">@o.CodeName</option>
                            }*@
                    </select>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Area</label>
                    <select class="form-control" id="selArea">
                        <option value="All">All</option>
                    </select>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Territory</label>
                    <select class="form-control" id="selTerritory">
                        <option value="All">All</option>
                    </select>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>HQ</label>
                    <select class="form-control" id="selHQ">
                        <option value="All">All</option>
                    </select>
                </div>
            </div>
        }



        @if (showAmountFilters)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>@reportType Status</label>
                    <select class="form-control" id="selDataStatus">
                        <option value="All">All</option>
                        @foreach (var o in Model.StatusOptions.OrderBy(x => x.DisplaySequence))
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (showOrderIdFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Order Number</label>
                    <input type="text" class="form-control" id="txtOrderId" />
                </div>
            </div>
        }

        @if (showDesignationFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Designation</label>
                    <select class="form-control" id="selDesignation">
                        <option value="All">All</option>
                        @foreach (var o in Model.Designations)
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    </select>
                </div>
            </div>
        }
        @if (showAgreementReportFilter)
        {

            <div class="col-sm-2">
                <div class="form-group">
                    <label>Season Name</label>
                    <select class="form-control" id="selSeasonName">
                        <option value="All">All</option>
                        @foreach (var o in Seasons)
                        {
                            <option value="@o">@o</option>
                        }
                    </select>

                </div>
            </div>


            <div class="col-sm-2">
                <div class="form-group">
                    <label>Crop</label>
                    <select class="form-control" id="selCrop">
                        <option value="All">All</option>
                        @foreach (var o in Model.ActiveCrops.OrderBy(x => x.Code))
                        {
                            <option value="@o.Code">@o.Code</option>
                        }
                    </select>
                </div>
            </div>
        }
    </div>
    @*Author : Swetha M Date: 31/01/2023 Purpose: Editable filed of ZATH for Agreements Report*@

    @if (showAgreementReportFilter)
    {
        <div class="row">
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Zone Name</label>
                    <input type="text" class="form-control" id="selZone" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Area Name</label>
                    <input type="text" class="form-control" id="selArea" />

                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Territory Name</label>
                    <input type="text" class="form-control" id="selTerritory" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>HQ Name</label>
                    <input type="text" class="form-control" id="selHQ" />
                </div>
            </div>
        </div>
    }


    <div class="row">
        @*Show Department Filter in AppSignIn Report*@
        @if (showDepartmentFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Department</label>
                    <select class="form-control" id="selDepartment">
                        <option value="All">All</option>
                        @foreach (var o in Model.Departments)
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (showClientTypeFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Client Type</label>
                    <select class="form-control" id="selClientType">
                        <option value="All">All</option>
                        @foreach (var o in Model.ClientType.OrderBy(x => x.Code))
                        {
                            <option value="@o.Code">@o.Code</option>
                        }
                    </select>
                </div>
            </div>
        }
        @if (showClientNameFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Client Name</label>
                    <input type="text" class="form-control" id="txtClientName" />
                </div>
            </div>
        }

        @if (showUniqueIdFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Unique ID</label>
                    <input type="text" class="form-control" id="uniqueId" />
                </div>
            </div>
        }

        @if (showActivityTypeFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Activity Type</label>
                    <select class="form-control" id="selActivityType">
                        <option value="All">All</option>
                        @foreach (var o in Model.ActivityType.OrderBy(x => x.CodeName))
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (showEntityWorkFLowFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Work Flow Type</label>
                    <select class="form-control" id="selWorkFlowType">
                        <option value="All">All</option>
                        @foreach (var o in Model.WorkFlowPhases.OrderBy(x => x.Code))
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (showEntityWorkFlowStatusFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Status</label>
                    <select class="form-control" id="selWorkFlowStatus">
                        @foreach (var item in Enum.GetValues(typeof(DomainEntities.WorkFlowStatus)))
                        {
                            <option value="@Convert.ToInt32(item)">@item</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (showEntityNameFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Profile/Entity Name</label>
                    <input type="text" class="form-control" id="textEntityName" />
                </div>
            </div>
        }

        @if (showAgreementNumberFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Agreement #</label>
                    <input type="text" class="form-control" id="txtAgreementNumber" />
                </div>
            </div>
        }


        @if (showAgreementStatusFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Agreement Status</label>
                    <select class="form-control" id="selAgreementStatus" name="Status">
                        <option value="All">All</option>
                        @foreach (var o in Model.AgreementStatus.OrderBy(x => x.DisplaySequence))
                        {
                            <option value="@o.Code">@o.Code</option>
                        }
                    </select>
                </div>
            </div>
        }
        @if (reportType != DomainEntities.Constant.Agreements)
        {
            if (showCropFilter)
            {
                <div class="col-sm-2">
                    <div class="form-group">
                        <label>Crop</label>
                        <select class="form-control" id="selCrop">
                            <option value="All">All</option>
                            @foreach (var o in Model.ActiveCrops.OrderBy(x => x.Code))
                            {
                                <option value="@o.Code">@o.Code</option>
                            }
                        </select>
                    </div>
                </div>
            }
        }


        @if (showSlipNumberFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Slip #</label>
                    <input type="text" class="form-control" id="txtSlipNumber" />
                </div>
            </div>
        }


        @if (showAmountFilters)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Amount From</label>
                    <input type="number" class="form-control" id="txtFromAmount" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Amount To</label>
                    <input type="number" class="form-control" id="txtToAmount" />
                </div>
            </div>
        }

        @if (showDateFilters)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>From (dd-mm-yyyy)</label>
                    <div class="input-append date">
                        <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtFromDate" autocomplete="off" />
                        <span class="add-on">
                            <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                            </i>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>To (dd-mm-yyyy)</label>
                    <div class="input-append date">
                        <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtToDate" autocomplete="off" />
                        <span class="add-on">
                            <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                            </i>
                        </span>
                    </div>
                </div>
            </div>
        }

        @*Added By:PankajKumar; Purpose: Added Plan type; Date: 30/04/2021*@
        @if (showPlanTypeFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Plan Type</label>
                    <select class="form-control" id="selDayPlanType">
                        <option value="All">All</option>
                        @foreach (var o in Model.DayPlanTypes.OrderBy(x => x.DisplaySequence))
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    </select>
                </div>
            </div>
        }
        @*Added By:PankajKumar; Purpose: Added Target Status; Date: 30/04/2021*@
        @if (showTargetStatusFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Target Status</label>
                    <select class="form-control" id="selTargetStatus">
                        <option value="All">All</option>
                        @foreach (var o in Model.TargetStatuses.OrderBy(x => x.DisplaySequence))
                        {
                            <option value="@o.Code">@o.CodeName</option>
                        }
                    </select>
                </div>
            </div>
        }
        @*Purpose: Added GeoTag Status; Date: 28/12/2022*@
        @if (showGeoTagStatusFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>GeoTag Status</label>
                    <select class="form-control" id="selGeoTagStatus" value="@Model.GeolocationType">
                        <option value="2">All</option>
                        <option value="1">Yes</option>
                        <option value="0">No</option>
                    </select>
                </div>
            </div>
        }

        @if (showPlannedDateFilters)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Planned From (dd-mm-yyyy)</label>
                    <div class="input-append date">
                        <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtPlannedFromDate" autocomplete="off" />
                        <span class="add-on">
                            <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                            </i>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Planned End (dd-mm-yyyy)</label>
                    <div class="input-append date">
                        <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtPlannedToDate" autocomplete="off" />
                        <span class="add-on">
                            <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                            </i>
                        </span>
                    </div>
                </div>
            </div>
        }

        @if (showHarvestDateFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Harvest Date (dd-mm-yyyy)</label>
                    <div class="input-append date">
                        <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtHarvestDate" autocomplete="off" />
                        <span class="add-on">
                            <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                            </i>
                        </span>
                    </div>
                </div>
            </div>
        }


    </div>
    <div class="row">
        @if (showEmployeeStatusFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Employee Code</label>
                    <input type="text" class="form-control" id="txtEmployeeCode" value="@Model.EmployeeCode" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Employee Name</label>
                    <input type="text" class="form-control" id="txtEmployeeName" />
                </div>
            </div>

            <div class="col-sm-2">
                <div class="form-group">
                    <label>Employee Status</label>
                    <select class="form-control" id="selEmployeeStatus" value="@Model.EmployeeStatus">
                        <option value="2">All</option>
                        <option value="1">Current</option>
                        <option value="0">Resigned</option>
                    </select>
                </div>
            </div>

        }

        @if (showEmployeeFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Employee Code</label>
                    <input type="text" class="form-control" id="txtEmployeeCode" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Employee Name</label>
                    <input type="text" class="form-control" id="txtEmployeeName" />
                </div>
            </div>
        }

        @*Purpose: Added Profile Status; Date: 31/01/2023*@
        @if (showProfileStatusFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Profile Status</label>
                    <select class="form-control" id="selProfileStatus">
                        <option value="2">All</option>
                        <option value="1">Active</option>
                        <option value="0">Inactive</option>
                    </select>
                </div>
            </div>
        }
        @*Venkatesh; Purpose: DealerNotMetReport;Date: 04/11/2022*@
        @if (showCustomerFilter)
        {

            <div class="col-sm-2">
                <div class="form-group">
                    <label>Customer Code</label>
                    <input type="text" class="form-control" id="txtCustomerCode" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Customer Name</label>
                    <input type="text" class="form-control" id="txtCustomerName" />
                </div>
            </div>
        }

        @*Added By:Ajith; Purpose: Added Dealer Questionnaire;Date :12/06/2021*@
        @if (showQuestionnaireTypeFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <div class="form-group">
                        <label>Questionnaire Type</label>

                        <select class="form-control" id="selQuestionnaireType">
                            <option value="All">All</option>
                            @foreach (var o in QuestionPaper)
                            {
                                <option value="@o.Id">@o.Name</option>
                            }
                        </select>
                    </div>
                </div>

            </div>
        }
        @if (showRowStatusFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Row Status</label>
                    <select class="form-control" id="selRowStatus">
                        <option value="All">All</option>
                        @foreach (var o in statusValues.OrderBy(x => x.DisplaySequence))
                        {
                            <option value="@o.Code">@o.Code</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (showDistanceFilters)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Distance >= (KM)</label>
                    <input type="number" class="form-control" id="txtDistance" value="2" />
                </div>
            </div>
        }



        @if (showSeasonFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <div class="form-group">
                        <label>Season Name</label>
                        <select class="form-control" id="selSeasonName">
                            <option value="All">All</option>
                            @foreach (var o in Seasons)
                            {
                                <option value="@o">@o</option>
                            }
                        </select>

                    </div>
                </div>
            </div>
        }


        @if (showBankDetailStatus)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Bank Details</label>
                    <select class="form-control" id="selBankStatus" name="BankDetailStatus">
                        <option value="All">All</option>
                        @foreach (var o in Model.BankDetailStatus.OrderBy(x => x.DisplaySequence))
                        {
                            <option value="@o.Code">@o.Code</option>
                        }
                    </select>
                </div>
            </div>
        }
        @if (showBusinessRoleFilter)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Business Role</label>
                    <select class="form-control" id="selBusinessRole" name="BankDetailStatus">
                        <option value="All">All</option>
                        <option value="Not Managers">Not Managers</option>
                        <option value="Managers">Managers</option>
                    </select>
                </div>
            </div>
        }
        <div class="col-sm-2">
            <div class="form-group">
                <label>&nbsp;</label>
                <input type="button" id="btnSearch" value="@searchButtonText" class="form-control btn-success" />
            </div>
        </div>

        @if (ShowPdfReportOption)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>&nbsp;</label>
                    <input type="button" id="btnSearchPdf" value="@searchButtonText PDF" class="form-control btn-info" />
                </div>
            </div>
        }



    </div>
</div>

<div id="dataArea">
</div>
<div style="height:40vh;">
</div>

<script type="text/javascript">
@Html.Raw($"var EmployeeExpenseRdlcReportName='{EmployeeExpenseRdlcReportName}';");
                        // Office Hierarchy object
@Html.Raw("var OfficeHierarchy =[];")


@foreach(var oh in officeHierarchy)
                        {
                        sb.AppendLine("var joh = { };");

                        sb.AppendLine($"joh.ZoneCode = '{oh.ZoneCode}';");
                        sb.AppendLine($"joh.ZoneName = '{oh.ZoneName}';");
                        sb.AppendLine($"joh.AreaCode = '{oh.AreaCode}'; ");
                        sb.AppendLine($"joh.AreaName = '{oh.AreaName}';");
                        sb.AppendLine($"joh.TerritoryCode = '{oh.TerritoryCode}'; ");
                        sb.AppendLine($"joh.TerritoryName = '{oh.TerritoryName}'; ");
                        sb.AppendLine($"joh.HQCode = '{oh.HQCode}'; ");
                        sb.AppendLine($"joh.HQName = '{oh.HQName}';");
                        sb.AppendLine("OfficeHierarchy.push(joh);");
                        }
@Html.Raw(sb.ToString());

@Html.Raw($"var SMSOnDemandFeatureEnabled={SMSOnDemandFeatureEnabled.ToString().ToLower()}");
</script>


@section scripts{
    <script src="/Scripts/jquery.datetimepicker.js"></script>
    <script>

                        $(document).ready(
                        function () {
                        //alert(OfficeHierarchy.length);
                        //var hierarchyObj = OfficeHierarchy[0];
                        //alert(hierarchyObj.ZoneCode);
                        //alert(hierarchyObj.ZoneName);
                        //alert(hierarchyObj.AreaCode);
                        //alert(hierarchyObj.AreaName);
                        //alert(hierarchyObj.TerritoryCode);
                        //alert(hierarchyObj.TerritoryName);
                        //alert(hierarchyObj.HQCode);
                        //alert(hierarchyObj.HQName);

                        ShowSearch();
                        $("#btnSearch").off('click').on('click', {ResultType: 'Html'}, btnSearchClicked);
                        $("#btnSearchPdf").off('click').on('click', {ResultType: 'Pdf'}, btnSearchClicked);
                        $("#showSearch").off('click').on('click', ShowSearch);

                        //$('#datepickerFrom').datetimepicker({
                        //            pickTime: false,
                        //    autoClose: true
                        //});

                        //$('#datepickerTo').datetimepicker({
                        //pickTime: false,
                        //    autoClose: true
                        //});


                        $('.justDate').datetimepicker({ inline: false, format: 'd-m-Y', timepicker: false, yearStart: 2017, yearEnd: 2099 });

                        $('.justDate').attr({ 'placeholder': 'dd-mm-yyyy' });

                        // once user changes selection boxes, clear results area;
                                $('Select').change(function () { ClearResults(); });
                                 $('input').change(function () { ClearResults(); });

                                if ('@Model.GeolocationType' != '') {
                                    $("#selGeoTagStatus").val('@Model.GeolocationType')

                                } if ('@Model.EmployeeStatus' != '') {
                                    $("#selEmployeeStatus").val('@Model.EmployeeStatus')
                                    $("#selBusinessRole").val('All')

                                } else {
                                    $("#selBusinessRole").val('Not Managers')

                                }
                                 if ('@Model.EmployeeCode' != '') {
                                                  btnSearchClicked();
                                 }



                        // zone/Area/Territory/HQ changed
                        $('#selZone').change(function () { ZoneSelectionChanged(); })
                        $('#selArea').change(function () { AreaSelectionChanged(); })
                        $('#selTerritory').change(function () { TerritorySelectionChanged(); })

                        // add default dates when report type is Activity
                        var endDate = Date.today();
                        var startDate = Date.today().add(-5).days();
                        if ('@showAmountFilters' == 'False')
                        {
                        $("#txtFromDate").val(startDate.toString('dd-MM-yyyy'));
                        $("#txtToDate").val(endDate.toString('dd-MM-yyyy'));
                        }
                        }
                        );

                        function ClearResults()
                        {
                        $('#dataArea').html('');
                        }

                        var colNumForEmployeeCode = 0;

                        // Search button
                        var btnSearchClicked = function (event) {
                        var searchCriteria = CaptureSearchCriteria();

                        DisableSearchButton();

                        $('#dataArea').html(waitImage);

                        if (event != undefined && event.data.ResultType == 'Pdf')
                        {
                        var queryString = $.param(searchCriteria);
                        //alert(queryString);
                        //var url = '/Reports/ExpenseReport.aspx?' + queryString;
                        var url = '/ExpenseReport.aspx?rdlcReportName=' + EmployeeExpenseRdlcReportName + '&' + queryString;
                        //alert(url);
                        $(location).attr('href', url);
                        }
                        else
                        {
                        //alert(JSON.stringify(searchCriteria));
                        $.ajax('/Dashboard/GetSearchResult', {
                        cache: false,
                        type: "Get",
                        contentType: "application/json",
                        data: searchCriteria,
                        success: function (data, textStatus, jqXHR)
                        {

                        //$('#dataArea').html(data);
                        {
                        // convert the returned data to html
                        var $dataAsHtml = $(data);

                        var showSelectionCBoxes = false;

                        // count the number of tr rows
                        var resultRowCount = $dataAsHtml.find("tr").not(':first').size();
                        //alert('ResultRowCount = ' + resultRowCount);
                        if (SMSOnDemandFeatureEnabled == true && resultRowCount > 1)   // > 1 as one row is header row;
                        {
                        // show check box for SMS only if result has rows and a column Employee Code
                        colNumForEmployeeCode = 0;

                        // from 2nd row get the column index where Employee Code is listed
                        var totColumns = 0;
                        $dataAsHtml.find("tr:nth-child(2)").find('th').each(function (index, element) {
                        var colHeading = $(element).text().trim();
                            totColumns++;
                            if (colHeading == 'Employee Code')
                        {
                        colNumForEmployeeCode = index + 1;
                        }
                        });

                        if (colNumForEmployeeCode > 0) {
@* Added By: Ajith; Purpose: Dealer Questionnaire; Date: 12/07/2021 *@
                        if ('@reportType' == "Questionnaire") {

                        colNumForEmployeeCode++; // we are adding check box;
                        showSelectionCBoxes = true;
                        // now add one column in the table
                        //$dataAsHtml.find("tr:first-child").prepend("<td><input type='button' id='btnSend' value='SMS' class='form-control btn-success'/></td>");
                        $dataAsHtml.find("tr:first-child").prepend("<td>&nbsp;</td>");

                        $dataAsHtml.find("tbody").append("<tr class='smsButtonRow'></tr>");
                        //$dataAsHtml.find("tr.smsButtonRow").append("<td colspan='2'></td>");
                        totColumns++;
                        $dataAsHtml.find("tr.smsButtonRow").append("<td colspan='" + totColumns + "'><b>Message Text</b> max @MaxSMSTextSize char | Duplicate and in-active employees will be auto removed. <input style='width:50%;' type='text' id='txtSMS' class='form-control' maxlength='@MaxSMSTextSize'/><input style='width:200px;' type='button' id='btnSend' value='Send Message' class='form-control btn-success'/><input style='width:200px;' type='button' id='btnShowMarked' value='Show Selected' title='Show checked rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowUnMarked' value='Show Un-selected' title ='Show un-selected rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowAll' value='Show All' title='Show all rows' class='form-control btn-warning'/></td>");

                        }
      //Author : Swetha M Date: 30/01/2023 Purpose: Poceed to approve button for Expense Module

                        else if ('@reportType' =='Expense') {
                        colNumForEmployeeCode++; // we are adding check box;
                        showSelectionCBoxes = true;
                        // now add one column in the table
                        //$dataAsHtml.find("tr:first-child").prepend("<td><input type='button' id='btnSend' value='SMS' class='form-control btn-success'/></td>");
                        $dataAsHtml.find("tr:first-child").prepend("<td>&nbsp;</td>");
                        $dataAsHtml.find("tr:nth-child(2)").prepend("<th>All<input class='check-box allRecMark' type='checkbox'/></th>");
                        $dataAsHtml.find("tr").not(':first').not(':nth-child(2)').prepend("<td><input class='check-box oneRecMark' type='checkbox'/></td>");

                        $dataAsHtml.find("tbody").append("<tr class='smsButtonRow'></tr>");
                        //$dataAsHtml.find("tr.smsButtonRow").append("<td colspan='2'></td>");
                        totColumns++;
                        $dataAsHtml.find("tr.smsButtonRow").append("<td colspan='" + totColumns + "'><b>Message Text</b> max @MaxSMSTextSize char | Duplicate and in-active employees will be auto removed. <input style='width:50%;' type='text' id='txtSMS' class='form-control' maxlength='@MaxSMSTextSize'/><input style='width:200px;' type='button' id='btnSend' value='Send Message' class='form-control btn-success'/><input style='width:200px;' type='button' id='btnShowMarked' value='Show Selected' title='Show checked rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowUnMarked' value='Show Un-selected' title ='Show un-selected rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowAll' value='Show All' title='Show all rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnProceedApprove' value='Proceed Approve >>' title='Proceed to Approve' class='form-control btn-success'/></td>");

                        }
                        else {
                        colNumForEmployeeCode++; // we are adding check box;
                        showSelectionCBoxes = true;
                        // now add one column in the table
                        //$dataAsHtml.find("tr:first-child").prepend("<td><input type='button' id='btnSend' value='SMS' class='form-control btn-success'/></td>");
                        $dataAsHtml.find("tr:first-child").prepend("<td>&nbsp;</td>");
                        $dataAsHtml.find("tr:nth-child(2)").prepend("<th>All<input class='check-box allRecMark' type='checkbox'/></th>");
                        $dataAsHtml.find("tr").not(':first').not(':nth-child(2)').prepend("<td><input class='check-box oneRecMark' type='checkbox'/></td>");

                        $dataAsHtml.find("tbody").append("<tr class='smsButtonRow'></tr>");
                        //$dataAsHtml.find("tr.smsButtonRow").append("<td colspan='2'></td>");
                        totColumns++;
                        $dataAsHtml.find("tr.smsButtonRow").append("<td colspan='" + totColumns + "'><b>Message Text</b> max @MaxSMSTextSize char | Duplicate and in-active employees will be auto removed. <input style='width:50%;' type='text' id='txtSMS' class='form-control' maxlength='@MaxSMSTextSize'/><input style='width:200px;' type='button' id='btnSend' value='Send Message' class='form-control btn-success'/><input style='width:200px;' type='button' id='btnShowMarked' value='Show Selected' title='Show checked rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowUnMarked' value='Show Un-selected' title ='Show un-selected rows' class='form-control btn-warning'/><input style='width:200px;' type='button' id='btnShowAll' value='Show All' title='Show all rows' class='form-control btn-warning'/></td>");
                        }
                        }
                        }

                        // user does not like check box for active/inactive employee status
                        $dataAsHtml.find("td.EmployeeStatus_True").each(
                        function () {
                        $(this).html("Active");
                        });

                        $dataAsHtml.find("td.EmployeeStatus_False").each(
                        function () {
                        $(this).html("In-Active");
                        });


                        $('#dataArea').empty();
                        $('#dataArea').html($dataAsHtml);

                        if (showSelectionCBoxes) {
                        // add event handler for check / uncheck all
                        $("input.allRecMark").click(function () {
                        $("input.oneRecMark").prop('checked', $(this).prop('checked'));
                        });

                        $('input#btnSend').click(sendMessageButtonClicked);
                        $('input#btnShowMarked').click(showMarkedRowsClicked);
                        $('input#btnShowUnMarked').click(showUnMarkedRowsClicked);
                        $('input#btnShowAll').click(showAllRowsClicked);
                        $('input#btnProceedApprove').click(ApproveBulkExpensesClicked);

                        $('input#btnSend').css('display', 'inline');
                        $('input#btnShowMarked').css('display', 'inline');
                        $('input#btnShowUnMarked').css('display', 'inline');
                        $('input#btnShowAll').css('display', 'inline');
                        $('input#btnProceedApprove').css('display', 'inline');
                        }  // showSelectionCBoxes
                        }

                        // hide the area that shows order line items on this page itself;
                        $(".orderDetailRow").hide();
                        $(".detailRow").hide();
                        // reset the json object that hold flags about showing order items inline.
                        openCustomerBlocks = {};
                        openDetailBlocks = {};




                        // result Row Count > 1 - as one row is header row;
                        if (document.getElementById("downloadLinkArea") != null && resultRowCount > 1) {
                        // create link to download the data as excel
                        // do some text replacements - remove links etc.
                        var dataToSave = data.replace(/<a.*\">/g, "").replace(/<\/a>/g, "");

                        // Checked check box to be turned into 'Yes'
                        dataToSave = dataToSave.replace(/<input checked=\"checked\" class=\"check-box\" disabled=\"disabled\" type=\"checkbox\" \/>/g, "Yes");
                        // UnChecked check box to be turned into 'No'
                        dataToSave = dataToSave.replace(/<input .* type=\"checkbox\" \/>/g, "No");

                        // now create html and remove header row from downloadable data
                        var $dataAsHtml = $(dataToSave);
                        $dataAsHtml.find("#dataTableHeader").remove();
                        // remove all rows that are there to show order details inline
                        // it will be there only for orders;
                        $dataAsHtml.find(".orderDetailRow").remove();
                        $dataAsHtml.find(".removeFromDownload").remove();



                        //Author:Ajith purpose:Dealer Questionnaire exceldownload hide rows
                        $dataAsHtml.find("#DealerQuestionnaireExcelheader").remove();
                        $dataAsHtml.find("#DealerQuestionnaireExceldata").remove();


                        // replace Employee Status to Active / In-Active value
                        $dataAsHtml.find("td.EmployeeStatus_True").each(
                        function () {
                        $(this).html("Active");
                        });

                        $dataAsHtml.find("td.EmployeeStatus_False").each(
                        function () {
                        $(this).html("In-Active");
                        });

                        dataToSave = $('<div>').append($dataAsHtml).html();

                        var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                        var url = URL.createObjectURL(blob);

                        var m = document.createElement('img');
                        m.height = "25";
                        m.width = "25";
                        m.src = "/Content/img/download_3.png";

                        var a = document.createElement('a');
                        a.download = "DownloadReport.xls";
                        a.href = url;
                        //a.textContent = "Download as Excel";
                        a.title = "Download as Excel";
                        a.appendChild(m);

                        document.getElementById("downloadLinkArea").appendChild(a);
                        }
                        //$(".showInPopup").off('click').on('click', editPopupLinkClicked);

                        $(".editInPopup").off('click').on('click', editPopupLinkClicked);
                        $(".addInPopup").off('click').on('click', addPopupLinkClicked);
                        EnableSearchButton();
                        if (resultRowCount > 1)
                        {
                        HideSearch();
                        }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting data matching your search criteria.");
                        EnableSearchButton();
                        }
                        });
                        }
                        }

                        function sendMessageButtonClicked()
                        {
                        $('input#btnSend').hide();
                        var selectedStaffCode = [];
                        $("input.oneRecMark").each(function (index, element) {
                        if ($(element).is(':checked')) {
                        var v = $(element).parent().parent().find('td:nth-child(' + colNumForEmployeeCode + ')').text().trim();
                        // store in array only if it does not exist
                        if (/^[0-9a-zA-Z]{8}$/.test(v) && selectedStaffCode.indexOf(v) === -1) {
                        selectedStaffCode.push(v);
                        }
                        }
                        });

                        if (selectedStaffCode.length == 0) {
                        alert('Please mark rows and try again.');
                        $('input#btnSend').show();
                        return;
                        }

                        // pick up the text for SMS
                        var smsText = $('#txtSMS').val().trim();
                        if (/^[a-zA-Z0-9 ._,()+?><\/:;\-|\=\*\%\$\#\!]{10,@MaxSMSTextSize}$/.test(smsText) == false) {
                        alert('Invalid SMS Text - can have 10 to @MaxSMSTextSize alpha and numeric characters with embedded spaces, dash and underscore only.');
                        $('input#btnSend').show();
                        return;
                        }

                        // confirm if person wants to send message
                        var sSave = window.confirm("Do you want to send message: '" + smsText + "' to " + selectedStaffCode.length + " people?");
                        if (sSave == false) {
                        $('input#btnSend').show();
                        return;
                        }

                        var transmitData = {};
                        transmitData.staffCodes = selectedStaffCode;
                        transmitData.smsText = smsText;

                        $.ajax('/Dashboard/SendMessageOnDemand', {
                        traditional: true,
                        cache: false,
                        type: "Get",
                        contentType: "application/json",
                        dataType: "json",
                        data: transmitData,
                        success: function (data, textStatus, jqXHR) {
                        if (data.Status)
                        {
                        // clear message and uncheck all check boxes;
                        $('#txtSMS').val('');
                        $("input.allRecMark").prop('checked', false);
                        $("input.oneRecMark").prop('checked', false);
                        }
                        else
                        {
                        data.Message = "Error: " + data.Message;
                        }

                        alert(data.Message);

                        $('input#btnSend').show();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while sending messages. Please try again.")
                        $('input#btnSend').show();
                        }
                        });

                        $('input#btnSend').show();
                        }

                        function showMarkedRowsClicked()
                        {
                        $("input.oneRecMark").each(function (index, element)
                        {
                        var trow = $(element).parent().parent();
                        ($(element).is(':checked')) ? trow.show() : trow.hide();
                        if (trow.hasClass('orderDetailRow'))
                        {
                        trow.hide();
                        }
                        });
                        }

                        function showUnMarkedRowsClicked()
                        {
                        $("input.oneRecMark").each(function (index, element) {
                        var trow = $(element).parent().parent();
                        ($(element).is(':checked')) ? trow.hide() : trow.show();
                        if (trow.hasClass('orderDetailRow'))
                        {
                        trow.hide();
                        }
                        });
                        }

                        function showAllRowsClicked()
                        {
                        $("input.oneRecMark").each(function (index, element) {
                        var trow = $(element).parent().parent();
                        if (trow.hasClass('orderDetailRow'))
                        {
                        trow.hide();
                        }
                        else
                        {
                        trow.show();
                        }
                        });
                        }

                        function DisableSearchButton()
                        {
                        $("#btnSearch").hide();
                        $("#btnSearchPdf").hide();
                        }

                        function EnableSearchButton()
                        {
                        $("#btnSearch").show();
                        $("#btnSearchPdf").show();
                        }

                        function HideSearch() {
                        $("#idSearchWell").hide();
                        $("#showSearch").show();
                        }

                        function ShowSearch() {
                        $("#idSearchWell").show("slow");
                        $("#showSearch").hide();
                        }

                        function CaptureSearchCriteria() {
                        var searchCriteria = {};
                        searchCriteria.Zone = $("#selZone").val();
                        searchCriteria.Area = $("#selArea").val();
                        searchCriteria.Territory = $("#selTerritory").val();
                        searchCriteria.HQ = $("#selHQ").val();
                        //searchCriteria.ReportType = $("#selReport").val();
                        searchCriteria.ReportType = '@ViewBag.ReportType';

                        // for activity serach we don't take amounts and approved/not approved type
                        if ('@showAmountFilters' == 'True') {
                        searchCriteria.DataStatus = $("#selDataStatus").val();
                        searchCriteria.AmountFrom = $("#txtFromAmount").val();
                        searchCriteria.AmountTo = $("#txtToAmount").val();
                        }

                        if ('@showClientTypeFilter' == 'True') {
                        searchCriteria.ClientType = $("#selClientType").val();
                        }

                        if ('@showClientNameFilter' == 'True') {
                        searchCriteria.ClientName = $("#txtClientName").val();
                        }

                        if ('@showActivityTypeFilter' == 'True') {
                        searchCriteria.ActivityType = $("#selActivityType").val();
                        }

                        if ('@showEmployeeStatusFilter' == 'True') {
                        searchCriteria.EmployeeCode = $("#txtEmployeeCode").val();
                        searchCriteria.EmployeeName = $("#txtEmployeeName").val();
                        searchCriteria.EmployeeStatus = $("#selEmployeeStatus").val();
                        }
                        else {
                        searchCriteria.EmployeeStatus = 4;
                        }
                        if ('@showEmployeeFilter' == 'True') {
                        searchCriteria.EmployeeCode = $("#txtEmployeeCode").val();
                        searchCriteria.EmployeeName = $("#txtEmployeeName").val();
                        }


                        if ('@showDepartmentFilter' == 'True') {
                        searchCriteria.Department = $("#selDepartment").val();
                        }
                        if ('@showDesignationFilter' == 'True') {
                        searchCriteria.Designation = $("#selDesignation").val();
                        }
                        if ('@showOrderIdFilter' == 'True') {
                        searchCriteria.Id = $("#txtOrderId").val();
                        }
                        if ('@showEntityWorkFlowStatusFilter' == 'True')
                        {
                        searchCriteria.WorkFlowStatus = $("#selWorkFlowStatus").val();
                        }
                        if ('@showEntityWorkFLowFilter' == 'True')
                        {
                        searchCriteria.WorkFlow = $("#selWorkFlowType").val();
                        }
                        if ('@showEntityNameFilter' == 'True') {
                        searchCriteria.EntityName = $("#textEntityName").val();
                        }
                        if ('@showDateFilters' == 'True') {
                        searchCriteria.DateFrom = $("#txtFromDate").val();
                        searchCriteria.DateTo = $("#txtToDate").val();
                        }

                        if ('@showPlannedDateFilters' == 'True') {
                        searchCriteria.PlannedDateFrom = $("#txtPlannedFromDate").val();
                        searchCriteria.PlannedDateTo = $("#txtPlannedToDate").val();
                        }

                        if ('@showHarvestDateFilter' == 'True') {
                        searchCriteria.HarvestDate = $("#txtHarvestDate").val();
                        }

                        if ('@showDistanceFilters' == 'True') {
                        searchCriteria.Distance = $("#txtDistance").val();
                        }

                        if('@showAgreementNumberFilter' == 'True')
                        {
                        searchCriteria.AgreementNumber = $("#txtAgreementNumber").val();
                        }

                        if ('@showSlipNumberFilter' == 'True')
                        {
                        searchCriteria.SlipNumber = $("#txtSlipNumber").val();
                        }

                        if ('@showRowStatusFilter' == 'True')
                        {
                        searchCriteria.RowStatus = $("#selRowStatus").val();
                        }

                        if ('@showAgreementStatusFilter' == 'True')
                        {
                        searchCriteria.AgreementStatus = $("#selAgreementStatus").val();
                        }

                        if ('@showCropFilter' == 'True' || '@showAgreementReportFilter' =='True')
                        {
                        searchCriteria.Crop = $("#selCrop").val();
                        }

                        //PK
                        if ('@showTargetStatusFilter' == 'True')
                        {
                        searchCriteria.TargetStatus = $("#selTargetStatus").val();
                        }

                        //PK
                        if ('@showPlanTypeFilter' == 'True')
                        {
                        searchCriteria.DayPlanType = $("#selDayPlanType").val();
                        }

                        if ('@showQuestionnaireTypeFilter' == 'True')
                        {
                        searchCriteria.QuestionPaperId = $("#selQuestionnaireType").val();
                        }

                        //Rajesh V
                        if ('@showUniqueIdFilter' == 'True') {
                        searchCriteria.UniqueId = $("#uniqueId").val();
                        }

                        if ('@Seasons' != null) {
                        searchCriteria.SeasonName = $("#selSeasonName").val();
                        }

                        // Modified By:Venkatesh; Purpose: Added DealersNotMetReport

                        if ('@showCustomerFilter' == 'True') {

                        searchCriteria.CustomerName = $("#txtCustomerName").val()
                        searchCriteria.CustomerCode = $("#txtCustomerCode").val()
                        }


                        if ('@showGeoTagStatusFilter' == 'True') {

                            searchCriteria.GeoTagStatus = $("#selGeoTagStatus").val()
                        }

                        if ('@showBankDetailStatus' == 'True') {

                            searchCriteria.BankDetailStatus = $("#selBankStatus").val()
                        }

                        if ('@showBusinessRoleFilter' == 'True') {
                          searchCriteria.BusinessRole = $("#selBusinessRole").val()
                        }

                        if ('@showProfileStatusFilter' == 'True') {

                            searchCriteria.ProfileStatus = $("#selProfileStatus").val()
                        }
                        return searchCriteria;
                        }

                        // to show order items inline
                        var openCustomerBlocks = {};
                        function customerAnchorClicked(rowGuid, targetGuid, orderId)
                        {
                        if (openCustomerBlocks[rowGuid] == undefined || openCustomerBlocks[rowGuid] == 0) // never opened or closed
                        {
                        openCustomerBlocks[rowGuid] = 1;  // first time click
                        $('#' + rowGuid).show();
                        $('#' + targetGuid).html('<p>Please wait</p>');

                        $.ajax('/Dashboard/GetOrderItemDetails', {
                        cache: false,
                        type: "Get",
                        contentType: "application/json",
                        data: { 'Id' : orderId },
                        success: function (data, textStatus, jqXHR) {
                        $('#' + targetGuid).html(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting order line items.")
                        }
                        });
                        }
                        else if (openCustomerBlocks[rowGuid] == 1)
                        {
                        $('#' + rowGuid).hide();
                        openCustomerBlocks[rowGuid] = 0;
                        }
                        // we want to refresh the expandable view each time user opens it
                        // as user may have changed item quantities and we want to present
                        // updated item count here - and not cached one.

                        //else if (openCustomerBlocks[rowGuid] == 0)
                        //{
                        //    $('#' + rowGuid).show();
                        //    openCustomerBlocks[rowGuid] = 1;
                        //}
                        }


                        // to show order items inline
                        var openDetailBlocks = {};
                        function additionalDetailsClicked(rowGuid, targetGuid, actionUrl, recId)
                        {
                        if (openDetailBlocks[rowGuid] == undefined) // never opened
                        {
                        openDetailBlocks[rowGuid] = 1;  // first time click
                        $('#' + rowGuid).show();
                        $('#' + targetGuid).html('<p>Please wait</p>');

                        $.ajax(actionUrl, {
                        cache: false,
                        type: "Get",
                        contentType: "application/json",
                        data: { 'Id' : recId },
                        success: function (data, textStatus, jqXHR) {
                        $('#' + targetGuid).html(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting data items.")
                        }
                        });
                        }
                        else if (openDetailBlocks[rowGuid] == 1)
                        {
                        $('#' + rowGuid).hide();
                        openDetailBlocks[rowGuid] = 0;
                        }
                        else if (openDetailBlocks[rowGuid] == 0)
                        {
                        $('#' + rowGuid).show();
                        openDetailBlocks[rowGuid] = 1;
                        }
                        }

                        function detailOrderDownloadClicked()
                        {
                        //alert('Detail download clicked');
                        var searchCriteria = CaptureSearchCriteria();

                        $("#detailDownloadLinkArea").html('<p>Please wait...</p>');

                        $.ajax('/Dashboard/GetDetailedOrderResultForDownload', {
                        cache: false,
                        type: "Get",
                        contentType: "application/json",
                        data: searchCriteria,
                        success: function (data, textStatus, jqXHR) {

                        var dataToSave = data;
                        var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                        var url = URL.createObjectURL(blob);
                        window.location = url;

                        $("#detailDownloadLinkArea").html('<p>Saved order details.</p>');
                        //var a = document.createElement('a');
                        //a.download = "DownloadReport.xls";
                        //a.href = url;
                        //a.textContent = "Download as Excel";

                        //document.getElementById("downloadLinkArea").appendChild(a);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting data download data matching your search criteria.")
                        $("#detailDownloadLinkArea").html('<p>Error while saving.</p>');

                        EnableSearchButton();
                        }
                        });
                        }



                        $(document).ready(
                        function () {
                        var selectedObj = {};
                        for (i = 0; i < OfficeHierarchy.length; i++) {
                        var o = OfficeHierarchy[i];
                        selectedObj[o.ZoneName] = o.ZoneCode;
                        }
                        Object.keys(selectedObj).sort().forEach(function (element) {
                        var opt = new Option(element, selectedObj[element]);
                        $('#selZone').append(opt);
                        });
                        });

                        function ZoneSelectionChanged()
                        {
                        $('#selArea option:not(:first-child)').remove();
                        $('#selTerritory option:not(:first-child)').remove();
                        $('#selHQ option:not(:first-child)').remove();

                        // get current value of Zone
                        var selectedZone = $("#selZone").val();
                        FillAreasForZone(selectedZone);
                        }

                        function FillAreasForZone(z)
                        {
                        var selectedObj = {};
                        for(i= 0; i < OfficeHierarchy.length; i++)
                        {
                        var o = OfficeHierarchy[i];
                        if (o.ZoneCode == z) {
                        // use Area Name as key so we can sort by name
                        selectedObj[o.AreaName] = o.AreaCode;
                        }
                        }
                        Object.keys(selectedObj).sort().forEach(function (element) {
                        var opt = new Option(element, selectedObj[element]);
                        $('#selArea').append(opt);
                        });
                        }

                        function AreaSelectionChanged()
                        {
                        $('#selTerritory option:not(:first-child)').remove();
                        $('#selHQ option:not(:first-child)').remove();
                        var selectedZone = $("#selZone").val();
                        var selectedArea = $("#selArea").val();
                        FillTerritories(selectedZone, selectedArea);
                        }


                        // zone and area
                        function FillTerritories(zo, ar) {
                        var selectedObj = {};
                        for (i = 0; i < OfficeHierarchy.length; i++) {
                        var o = OfficeHierarchy[i];
                        if (o.ZoneCode == zo && o.AreaCode == ar) {
                        selectedObj[o.TerritoryName] = o.TerritoryCode;
                        }
                        }
                        Object.keys(selectedObj).sort().forEach(function (element) {
                        var opt = new Option(element, selectedObj[element]);
                        $('#selTerritory').append(opt);
                        });
                        }

                        function TerritorySelectionChanged()
                        {
                        $('#selHQ option:not(:first-child)').remove();
                        var selectedZone = $("#selZone").val();
                        var selectedArea = $("#selArea").val();
                        var selectedTerritory = $("#selTerritory").val();
                        FillHQ(selectedZone, selectedArea, selectedTerritory);
                        }

                        // zone, area, tr
                        function FillHQ(zo, ar, tr) {
                        var selectedObj = {};
                        for (i = 0; i < OfficeHierarchy.length; i++) {
                        var o = OfficeHierarchy[i];
                        if (o.ZoneCode == zo && o.AreaCode == ar && o.TerritoryCode == tr ) {
                        selectedObj[o.HQName] = o.HQCode;
                        }
                        }
                        Object.keys(selectedObj).sort().forEach(function (element) {
                        var opt = new Option(element, selectedObj[element]);
                        $('#selHQ').append(opt);
                        });
                        }
        //Author : Swetha M Date: 30/01/2023 Purpose: Bulk approval of expense
        function ApproveBulkExpensesClicked() {
            $('input#btnProceedApprove').hide();
            var selectedEmployeeCode = [];
            $("input.oneRecMark").each(function (index, element) {
                if ($(element).is(':checked')) {
                    var v = $(element).parent().parent().find('td:eq(1)').text();
                    // store in array only if it does not exist
                    selectedEmployeeCode.push(v);
                }
            });
            if (selectedEmployeeCode.length ==0) {
                alert('Please select one Expense for Approve and try again.');
                $('input#btnProceedApprove').show();
                return;
            }

            showGlass();
            showWaitMessage();

            $.ajax('/DashBoard/BulkApproveExpenses', {
                traditional: true,
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: {
                    expenseId: selectedEmployeeCode
                },
                success: function (data, textStatus, jqXHR) {
                    // clear message and uncheck all check boxes;
                    $("input.allRecMark").prop('checked', false);
                    $("input.oneRecMark").prop('checked', false);

                    SetCallbackFunction(btnSearchClicked);
                    ShowFormOnGlass(data);

                    $('input#btnProceedApprove').show();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("An error occured. Please refresh the page and try again.")
                    hideGlass();
                    $('input#btnProceedApprove').show();
                }
            });
        }

    </script>
}
