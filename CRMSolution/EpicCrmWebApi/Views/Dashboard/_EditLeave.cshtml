@model DashboardLeaveModel
@{
    IEnumerable<DomainEntities.CodeTableEx> leaveStatus = ViewBag.BankDetailStatus;
}

@using (Html.BeginForm("EditLeave", "Dashboard", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <span style="font-size:large;">Approve/Reject Leaves</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.EmployeeCode)
        @Html.HiddenFor(model => model.EmployeeName)
        @Html.HiddenFor(model => model.LeaveType)
        @Html.HiddenFor(model => model.LeaveDuration)
        @Html.HiddenFor(model => model.StartDate)
        @Html.HiddenFor(model => model.EndDate)
        @Html.HiddenFor(model => model.LeaveReason)
        @Html.HiddenFor(model => model.Comment)

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.EmployeeCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })

                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.EmployeeName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })

                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.LeaveType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.LeaveType, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })

                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.LeaveDuration, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.DaysCountExcludingHolidays, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })

                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })

                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })

                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.LeaveReason, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.LeaveReason, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })

                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control", @readOnly = "true" } })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.LeaveStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <select class="form-control" id="selStatus" name="LeaveStatus">
                        @foreach (var o in leaveStatus.OrderBy(x => x.DisplaySequence))
                        {
                            if (o.Code.Equals(Model.LeaveStatus, StringComparison.OrdinalIgnoreCase))
                            {
                                <option value="@o.Code" selected>@o.CodeName @o.Code</option>
                            }
                            else
                            {
                                <option value="@o.Code">@o.CodeName @o.Code</option>
                            }
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.LeaveStatus, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    <textarea id="txtaComment" name="ApproveNotes" maxlength="500" rows="3" cols="40" class="form-control">@Model.ApproveNotes</textarea>
                    @Html.ValidationMessageFor(model => model.ApproveNotes, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-5 col-md-4">
                <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
            </div>

        </div>
    </div>

}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");

}

