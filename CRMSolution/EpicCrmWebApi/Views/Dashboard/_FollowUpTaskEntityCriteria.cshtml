@model FollowUpTaskEntityTypeHQ
@{
    IEnumerable<DomainEntities.CodeTableEx> clientType = (List<DomainEntities.CodeTableEx>)ViewBag.ClientType;
    IEnumerable<DomainEntities.CodeTableEx> headQuarters = ViewBag.HeadQuarters;

    string title = "Client Search Criteria";
}


@using (Html.BeginForm("EditFollowUpTaskEntity", "Dashboard", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <span style="font-size:large;">@title</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.ClientType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <select class="form-control" id="selClientType" name="ClientType">
                        <option value="" selected>Select Client Type</option>
                        @foreach (var o in clientType)
                        {
                            if (Model.ClientType == o.Code)
                            {
                                <option selected value="@o.Code">@o.Code</option>
                            }
                            else
                            {
                                <option value="@o.Code">@o.Code</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.HQCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <select class="form-control" id="selHqCode" name="HqCode">
                        @foreach (var o in headQuarters.OrderBy(x => x.CodeName))
                        {
                            if (o.Code.Equals(Model.HQCode, StringComparison.OrdinalIgnoreCase))
                            {
                                <option value="@o.Code" selected>@o.CodeName (@o.Code)</option>
                            }
                            else
                            {
                                <option value="@o.Code">@o.CodeName (@o.Code)</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        @*<div class="form-group">
            <div class="col-md-offset-5 col-md-4">
                <input type="button" value="Fetch Entity List" class="btn btn-success" id="idsFetchEntity" />
            </div>
        </div>*@

        @*<div class="form-group">
            <div>
                @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.ClientCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.ClientCode, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "idClientCode" } })
                </div>
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-5 col-md-4">
                <input type="submit" value="Fetch Client List" class="btn btn-info" id="popupSaveButton" />
            </div>
        </div>
    </div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}
