@model StockRequestFullModel
@{
    string title = $"Fulfill / Issue Stock (Req #: {Model.RequestNumber} | {Html.DisplayFor(model => Model.RequestDate, "DatetimeShort")})";
    IEnumerable<DomainEntities.OfficeHierarchy> officeHierarchy = (IEnumerable<DomainEntities.OfficeHierarchy>)ViewBag.OfficeHierarchy;
    string ZoneName = officeHierarchy.Where(x => x.ZoneCode.Equals(Model.ZoneCode, StringComparison.OrdinalIgnoreCase))
                            .FirstOrDefault()?.ZoneName ?? Model.ZoneCode;

    string AreaName = officeHierarchy.Where(x => x.AreaCode.Equals(Model.AreaCode, StringComparison.OrdinalIgnoreCase))
                            .FirstOrDefault()?.AreaName ?? Model.AreaCode;

    string TerritoryName = officeHierarchy.Where(x => x.TerritoryCode.Equals(Model.TerritoryCode, StringComparison.OrdinalIgnoreCase))
                            .FirstOrDefault()?.TerritoryName ?? Model.TerritoryCode;

    string HQName = officeHierarchy.Where(x => x.HQCode.Equals(Model.HQCode, StringComparison.OrdinalIgnoreCase))
                            .FirstOrDefault()?.HQName ?? Model.HQCode;

    IEnumerable<StockBalanceModel> balances = (IEnumerable<StockBalanceModel>)ViewBag.Balances;

    long stockQtyAvailableAtRequesterEnd = ViewBag.QuantityInHand;
}

@using (Html.BeginForm("FulfillStockRequestItem", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <span style="font-size:large;">@title</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CyclicCount)

        <h5 style="color:darkblue;">Item Details</h5>
        <table class="table table-bordered table-striped table-condensed">
            <thead>
                <tr>
                    <th>@Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label" })</th>
                    <th>@Html.LabelFor(model => model.ItemDesc, htmlAttributes: new { @class = "control-label" })</th>
                    <th>@Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label" })</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Html.DisplayFor(model => model.Category)</td>
                    <td>@Html.DisplayFor(model => model.ItemDesc)</td>
                    <td>@Html.DisplayFor(model => model.Unit)</td>
                </tr>
            </tbody>
        </table>

        @{ 
            string caption = $"Requested By ( Request Qty. {Model.Quantity} | Qty. in Hand: {stockQtyAvailableAtRequesterEnd} )";
        }
        <h5 style="color:darkblue;">@caption</h5>
        <table class="table table-bordered table-striped table-condensed">
            <thead>
                <tr>
                    <th>@Html.LabelFor(model => model.ZoneCode, htmlAttributes: new { @class = "control-label" })</th>
                    <th>@Html.LabelFor(model => model.AreaCode, htmlAttributes: new { @class = "control-label" })</th>
                    <th>@Html.LabelFor(model => model.TerritoryCode, htmlAttributes: new { @class = "control-label" })</th>
                    <th>@Html.LabelFor(model => model.HQCode, htmlAttributes: new { @class = "control-label" })</th>
                    <th>@Html.LabelFor(model => model.EmployeeName, htmlAttributes: new { @class = "control-label" })</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Html.DisplayFor(model => ZoneName)</td>
                    <td>@Html.DisplayFor(model => AreaName)</td>
                    <td>@Html.DisplayFor(model => TerritoryName)</td>
                    <td>@Html.DisplayFor(model => HQName)</td>
                    <td>
                        @Html.DisplayFor(model => Model.StaffCode) &nbsp;
                        @Html.DisplayFor(model => Model.EmployeeName)
                    </td>
                </tr>
            </tbody>
        </table>


        <h5 style="color:darkblue;">Available Stock Position</h5>
        <table class="table table-bordered table-striped table-condensed">
            <thead>
                <tr>
                    <th>@Html.LabelFor(model => balances.First().StockQuantity, htmlAttributes: new { @class = "control-label" })</th>
                    <th>Issue Qty.</th>
                    <th>@Html.LabelFor(model => balances.First().ZoneCode, htmlAttributes: new { @class = "control-label col-md-2" })</th>
                    <th>@Html.LabelFor(model => balances.First().AreaCode, htmlAttributes: new { @class = "control-label col-md-2" })</th>
                    <th>@Html.LabelFor(model => balances.First().TerritoryCode, htmlAttributes: new { @class = "control-label col-md-2" })</th>
                    <th>@Html.LabelFor(model => balances.First().HQCode, htmlAttributes: new { @class = "control-label col-md-2" })</th>
                    <th>@Html.LabelFor(model => balances.First().EmployeeName, htmlAttributes: new { @class = "control-label" })</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in balances)
                {
                    string ZName = officeHierarchy.Where(x => x.ZoneCode.Equals(item.ZoneCode, StringComparison.OrdinalIgnoreCase))
                                            .FirstOrDefault()?.ZoneName ?? item.ZoneCode;

                    string AName = officeHierarchy.Where(x => x.AreaCode.Equals(item.AreaCode, StringComparison.OrdinalIgnoreCase))
                                            .FirstOrDefault()?.AreaName ?? item.AreaCode;

                    string TName = officeHierarchy.Where(x => x.TerritoryCode.Equals(item.TerritoryCode, StringComparison.OrdinalIgnoreCase))
                                            .FirstOrDefault()?.TerritoryName ?? item.TerritoryCode;

                    string HName = officeHierarchy.Where(x => x.HQCode.Equals(item.HQCode, StringComparison.OrdinalIgnoreCase))
                                            .FirstOrDefault()?.HQName ?? item.HQCode;

                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.StockQuantity)</td>
                        <td>
                            <input class="form-control issueQty" style="width:80px;text-decoration:none;"
                                    data-stockBalanceId="@item.Id"
                                    data-itemMasterid="@item.ItemMasterId"
                                   data-availableQty="@item.StockQuantity"
                                    data-cyclicCount="@item.CyclicCount"
                                    maxlength="7" />
                        </td>
                        <td>@Html.DisplayFor(modelItem => ZName)</td>
                        <td>@Html.DisplayFor(modelItem => AName)</td>
                        <td>@Html.DisplayFor(modelItem => TName)</td>
                        <td>@Html.DisplayFor(modelItem => HName)</td>
                        <td>
                            @Html.DisplayFor(model => item.StaffCode) &nbsp;
                            @Html.DisplayFor(model => item.EmployeeName)
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="form-group">
            <div>
                <label class="control-label col-md-2">Notes</label>
                <div class="col-md-6">
                    <textarea name="ReviewNotes" id="idReviewNotes" rows="2" cols="60" maxlength="100" class="form-control" />
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-4 col-md-4">
                <input type="submit" value="Confirm & Save" class="btn btn-success actionButton" onclick="submitButtonClicked(); return false;"  title="Approve this request."/>
                <input type="submit" value="Deny" class="btn btn-danger actionButton" onclick="denyButtonClicked(); return false;"  title="Deny this request."/>
            </div>
        </div>
    </div>
}
<div id="resultArea">
    <img id="idWait" src="/Content/img/pleasewait.gif" />
</div>


@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
    Html.RenderPartial("_CodeSnippetConfirmBox");
}

<script>
    $("#idWait").hide();
    @Html.Raw("var RequestQty = " + Model.Quantity.ToString() + ";");
    @Html.Raw("var ItemMasterId = " + Model.ItemMasterId.ToString() + ";");
    @Html.Raw("var CyclicCount = " + Model.CyclicCount.ToString() + ";");

    function submitButtonClicked(buttonType) {
        hideActionButtons();

        var selectedIssues = [];
        var totalIssueQty = 0;
        var status = true;

        $("input.issueQty").each(function (index, element) {
            var v = $(element).val().trim();
            var issueQty = Number(v);
            if (Number.isNaN(issueQty) || (v != '' && /^[0-9]+$/.test(v) == false))
            {
                var msg = "Invalid value " + v;
                ShowAlertArea("Error!", msg, true);
                status = false;
                return false;
            }

            if (issueQty == 0)
            {
                return true;  // equals to continue;
            }

            var stockBalanceId = $(element).attr('data-stockBalanceId');
            var itemMasterId = $(element).attr('data-itemMasterid');
            var availableQty = $(element).attr('data-availableQty');
            var cyclicCount = $(element).attr('data-cyclicCount');

            if (issueQty > availableQty)
            {
                var msg = "Issue Qty. " + issueQty + " can't be greater than available qty. " + availableQty;
                ShowAlertArea("Error!", msg, true);
                status = false;
                return false;
            }

            totalIssueQty += issueQty;

            var dobj = { };
            dobj.StockBalanceId = stockBalanceId;
            dobj.CyclicCount = cyclicCount;
            dobj.IssueQty = issueQty;
            selectedIssues.push(dobj);
        });

        if (status == false)
        {
            showActionButtons();
            return false;
        }

        if (totalIssueQty == 0) {
            var msg = "Please specify issue quantity.";
            ShowAlertArea("Error!", msg, true);

            showActionButtons();
            return false;
        }

        if (totalIssueQty > RequestQty)
        {
            var msg = "Issue Qty. can't be more than requested Qty.";
            ShowAlertArea("Error!", msg, true);
            showActionButtons();
            return false;
        }

        var reviewNotes = $("#idReviewNotes").val().trim();
        var transmitData = {
            StockRequestId: "@Model.Id",
            ItemMasterId: ItemMasterId,
            CyclicCount: CyclicCount,
            FulfillItems: selectedIssues,
            Notes: reviewNotes
        };

        //showGlass();
        //showWaitMessage();

        $("#popupForm").hide();
        $("#idWait").show();
        // remove cancel link container from success message box.

        //alert(JSON.stringify(transmitData));

        $.ajax('/Admin/FulfillStockRequestItem', {
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(transmitData),
            success: function (data, textStatus, jqXHR) {

                $('#idCancelLinkContainer').remove();
                $formHtml = $(data); // make it Jquery object
                $("#resultArea").html($formHtml);

                $formContainer = $("div#divOverGlass");

                // attach event on cancel
                $formHtml.find("#popupCancelLink").click(
                    {
                        formContainer: $formContainer,
                        form: $formHtml
                    }, cancelLinkClickOnGlassForm);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert("An error occured. Please refresh the page and try again.")
                $formContainer = $("div#divOverGlass");
                HideGlassForm({
                    formContainer: $formContainer
                })
            }
        });
    }

    function showActionButtons()
    {
        $('input.actionButton').show();
    }

    function hideActionButtons()
    {
        $('input.actionButton').hide();
    }

    function denyButtonClicked() {
        hideActionButtons();

        var reviewNotes = $("#idReviewNotes").val().trim();
        var transmitData = {
            StockRequestId: "@Model.Id",
            ItemMasterId: ItemMasterId,
            CyclicCount: CyclicCount,
            Notes: reviewNotes
        };

        $("#popupForm").hide();
        $("#idWait").show();
        // remove cancel link container from success message box.

        //alert(JSON.stringify(transmitData));

        $.ajax('/Admin/DenyFulfillStockRequestItem', {
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(transmitData),
            success: function (data, textStatus, jqXHR) {

                $('#idCancelLinkContainer').remove();
                $formHtml = $(data); // make it Jquery object
                $("#resultArea").html($formHtml);

                $formContainer = $("div#divOverGlass");

                // attach event on cancel
                $formHtml.find("#popupCancelLink").click(
                    {
                        formContainer: $formContainer,
                        form: $formHtml
                    }, cancelLinkClickOnGlassForm);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert("An error occured. Please refresh the page and try again.")
                $formContainer = $("div#divOverGlass");
                HideGlassForm({
                    formContainer: $formContainer
                })
            }
        });
    }

</script>

<script src="~/Scripts/CustomScripts/EpicCrmCustomPopup.js"></script>