@model DWSModel
@{
    string caption = $"Approve Wt. for DWS # {Model.DWSNumber}";
    int maxCommentsLength = ViewBag.MaxDWSNotesLength;

    string siloNotes = ViewBag.SiloNotes;
    bool hasSiloNotes = !String.IsNullOrWhiteSpace(siloNotes);
}

@using (Html.BeginForm("ApproveDWSWeight", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    <div class="form-horizontal">
        <span style="font-size:large;margin-bottom:5px;">@caption</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.STRTagId)
        @Html.HiddenFor(model => model.CyclicCount)
        @Html.HiddenFor(model => model.StrTagCyclicCount)

        <div class="container">
            <ul class="nav nav-tabs">
                <li><a data-toggle="tab" href="#basicData">Basic</a></li>
                <li><a data-toggle="tab" href="#fieldData">Weights</a></li>
                <li class="active"><a data-toggle="tab" href="#approvalData">Approval</a></li>
            </ul>

            <div class="tab-content">
                <div id="basicData" class="tab-pane fade in">
                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.DWSNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.DWSNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                        <div>
                            @Html.LabelFor(model => model.DWSDateAsText, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.DWSDateAsText, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.EntityName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.EntityName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                        <div>
                            @Html.LabelFor(model => model.TypeName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.TypeName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.STRNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.STRNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Agreement, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.Agreement, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.HQCode, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.HQCode, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                        <div>
                        </div>
                    </div>
                </div>

                <div id="fieldData" class="tab-pane fade in">
                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.BagCount, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.BagCount, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>

                        <div>
                            @Html.LabelFor(model => model.EmptyBagsWeightKg, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.EmptyBagsWeightKg, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.FilledBagsWeightKg, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.FilledBagsWeightKg, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>

                        <div>
                            @Html.LabelFor(model => model.GoodsWeight, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.GoodsWeight, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            </div>
                        </div>
                    </div>
                </div>

                <div id="approvalData" class="tab-pane fade in active">
                    <div>&nbsp;</div>
                    <table class="table table-bordered table-striped table-condensed" id="idMakePaymentTable" style="margin-bottom:2px;">
                        <tr>
                            <th>
                                @Html.LabelFor(model => model.GoodsWeight)
                            </th>
                            <th>
                                @Html.LabelFor(model => model.SiloDeductPercent)
                            </th>
                            <th>@Html.DisplayNameFor(model => model.SiloDeductWt)</th>
                            <th>@Html.DisplayNameFor(model => model.NetPayableWt)</th>
                        </tr>

                        <tr>
                            <th>@Html.DisplayFor(modelItem => Model.GoodsWeight)</th>
                            <td>@Html.DisplayFor(modelItem => Model.SiloDeductPercent)</td>

                            <td>@Html.DisplayFor(modelItem => Model.SiloDeductWt)</td>
                            <td>@Html.DisplayFor(modelItem => Model.NetPayableWt)</td>
                        </tr>
                    </table>

                    @if (hasSiloNotes)
                    {
                    <div>
                        <label class="control-label" style="margin-top:0px;font-weight:normal;color:blue;font-size:small;"
                               >Silo Notes: @siloNotes</label>
                    </div>
                    }

                    <div>
                        <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:small;"
                                >* Max override allowed (Kg): @Model.GoodsWeight.ToString()</label>
                    </div>

                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.SiloDeductWtOverride, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.SiloDeductWtOverride, new { htmlAttributes = new { @class = "form-control", @id = "overrideWt" } })
                            </div>
                        </div>
                        <div>
                            @Html.LabelFor(model => model.NetPayableWt, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.EditorFor(model => model.NetPayableWt, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "netWt" } })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-6">
                                <textarea name="Comments" rows="4" cols="40" maxlength="@maxCommentsLength" class="form-control" id="idComments">@Model.Comments</textarea>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="hidden" value="Submit" class="btn btn-default" id="popupSaveButton" />
                            <input type="button" value="Approve" class="btn btn-success" id="approveButton" onclick="validateForm()" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@{ 
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
    Html.RenderPartial("_CodeSnippetConfirmBox");
}

<script type="text/javascript">
    @Html.Raw("var GoodsWt = " + Model.GoodsWeight.ToString() + ";");
    @Html.Raw("var MaxCommentsLength = " + maxCommentsLength.ToString() + ";");

    function Save()
    {
        $("input#popupSaveButton").click();
    }

    function recalculateNumbers() {
        var overrideWt = $("#overrideWt").val();

        if (isNaN(overrideWt)) {
            ShowAlertArea("Error!", "Please enter a valid Wt.", true);
            return false;
        }

        var netWt = GoodsWt - overrideWt;
        $('#netWt').val(netWt);

        // set text on approve button also
        $("#approveButton").val("Click to Approve " + netWt + " Kg. Net Payable Wt.");
    }

    $('#overrideWt').on('input', function (e) {
        recalculateNumbers();
    });

    function validateForm() {
        var overrideWt = $("#overrideWt").val();

        if (isNaN(overrideWt)) {
            ShowAlertArea("Error!", "Please enter a valid Wt.", true);
            return false;
        }

        if (overrideWt < 0 || overrideWt > GoodsWt) {
            var msg = "Override Wt. can be between 0 and " + GoodsWt;
            ShowAlertArea("Error!", msg, true);
            return false;
        }

        // get the number of characters in comments
        var commentsText = $("#idComments").val();
        if (commentsText != undefined && commentsText.length > MaxCommentsLength) {
            ShowAlertArea("Error!", "Notes can be maximum @maxCommentsLength characters. Currently Notes has " + commentsText.length + " characters.", true);
            return false;
        }

        // confirm
        ShowAlertArea("Confirm!", "Once Weight is approved, it can't be changed. Please click Yes to 'Approve' or No to go back.", false);
    }

    recalculateNumbers();
</script>

<script src="~/Scripts/CustomScripts/EpicCrmCustomPopup.js"></script>