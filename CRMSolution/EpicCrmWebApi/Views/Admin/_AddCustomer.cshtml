﻿@model EpicCrmWebApi.CustomerModel

@{
    IEnumerable<DomainEntities.CodeTableEx> headQuarters = ViewBag.HQCode;
    IEnumerable<DomainEntities.CodeTableEx> dealerTypes = ViewBag.DealerType;
}


@using (Html.BeginForm("AddCustomer", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <span style="font-size:large;">New Customer</span>

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div>
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.HQCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        <select class="form-control" id="selHq" name="HqCode">
                            @foreach(var o in headQuarters.OrderBy(x => x.CodeName))
                            {
                                if (o.Code.Equals(Model.HQCode, StringComparison.OrdinalIgnoreCase))
                                {
                                    <option value = "@o.Code" selected>@o.CodeName (@o.Code)</option>
                                }
                                else
                                {
                                    <option value = "@o.Code">@o.CodeName (@o.Code) </option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        <select class="form-control" id="selDealerType" name="Type">
                            @foreach(var o in dealerTypes.OrderBy(x => x.CodeName))
                            {
                                if (o.Code.Equals(Model.Type, StringComparison.OrdinalIgnoreCase))
                                {
                                    <option value = "@o.Code" selected>@o.CodeName</option>
                                }
                                else
                                {
                                    <option value = "@o.Code" > @o.CodeName </option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.CreditLimit, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CreditLimit, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreditLimit, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Outstanding, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Outstanding, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Outstanding, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.LongOutstanding, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.LongOutstanding, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LongOutstanding, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Target, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Target, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Target, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.Sales, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Sales, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Sales, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div>
                    @Html.LabelFor(model => model.Payment, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Payment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Payment, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div>
                    @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Active)
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type = "submit" value="Save" class="btn btn-success" id="popupSaveButton" />
                </div>
            </div>
    </div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}
