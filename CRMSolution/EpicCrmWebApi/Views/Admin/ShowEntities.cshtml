@model EpicCrmWebApi.ModelFilter
@{
    IEnumerable<DomainEntities.CodeTableEx> statusValues = ViewBag.AgreementStatus;

    bool uniqueIdEnabled = CRMUtilities.Utils.SiteConfigData.EntityModuleUniqueIdVisible;
    bool agreementsEnabled = CRMUtilities.Utils.SiteConfigData.IsEntityAgreementEnabled;

    IEnumerable<DomainEntities.OfficeHierarchy> officeHierarchy = (IEnumerable<DomainEntities.OfficeHierarchy>)ViewBag.OfficeHierarchy;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();
}

@{
    Html.RenderPartial("_CodeSnippetPageHeader", "Profile");
}

<div class="well" id="idSearchWell">
    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Zone</label>
                <select class="form-control" id="selZone">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Area</label>
                <select class="form-control" id="selArea">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Territory</label>
                <select class="form-control" id="selTerritory">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>HQ</label>
                <select class="form-control" id="selHQ">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Client Name</label>
                <input type="text" class="form-control" id="clientName" />
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Client Type</label>
                <select class="form-control" id="selClientType">
                    <option value="All">All</option>
                    @foreach (var o in Model.ClientType.OrderBy(x => x.DisplaySequence))
                    {
                        <option value="@o.Code">@o.Code</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Employee Code</label>
                <input type="text" class="form-control" id="employeeCode" />
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Employee Name</label>
                <input type="text" class="form-control" id="employeeName" />
            </div>
        </div>
      
    </div>
    <div class="row">
        @if (uniqueIdEnabled)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>UniqueId</label>
                    <input type="text" class="form-control" id="uniqueId" />
                </div>
            </div>
        }

        @if (agreementsEnabled)
        {
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Agreement Number</label>
                    <input type="text" class="form-control" id="agreementNumber" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Agreement Status</label>
                    <select class="form-control" id="selStatus" name="Status">
                        <option value="All">All</option>
                        @foreach (var o in statusValues.OrderBy(x => x.DisplaySequence))
                        {
                            <option value="@o.Code">@o.Code</option>
                        }
                    </select>
                </div>
            </div>
        }

        @*<div class="col-sm-2">
            <div class="form-group">
                <label>Profile Status</label>
                <select class="form-control" id="selProfileStatus">
                    <option value="9">All</option>
                    <option value="1">Active</option>
                    <option value="2">Inactive</option>
                </select>
            </div>
        </div>*@


        <div class="col-sm-2">
            <div class="form-group">
                <label>&nbsp;</label>
                <input type="button" id="btnSearch" value="Search" class="form-control btn-success" />
            </div>
        </div>
    </div>
</div>
<div id="dataArea">
</div>


<script type="text/javascript">
    // Office Hierarchy object
        @Html.Raw("var OfficeHierarchy =[];")

        @foreach(var oh in officeHierarchy)
        {
            sb.AppendLine("var joh = { };");

            sb.AppendLine($"joh.ZoneCode = '{oh.ZoneCode}';");
            sb.AppendLine($"joh.ZoneName = '{oh.ZoneName}';");
            sb.AppendLine($"joh.AreaCode = '{oh.AreaCode}'; ");
            sb.AppendLine($"joh.AreaName = '{oh.AreaName}';");
            sb.AppendLine($"joh.TerritoryCode = '{oh.TerritoryCode}'; ");
            sb.AppendLine($"joh.TerritoryName = '{oh.TerritoryName}'; ");
            sb.AppendLine($"joh.HQCode = '{oh.HQCode}'; ");
            sb.AppendLine($"joh.HQName = '{oh.HQName}';");
            sb.AppendLine("OfficeHierarchy.push(joh);");
        }
    @Html.Raw(sb.ToString());

</script>


@section scripts{
<script src="/Scripts/jquery.datetimepicker.js"></script>
    <script>
        //var waitImage = '<img id="idWait" src="/Content/img/pleasewait.gif"/>';
        @Html.Raw("var agreementsEnabled = '" + @agreementsEnabled + "';");
        $(document).ready(
            function () {
                ShowSearch();
                $("#btnSearch").off('click').on('click', btnSearchClicked);
                $("#showSearch").off('click').on('click', ShowSearch);

                // once user changes selection boxes, clear results area;
                $('Select').change(function () { ClearResults(); });
                $('input').change(function () { ClearResults(); });

                $('.justDate').datetimepicker({ inline: false, format: 'd-m-Y', timepicker: false, yearStart: 2017, yearEnd: 2099 });

                $('.justDate').attr({ 'placeholder': 'dd-mm-yyyy' });

                // zone/Area/Territory/HQ changed
                $('#selZone').change(function () { ZonesSelectionChanged(); })
                $('#selArea').change(function () { AreasSelectionChanged(); })
                $('#selTerritory').change(function () { TerritoriesSelectionChanged(); })

                var selectedObj = {};
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    selectedObj[o.ZoneName] = o.ZoneCode;
                }
                Object.keys(selectedObj).sort().forEach(function (element) {
                    var opt = new Option(element, selectedObj[element]);
                    $('#selZone').append(opt);
                });
            });


        // Search button
        var btnSearchClicked = function (event) {
            DisableSearchButton();

            var searchCriteria = CaptureSearchCriteria();

            //alert(JSON.stringify(searchCriteria));

            var agNum = $("#agreementNumber").val();
            var uniqueId = $("#uniqueId").val();
            var selStatus = $("#selStatus").val();


            if ($("#clientName").val() == '' && $("#selClientType").val() == 'All'
                && $("#employeeCode").val() == '' && $("#employeeName").val() == '' &&
                (agNum == '' || agNum == undefined) &&
                (uniqueId == '' || uniqueId == undefined) &&
                (selStatus == undefined || selStatus == 'All') &&
                $("#selZone").val() == 'All' &&
                $("#selArea").val() == 'All' &&
                $("#selTerritory").val() == 'All' &&
                $("#selHQ").val() == 'All'
                )
            {
                $('#dataArea').html('<p>Please Enter Your Search Criteria...</p>');
                EnableSearchButton();
            }
            else
            {
                $('#dataArea').html(waitImage);
                $.ajax('GetSearchEntities', {
                    cache: false,
                    type: "Get",
                    contentType: "application/json",
                    data: searchCriteria,
                    success: function (data, textStatus, jqXHR) {

                        $('#dataArea').html(data);

                        if (document.getElementById("downloadLinkArea") != null) {
                            // create link to download the data as excel
                            // do some text replacements - remove links etc.
                            var dataToSave = data.replace(/<a.*\">/g, "").replace(/<\/a>/g, "");
                            // Checked check box to be turned into 'Yes'
                            dataToSave = dataToSave.replace(/<input checked=\"checked\" class=\"check-box\" disabled=\"disabled\" type=\"checkbox\" \/>/g, "Yes");

                            // replace image tag
                            dataToSave = dataToSave.replace(/<img .*png\" \/>/g, "");

                            // now create html and remove header row from downloadable data
                            var $dataAsHtml = $(dataToSave);
                            $dataAsHtml.find("#dataTableHeader").remove();
                            $dataAsHtml.find("h3").remove();
                            $dataAsHtml.find("img").remove();
                            $dataAsHtml.find("#imageDisplayWaitArea").remove();
                            $dataAsHtml.find(".removeFromDownload").remove();

                            // remove all rows that are there to show order details inline
                            // it will be there only for orders;
                            //$dataAsHtml.find(".orderDetailRow").remove();
                            dataToSave = $('<div>').append($dataAsHtml).html();

                            var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                            var url = URL.createObjectURL(blob);

                            var m = document.createElement('img');
                            m.height = "25";
                            m.width = "25";
                            m.src = "/Content/img/download_3.png";

                            var a = document.createElement('a');
                            a.download = "DownloadReport.xls";
                            a.href = url;
                            a.title = "Download as Excel";
                            a.appendChild(m);

                            document.getElementById("downloadLinkArea").appendChild(a);
                        }

                        $(".editInPopup").off('click').on('click', editPopupLinkClicked);
                        $(".addInPopup").off('click').on('click', addPopupLinkClicked);
                        EnableSearchButton();
                        if ($("#dataTable").length) {
                            HideSearch();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting data matching your search criteria.")
                        EnableSearchButton();
                    }
                });
            }
        }

        function CaptureSearchCriteria() {
            var searchCriteria = {};
            searchCriteria.ClientName = $("#clientName").val();
            searchCriteria.ClientType = $("#selClientType").val();
            searchCriteria.EmployeeCode = $("#employeeCode").val();
            searchCriteria.EmployeeName = $("#employeeName").val();
            searchCriteria.AgreementNumber = $("#agreementNumber").val();
            searchCriteria.UniqueId = $("#uniqueId").val();
            searchCriteria.AgreementStatus = $("#selStatus").val();
            searchCriteria.Zone = $("#selZone").val();
            searchCriteria.Area = $("#selArea").val();
            searchCriteria.Territory = $("#selTerritory").val();
            searchCriteria.HQ = $("#selHQ").val();
            searchCriteria.ProfileStatus = $("#selProfileStatus").val();

            return searchCriteria;
        }

        function DisableSearchButton() {
            $("#btnSearch").hide();
        }

        function EnableSearchButton() {
            $("#btnSearch").show();
        }

        function HideSearch() {
            $("#idSearchWell").hide();
            $("#showSearch").show();
        }

        function ShowSearch() {
            $("#idSearchWell").show("slow");
            $("#showSearch").hide();
        }

        function ClearResults() {
            $('#dataArea').html('');
        }

        var openAssociationBlocks = {};
        function CloseAllRowsExceptCurrent(currentRowGuid) {
            $('#' + currentRowGuid).parent().find('tr').each(function (i, e) {
                if ($(e).prop('id') == undefined || $(e).prop('id') != currentRowGuid) {
                    {
                        $(e).hide();
                    }
                }
                else {
                    // add a class to color code the row, show when user expands the result set
                    // the user knows the row the user was on.
                    $(e).children('td').addClass('rowVisited');
                }
            });
        }

        function ShowAllParentRows(currentRowGuid) {
            $('#' + currentRowGuid).parent().find('tr').each(function (i, e) {
                $(e).show();
            });
        }

        function showDetailClicked(parentRowGuid, targetGuid, imageDisplayArea, entityId) {
            if (openAssociationBlocks[targetGuid] === undefined || openAssociationBlocks[targetGuid] === '') // never opened or closed after open
            {
                // close all other parent rows, except the one that the click has come on.
                CloseAllRowsExceptCurrent(parentRowGuid);

                openAssociationBlocks[targetGuid] = 'Display';  // first time click
                showDetails(parentRowGuid, targetGuid, imageDisplayArea, entityId);
            }
            else // already open - close it now;
            {
                // show all parent rows
                ShowAllParentRows(parentRowGuid);
                // hide image display area also;
                $('#' + imageDisplayArea).hide();

                $('#' + targetGuid).hide();
                openAssociationBlocks[targetGuid] = '';
            }
        }

        function showDetails(parentRowGuid, targetGuid, imageDisplayArea, entityId) {
                $('#' + targetGuid).show();
                $('#' + targetGuid).html(waitImage);

                var targetUrls = ['/Admin/GetEntityContacts', '/Admin/GetEntityCrops', '/Admin/GetEntityAgreements'];
                if (agreementsEnabled != 'True') {
                    targetUrls[2] = '';
                }

                var requestsPending = 0;
                for (var i = 0; i < targetUrls.length; i++) {
                    if (targetUrls[i] == '') {
                        continue;
                    }
                    requestsPending++;
                    $.ajax(targetUrls[i], {
                        cache: false,
                        type: "Get",
                        contentType: "application/json",
                        data: { 'entityId': entityId },
                        success: function (data, textStatus, jqXHR) {
                            $('#' + targetGuid).append(data);
                            //$('#' + targetGuid).html(data);
                            // need to add following line, as the returned data may have add/edit links that need to work in popup
                            $(".editInPopup").off('click').on('click', editPopupLinkClicked);
                            $(".addInPopup").off('click').on('click', addPopupLinkClicked);
                            requestsPending--;
                            if (requestsPending <= 0) {
                                $("#idWait").hide();

                                // add refresh icon
                                var a = '<a href="" title="Refresh" onclick="showDetails(\'' + parentRowGuid + '\', \'' + targetGuid + '\', \'' + imageDisplayArea + '\', \'' + entityId + '\');return false;"><img height="25" width="25" src="/Content/img/refresh.png" /></a>&nbsp;';
                                $('#' + targetGuid).find("h3").each(function (index, element) {
                                    $(element).prepend(a);
                                });
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            requestsPending--;
                            if (requestsPending <= 0) {
                                $("#idWait").hide();
                            }
                            alert("An error occured while getting data.");
                        }
                    });
                }
        }

        var isProcessing = {};
        function showImageClicked(id, imageCount, parentRowGuid, displayImage, imageDisplayWaitArea, imageDisplayArea, otherDetailRowArea) {
            if (openAssociationBlocks[displayImage] === undefined || openAssociationBlocks[displayImage] === '') // never opened or closed after open
            {
                if (isProcessing[displayImage] === 'image' || isProcessing[displayImage] === undefined) {

                    CloseAllRowsExceptCurrent(parentRowGuid);

                    isProcessing[displayImage] = '';

                    var imagesRetrieved = 0;
                    $('#' + imageDisplayArea).show();
                    $('#' + imageDisplayWaitArea).show();
                    $('#' + displayImage).html('<span></span>');

                    for (i = imageCount; i > 0; i--) {
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (this.readyState == 4 && this.status == 200) {
                                var reader = new window.FileReader();
                                reader.readAsDataURL(this.response);
                                reader.onloadend = function () {
                                    imagesRetrieved++;
                                    $('#' + displayImage).append('<img style="margin-left:20px;" height="300px" width="auto" src="' + reader.result + '"/>');
                                    if (imagesRetrieved == imageCount) // last image processed
                                    {
                                        $('#' + imageDisplayArea).show();
                                        isProcessing[displayImage] = 'image';
                                        $('#' + imageDisplayWaitArea).hide();
                                    }
                                }
                            }
                        }
                        xhr.open('GET', '/Admin/EntityImageData?Id=' + id + '&imageItem=' + i);
                        xhr.responseType = 'blob';
                        xhr.send();
                    }
                    openAssociationBlocks[displayImage] = 'displaying';
                } else {
                    return;
                }
            } else {
                ShowAllParentRows(parentRowGuid);

                // hide Other Detail Area also;
                $('#' + otherDetailRowArea).hide();

                $('#' + imageDisplayArea).hide();
                $('#' + imageDisplayWaitArea).hide();
                openAssociationBlocks[displayImage] = '';
            }
        }

        function displayBankDetailImage(id, imageCount, displayImage, imageDisplayWaitArea, imageDisplayArea) {
            if (openAssociationBlocks[displayImage] === undefined || openAssociationBlocks[displayImage] === '') // never opened or closed after open
            {
                if (isProcessing[displayImage] === 'image' || isProcessing[displayImage] === undefined) {

                    isProcessing[displayImage] = '';

                    var imagesRetrieved = 0;
                    $('#' + imageDisplayArea).show();
                    $('#' + imageDisplayWaitArea).show();
                    $('#' + displayImage).html('<span></span>');

                    for (i = imageCount; i > 0; i--) {
                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (this.readyState == 4 && this.status == 200) {
                                var reader = new window.FileReader();
                                reader.readAsDataURL(this.response);
                                reader.onloadend = function () {
                                    imagesRetrieved++;
                                    $('#' + displayImage).append('<img style="margin-left:20px;" height="300px" width="auto" src="' + reader.result + '"/>');
                                    if (imagesRetrieved == imageCount) // last image processed
                                    {
                                        $('#' + imageDisplayArea).show();
                                        isProcessing[displayImage] = 'image';
                                        $('#' + imageDisplayWaitArea).hide();
                                    }
                                }
                            }
                        }
                        xhr.open('GET', '/Admin/EntityBankDetailImageData?Id=' + id + '&imageItem=' + i);
                        xhr.responseType = 'blob';
                        xhr.send();
                    }
                    openAssociationBlocks[displayImage] = 'displaying';
                } else {
                    return;
                }
            } else {
                $('#' + imageDisplayArea).hide();
                $('#' + imageDisplayWaitArea).hide();
                openAssociationBlocks[displayImage] = '';
            }
        }


        function ZonesSelectionChanged() {
            $('#selArea option:not(:first-child)').remove();
            $('#selTerritory option:not(:first-child)').remove();
            $('#selHQ option:not(:first-child)').remove();

            // get current value of Zone
            var selectedZone = $("#selZone").val();
            FillAreasForZone(selectedZone);
        }

        function FillAreasForZone(z) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == z) {
                    // use Area Name as key so we can sort by name
                    selectedObj[o.AreaName] = o.AreaCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selArea').append(opt);
            });
        }

        function AreasSelectionChanged() {
            $('#selTerritory option:not(:first-child)').remove();
            $('#selHQ option:not(:first-child)').remove();
            var selectedZone = $("#selZone").val();
            var selectedArea = $("#selArea").val();
            FillTerritories(selectedZone, selectedArea);
        }

        // zone and area
        function FillTerritories(zo, ar) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar) {
                    selectedObj[o.TerritoryName] = o.TerritoryCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selTerritory').append(opt);
            });
        }

        function TerritoriesSelectionChanged() {
            $('#selHQ option:not(:first-child)').remove();
            var selectedZone = $("#selZone").val();
            var selectedArea = $("#selArea").val();
            var selectedTerritory = $("#selTerritory").val();
            FillHQ(selectedZone, selectedArea, selectedTerritory);
        }

        // zone, area, tr
        function FillHQ(zo, ar, tr) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar && o.TerritoryCode == tr) {
                    selectedObj[o.HQName] = o.HQCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selHQ').append(opt);
            });
        }

        function detailDownloadClicked() {
            var searchCriteria = CaptureSearchCriteria();

            $("#detailDownloadLinkArea").html('<img height="30" Width="30" src="/Content/img/waiting.gif"/>');

            $.ajax('/Admin/GetDetailedEntityResultForDownload', {
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: searchCriteria,
                success: function (data, textStatus, jqXHR) {

                    var dataToSave = data;
                    var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                    var url = URL.createObjectURL(blob);
                    window.location = url;

                    $("#detailDownloadLinkArea").html('<p>Saved</p>');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("An error occured while getting data download data matching your search criteria.")
                    $("#detailDownloadLinkArea").html('<p>Error</p>');
                }
            });
        }

    
    </script>
}
