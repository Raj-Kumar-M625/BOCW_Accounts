@{
    IEnumerable<DomainEntities.OfficeHierarchy> officeHierarchy = (IEnumerable<DomainEntities.OfficeHierarchy>)ViewBag.OfficeHierarchy;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();

    IEnumerable<string> AvailableStatus = ViewBag.AvailableStatus;
    string SearchResultAction = ViewBag.SearchResultAction;

    IEnumerable<DomainEntities.Vendor> vendors = (IEnumerable<DomainEntities.Vendor>)ViewBag.Vendors;

    string calledFrom = ViewBag.CalledFrom;
}

@{
    Html.RenderPartial("_CodeSnippetPageHeader", (string)ViewBag.Title);
}

<div class="well" id="idSearchWell">
    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Zone</label>
                <select class="form-control" id="selZone">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Area</label>
                <select class="form-control" id="selArea">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Territory</label>
                <select class="form-control" id="selTerritory">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>HQ</label>
                <select class="form-control" id="selHQ">
                    <option value="All">All</option>
                </select>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Vendor</label>
                <select class="form-control" id="vendorName">
                    <option value="0">Select</option>
                    @foreach (var o in vendors.OrderBy(x=> x.CompanyName))
                    {
                        <option value="@o.CompanyName">@o.CompanyName</option>
                    }
                </select>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>GRN #</label>
                <input type="text" class="form-control" id="grnNumber" />
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>Invoice #</label>
                <input type="text" class="form-control" id="invoiceNumber" />
            </div>
        </div>
    </div>
    <div class="row">

        <div class="col-sm-2">
            <div class="form-group">
                <label>From (dd-mm-yyyy)</label>
                <div class="input-append date">
                    <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtFromDate" autocomplete="off" />
                    <span class="add-on">
                        <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                        </i>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>To (dd-mm-yyyy)</label>
                <div class="input-append date">
                    <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtToDate" autocomplete="off" />
                    <span class="add-on">
                        <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                        </i>
                    </span>
                </div>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>Status</label>
                <select class="form-control" id="selStatus">
                    @foreach (var o in AvailableStatus)
                    {
                        <option value="@o">@o</option>
                    }
                    <option value="">All</option>
                </select>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>&nbsp;</label>
                <input type="button" id="btnSearch" value="Search" class="form-control btn-success" />
            </div>
        </div>
    </div>
</div>
<div id="dataArea">
</div>

<script type="text/javascript">
    // Office Hierarchy object
    var CalledFrom = '@calledFrom';
    var OfficeHierarchy = [];
    @foreach(var oh in officeHierarchy)
        {
            sb.AppendLine("var joh = { };");

            sb.AppendLine($"joh.ZoneCode = '{oh.ZoneCode}';");
            sb.AppendLine($"joh.ZoneName = '{oh.ZoneName}';");
            sb.AppendLine($"joh.IsZoneSelectable = {oh.IsZoneSelectable.ToString().ToLower()};");

            sb.AppendLine($"joh.AreaCode = '{oh.AreaCode}'; ");
            sb.AppendLine($"joh.AreaName = '{oh.AreaName}';");
            sb.AppendLine($"joh.IsAreaSelectable = {oh.IsAreaSelectable.ToString().ToLower()};");

            sb.AppendLine($"joh.TerritoryCode = '{oh.TerritoryCode}'; ");
            sb.AppendLine($"joh.TerritoryName = '{oh.TerritoryName}'; ");
            sb.AppendLine($"joh.IsTerritorySelectable = {oh.IsTerritorySelectable.ToString().ToLower()};");

            sb.AppendLine($"joh.HQCode = '{oh.HQCode}'; ");
            sb.AppendLine($"joh.HQName = '{oh.HQName}';");
            sb.AppendLine($"joh.IsHQSelectable = {oh.IsHQSelectable.ToString().ToLower()};");

            sb.AppendLine("OfficeHierarchy.push(joh);");
        }
    @Html.Raw(sb.ToString());

    //alert(JSON.stringify(OfficeHierarchy));
</script>


@section scripts{
<script src="/Scripts/jquery.datetimepicker.js"></script>
    <script>

        $(document).ready(
            function () {
                ShowSearch();
                $("#btnSearch").off('click').on('click', btnSearchClicked);
                $("#showSearch").off('click').on('click', ShowSearch);

                // once user changes selection boxes, clear results area;
                $('Select').change(function () { ClearResults(); });
                $('input').change(function () { ClearResults(); });

                $('.justDate').datetimepicker({ inline: false, format: 'd-m-Y', timepicker: false, yearStart: 2017, yearEnd: 2099 });

                $('.justDate').attr({ 'placeholder': 'dd-mm-yyyy' });

                // zone/Area/Territory/HQ changed
                $('#selZone').change(function () { ZonesSelectionChanged(); })
                $('#selArea').change(function () { AreasSelectionChanged(); })
                $('#selTerritory').change(function () { TerritoriesSelectionChanged(); })
                   
                var selectedObj = {};
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    selectedObj[o.ZoneName] = o.ZoneCode;
                }
                Object.keys(selectedObj).sort().forEach(function (element) {
                    var opt = new Option(element, selectedObj[element]);
                    $('#selZone').append(opt);
                });
            });

        function CaptureSearchCriteria() {
            var searchCriteria = {};
            searchCriteria.Zone = $("#selZone").val();
            searchCriteria.Area = $("#selArea").val();
            searchCriteria.Territory = $("#selTerritory").val();
            searchCriteria.HQ = $("#selHQ").val();

            searchCriteria.VendorName = $("#vendorName").val();
            searchCriteria.GRNNumber = $("#grnNumber").val();
            searchCriteria.InvoiceNumber = $("#invoiceNumber").val();

            searchCriteria.DateFrom = $("#txtFromDate").val();
            searchCriteria.DateTo = $("#txtToDate").val();
            searchCriteria.Status = $("#selStatus").val();

            searchCriteria.CalledFrom = CalledFrom;
            return searchCriteria;
        }

        // Search button
        var btnSearchClicked = function (event) {
            DisableSearchButton();

            var searchCriteria = CaptureSearchCriteria();
            //alert(JSON.stringify(searchCriteria));
            var agNum = searchCriteria.AgreementNumber;

            //if (
            //    searchCriteria.Zone == 'All' &&
            //    searchCriteria.Area == 'All' &&
            //    searchCriteria.Territory == 'All' &&
            //    searchCriteria.HQ == 'All'
            //    ) 
            //{
            //    $('#dataArea').html('<p>Please select Zone/Area/Territory/HQ</p>');
            //    EnableSearchButton();
            //    return;
            //}

            //if (searchCriteria.VendorName == '' &&
            //    (searchCriteria.GRNNumber == '' ) &&
            //    searchCriteria.InvoiceNumber == '' &&

            //    searchCriteria.Zone == 'All' &&
            //    searchCriteria.Area == 'All' &&
            //    searchCriteria.Territory == 'All' &&
            //    searchCriteria.HQ == 'All' &&
            //    searchCriteria.DateFrom == '' &&
            //    searchCriteria.DateTo == ''
            //    )
            //{
            //    $('#dataArea').html('<p>Please Enter Your Search Criteria...</p>');
            //    EnableSearchButton();
            //    return;
            //}

            @* Further validate that zone/area/territory/hq is selectable *@
            @*var isZoneSelected = (searchCriteria.Zone != 'All');
            var isAreaSelected = (searchCriteria.Area != 'All');
            var isTerritorySelected = (searchCriteria.Territory != 'All');
            var isHQSelected = (searchCriteria.HQ != 'All');

            if (isHQSelected)
            {
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    if (o.HQCode == searchCriteria.HQ && o.IsHQSelectable == false) {
                        alert('HQ selection is not valid/allowed.');
                        EnableSearchButton();
                        return;
                    }
                }
            }
            else if (isTerritorySelected)
            {
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    if (o.TerritoryCode == searchCriteria.Territory && o.IsTerritorySelectable == false) {
                        alert('Territory selection is not valid/allowed.');
                        EnableSearchButton();
                        return;
                    }
                }
            }
            else if (isAreaSelected) {
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    if (o.AreaCode == searchCriteria.Area && o.IsAreaSelectable == false) {
                        alert('Area selection is not valid/allowed.');
                        EnableSearchButton();
                        return;
                    }
                }
            }
            else if (isZoneSelected) {
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    if (o.ZoneCode == searchCriteria.Zone && o.IsZoneSelectable == false) {
                        alert('Zone selection is not valid/allowed.');
                        EnableSearchButton();
                        return;
                    }
                }
            }*@

            ///////////////////////////////////////////////////
            //alert(JSON.stringify(searchCriteria));
            //EnableSearchButton();
                
                $('#dataArea').html(waitImage);
                $.ajax('@SearchResultAction', {
                    cache: false,
                    type: "Get",
                    contentType: "application/json",
                    data: searchCriteria,
                    success: function (data, textStatus, jqXHR) {

                        $('#dataArea').html(data);

                        if (document.getElementById("downloadLinkArea") != null) {
                            // create link to download the data as excel
                            // do some text replacements - remove links etc.
                            var dataToSave = data.replace(/<a.*\">/g, "").replace(/<\/a>/g, "");
                            // Checked check box to be turned into 'Yes'
                            dataToSave = dataToSave.replace(/<input checked=\"checked\" class=\"check-box\" disabled=\"disabled\" type=\"checkbox\" \/>/g, "Yes");

                            // replace image tag
                            dataToSave = dataToSave.replace(/<img .*png\" \/>/g, "");

                            // now create html and remove header row from downloadable data
                            var $dataAsHtml = $(dataToSave);

                            $dataAsHtml.find("#dataTableHeader").remove();
                            $dataAsHtml.find("h3").remove();
                            $dataAsHtml.find("img").remove();
                            $dataAsHtml.find("#imageDisplayWaitArea").remove();
                            $dataAsHtml.find(".removeFromDownload").remove();

                            dataToSave = $('<div>').append($dataAsHtml).html();

                            var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                            var url = URL.createObjectURL(blob);

                            var m = document.createElement('img');
                            m.height = "25";
                            m.width = "25";
                            m.src = "/Content/img/download_3.png";

                            var a = document.createElement('a');
                            a.download = "DownloadReport.xls";
                            a.href = url;
                            a.title = "Download as Excel";
                            a.appendChild(m);

                            document.getElementById("downloadLinkArea").appendChild(a);
                        }

                        $(".editInPopup").off('click').on('click', { callback: btnSearchClicked }, editPopupLinkClicked);
                        $(".addInPopup").off('click').on('click', { callback: btnSearchClicked }, addPopupLinkClicked);
                        EnableSearchButton();

                        if ($("#dataTable").length) {
                            HideSearch();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting data matching your search criteria.")
                        EnableSearchButton();
                    }
                });
        }

        function DisableSearchButton() {
            $("#btnSearch").hide();
        }

        function EnableSearchButton() {
            $("#btnSearch").show();
        }

        function HideSearch() {
            $("#idSearchWell").hide();
            $("#showSearch").show();
        }

        function ShowSearch() {
            $("#idSearchWell").show("slow");
            $("#showSearch").hide();
        }

        function ClearResults() {
            $('#dataArea').html('');
        }


        function ZonesSelectionChanged() {
            $('#selArea option:not(:first-child)').remove();
            $('#selTerritory option:not(:first-child)').remove();
            $('#selHQ option:not(:first-child)').remove();

            // get current value of Zone
            var selectedZone = $("#selZone").val();
            FillAreasForZone(selectedZone, 'selArea');
        }

        function FillAreasForZone(z, d) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == z) {
                    // use Area Name as key so we can sort by name
                    selectedObj[o.AreaName] = o.AreaCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#' + d).append(opt);
            });
        }

        function AreasSelectionChanged() {
            $('#selTerritory option:not(:first-child)').remove();
            $('#selHQ option:not(:first-child)').remove();
            var selectedZone = $("#selZone").val();
            var selectedArea = $("#selArea").val();
            FillTerritories(selectedZone, selectedArea, 'selTerritory');
        }

        // zone and area
        function FillTerritories(zo, ar, d) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar) {
                    selectedObj[o.TerritoryName] = o.TerritoryCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#' + d).append(opt);
            });
        }

        function TerritoriesSelectionChanged() {
            $('#selHQ option:not(:first-child)').remove();
            var selectedZone = $("#selZone").val();
            var selectedArea = $("#selArea").val();
            var selectedTerritory = $("#selTerritory").val();
            FillHQ(selectedZone, selectedArea, selectedTerritory, 'selHQ');
        }

        // zone, area, tr
        function FillHQ(zo, ar, tr, d) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar && o.TerritoryCode == tr) {
                    selectedObj[o.HQName] = o.HQCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#' + d).append(opt);
            });
        }

        var openAssociationBlocks = {};
        function closeArea(parentRowGuid, rowGuid) {
            // show all parent rows
            $('#' + parentRowGuid).parent().find('tr').each(function (i, e) {
                $(e).show();
            });

            $('#' + rowGuid).hide();
            openAssociationBlocks[rowGuid] = '';
        }

        function additionalAnchorClicked(parentRowGuid, rowGuid, Id) {
            if (openAssociationBlocks[rowGuid] === undefined || openAssociationBlocks[rowGuid] === '') // never opened or closed after open
            {
                // close all other parent rows, except the one that the click has come on.
                $('#' + parentRowGuid).parent().find('tr').each(function (i, e) {
                    if ($(e).prop('id') != parentRowGuid) {
                                $(e).hide();
                    }
                    else {
                        // add a class to color code the row, show when user expands the result set
                        // the user knows the row the user was on.
                        $(e).children('td').addClass('rowVisited');
                    }
                });

                openAssociationBlocks[rowGuid] = 'Display';  // first time click
                refreshItemList(parentRowGuid, rowGuid, Id);
            }
            else // already open - close it now;
            {
                closeArea(parentRowGuid, rowGuid);
            }
        }

        var cachedParentRowGuid = undefined;
        var cacheRowGuid = undefined;
        var cacheId = undefined;
        function refreshItemList(parentRowGuid, rowGuid, Id) {

            cachedParentRowGuid = parentRowGuid;
            cacheRowGuid = rowGuid;
            cacheId = Id;

                $('#' + rowGuid).show();
                $('#' + rowGuid).html(waitImage);

                var uri = '/Admin/GetStockInputItems';
                $.ajax(uri, {
                    cache: false,
                    type: "Get",
                    contentType: "application/json",
                    data: { 'Id': Id, 'rowId': rowGuid, 'parentRowId': parentRowGuid, 'calledFrom': CalledFrom },
                    success: function (data, textStatus, jqXHR) {
                        $('#' + rowGuid).html(data);
                        // need to add following line, as the returned data may have add/edit links that need to work in popup
                        $('#' + rowGuid).find("a.editInPopup").each(function (index, element) {
                            $(element).off('click').on('click', { callback: callback_refreshItemList }, editPopupLinkClicked);
                        });

                        $('#' + rowGuid).find("a.addInPopup").each(function (index, element) {
                            $(element).off('click').on('click', { callback: callback_refreshItemList }, addPopupLinkClicked);
                        });
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting data.");
                    }
                });
        }

        function callback_refreshItemList() {
            refreshItemList(cachedParentRowGuid, cacheRowGuid, cacheId);
        }

        function detailDownloadClicked() {
            var searchCriteria = CaptureSearchCriteria();

            $("#detailDownloadLinkArea").html('<img height="30" Width="30" src="/Content/img/waiting.gif"/>');

            $.ajax('/Admin/GetDetailedSearchReceiveStockForDownload', {
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: searchCriteria,
                success: function (data, textStatus, jqXHR) {

                    var dataToSave = data;
                    var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                    var url = URL.createObjectURL(blob);
                    window.location = url;

                    $("#detailDownloadLinkArea").html('<p>Saved</p>');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("An error occured while getting data download data matching your search criteria.")
                    $("#detailDownloadLinkArea").html('<p>Error</p>');
                }
            });
        }
    </script>
}
