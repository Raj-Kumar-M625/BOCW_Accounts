@model DWSModel
@{
    string caption = $"Approve Amount for DWS # {Model.DWSNumber}";
    int maxCommentsLength = ViewBag.MaxDWSNotesLength;


    ICollection<DWSModel> allDWS = (ViewBag.AllDWS != null) ? ViewBag.AllDWS : new List<DWSModel>();
    int allDWSCount = allDWS?.Count ?? 0;

    ICollection<IssueReturnModel> issueReturns = (ViewBag.IssueReturns != null) ? ViewBag.IssueReturns :
                            new List<IssueReturnModel>();
    int issueReturnCount = issueReturns?.Count ?? 0;

    ICollection<AdvanceRequestModel> advanceRequests = (ViewBag.AdvanceRequests != null) ? ViewBag.AdvanceRequests :
                            new List<AdvanceRequestModel>();
    int advanceRequestCount = advanceRequests?.Count ?? 0;

    bool hasPendingIssueReturn = issueReturns.Any(x => x.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase));
    bool hasPendingAdvances = advanceRequests.Any(x => x.AdvanceReqStatus.Equals("Pending", StringComparison.OrdinalIgnoreCase));

    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("ContextDWSNumber", Model.DWSNumber);

    // calculate some numbers for display
    decimal totalRecoveryAmount = issueReturns
                        .Where(x => x.IsIssueItem)
                        .Sum(x => x.AppliedItemRate * x.AppliedQuantity) -

                        issueReturns.Where(x => !x.IsIssueItem)
                        .Sum(x => x.AppliedItemRate * x.AppliedQuantity);

    totalRecoveryAmount += advanceRequests.Sum(x => x.AmountApproved);

    decimal totalDeductedAmount = allDWS.Sum(x => x.DeductAmount);
    decimal dueAmount = totalRecoveryAmount - totalDeductedAmount;

    bool issueReturnModuleEnabled = (CRMUtilities.Utils.SiteConfigData.IssueReturnModule);
    bool advanceRequestModuleEnabled = (CRMUtilities.Utils.SiteConfigData.AdvanceRequestModule);
}

@using (Html.BeginForm("ApproveDWSAmount", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
<div class="form-horizontal">
    <span style="font-size:large;">@caption</span>

    <hr />
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.STRTagId)
    @Html.HiddenFor(model => model.CyclicCount)
    @Html.HiddenFor(model => model.StrTagCyclicCount)

    <div class="container">
        <ul class="nav nav-tabs">
            <li><a data-toggle="tab" href="#basicData">Basic</a></li>
            <li><a data-toggle="tab" href="#fieldData">Weights</a></li>
            <li class="active"><a data-toggle="tab" href="#approvalData">Approval</a></li>
            <li><a data-toggle="tab" href="#relatedDWSData">All DWS (@allDWSCount)</a></li>
            @if (issueReturnModuleEnabled)
            {
                <li><a data-toggle="tab" href="#relatedIssueReturnData">Issue/Return (@issueReturnCount)</a></li>
            }
            @if (advanceRequestModuleEnabled)
            {
                <li><a data-toggle="tab" href="#relatedAdvanceRequestData">Advance (@advanceRequestCount)</a></li>
            }

        </ul>
        <div class="tab-content">
            <div id="basicData" class="tab-pane fade in">
                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.DWSNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.DWSNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                    <div>
                        @Html.LabelFor(model => model.DWSDateAsText, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.DWSDateAsText, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.EntityName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.EntityName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                    <div>
                        @Html.LabelFor(model => model.TypeName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.TypeName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.STRNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.STRNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                    <div>
                        @Html.LabelFor(model => model.Agreement, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.Agreement, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.HQCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.HQCode, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                    <div>
                    </div>
                </div>
            </div>

            <div id="fieldData" class="tab-pane fade in">
                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.BagCount, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.BagCount, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>

                    <div>
                        @Html.LabelFor(model => model.EmptyBagsWeightKg, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.EmptyBagsWeightKg, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.FilledBagsWeightKg, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.FilledBagsWeightKg, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>

                    <div>
                        @Html.LabelFor(model => model.GoodsWeight, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.GoodsWeight, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.SiloDeductWtOverride, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.SiloDeductWtOverride, new { htmlAttributes = new { @class = "form-control", @id = "overrideWt", @readonly = "true", } })
                        </div>
                    </div>
                    <div>
                        @Html.LabelFor(model => model.NetPayableWt, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.NetPayableWt, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "netWt" } })
                        </div>
                    </div>
                </div>
            </div>
            <div id="approvalData" class="tab-pane fade in active">
                <table class="table table-bordered table-striped table-condensed" style="margin-top:2px;margin-bottom:5px;">
                    <tr>
                        <td style="font-size:smaller;">(a)</td>
                        <td style="font-size:smaller;">(b)</td>
                        <td style="font-size:smaller;">c = (a*b)</td>
                        <td style="font-size:smaller;">(d)</td>
                        <td style="font-size:smaller;">(e)</td>
                        <td style="font-size:smaller;">f = (d-e)</td>
                    </tr>

                    <tr>
                        <th>
                            @Html.LabelFor(model => model.NetPayableWt)
                        </th>
                        <th>
                            @Html.LabelFor(model => model.RatePerKg)
                        </th>
                        <th>@Html.DisplayNameFor(model => model.GoodsPrice)</th>
                        <th>
                            Total Recovery Amt.(Rs.)
                        </th>
                        <th>
                            Total Deducted (Rs.)
                        </th>
                        <th>Amount to Recover (Rs.)</th>
                    </tr>

                    <tr>
                        <td>@Html.DisplayFor(modelItem => Model.NetPayableWt)</td>
                        <td>@Html.DisplayFor(modelItem => Model.RatePerKg)</td>
                        <th>@Html.DisplayFor(modelItem => Model.GoodsPrice)</th>
                        <td>@Html.DisplayFor(modelItem => totalRecoveryAmount)</td>
                        <td>@Html.DisplayFor(modelItem => totalDeductedAmount)</td>
                        <th>@Html.DisplayFor(modelItem => dueAmount)</th>
                    </tr>
                </table>

                <div>
                    <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:small;">* Max deduction allowed (Rs.):@Model.GoodsPrice.ToString()| Pending Recovery Amt (Rs.):@dueAmount.ToString()</label>
                </div>
                @if (hasPendingIssueReturn || hasPendingAdvances)
                {
                    <div>
                        <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:small;">
                            * DWS has Pending items.
                            @if(hasPendingIssueReturn)
                            {
                                <span> (Issue/Return)</span>
                            }
                            @if (hasPendingAdvances)
                            {
                                <span> (Cash Advance)</span>
                            }
                        </label>
                    </div>
                }

                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.DeductAmount, htmlAttributes: new { @class = "col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.DeductAmount, new { htmlAttributes = new { @class = "form-control", @id = "idDeductAmount" } })
                        </div>
                    </div>
                    <div>
                        @Html.LabelFor(model => model.NetPayable, htmlAttributes: new { @class = "col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.NetPayable, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "idNetPayable" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        <label class="control-lable col-md-3">Beneficary Account</label>
                        <div class="col-md-6">
                            @if ((Model.EntityBankAccounts?.Count ?? 0) == 1)
                            {
                                var ba = Model.EntityBankAccounts.First();
                                <label class="control-lable">@ba.BankName (@ba.BankAccount)</label>
                                <input type="hidden" id="idTargetAccount" name="BeneficiaryAccountId" value="@ba.Id"/>
                            }
                            else
                            {
                                <select class="form-control" id="idTargetAccount" name="BeneficiaryAccountId">
                                    <option value="-1">Select</option>
                                    @foreach (var o in Model.EntityBankAccounts.OrderBy(x=> x.BankName))
                                    {
                                        <option value="@o.Id">@o.BankName (@o.BankAccount)</option>
                                    }
                                </select>
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-6">
                            <textarea name="Comments" rows="2" cols="60" maxlength="@maxCommentsLength" class="form-control" id="idComments">@Model.Comments</textarea>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="hidden" value="Submit" class="btn btn-default" id="popupSaveButton" />
                        <input type="button" value="Approve" class="btn btn-success" id="approveButton" onclick="validateForm()" />
                    </div>
                </div>
            </div>

            <div id="relatedDWSData" class="tab-pane fade in">
                <div>&nbsp;</div>
                @{ 
                    Html.RenderPartial("_ListAgreementDWS", allDWS, vdd);
                }
            </div>

            @if (issueReturnModuleEnabled)
            {
                <div id="relatedIssueReturnData" class="tab-pane fade in">
                    <div>&nbsp;</div>
                    @{
                        Html.RenderPartial("_ListAgreementIssueReturns", issueReturns);
                    }
                </div>
            }

            @if (advanceRequestModuleEnabled)
            {
                <div id="relatedAdvanceRequestData" class="tab-pane fade in">
                    <div>&nbsp;</div>
                    @{
                        Html.RenderPartial("_ListAgreementAdvances", advanceRequests);
                    }
                </div>
            }
        </div>
    </div>
</div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
    Html.RenderPartial("_CodeSnippetConfirmBox");
}

<script type="text/javascript">
    @Html.Raw("var GrossAmount = " + Model.GoodsPrice.ToString() + ";");
    @Html.Raw("var MaxCommentsLength = " + maxCommentsLength.ToString() + ";");

    function Save() {
        $("input#popupSaveButton").click();
    }

    function recalculateNumbers()
    {
        var deductAmount = $("#idDeductAmount").val();

        if (isNaN(deductAmount)) {
            ShowAlertArea("Error!", "Please enter a valid amount", true);
            return false;
        }

        var netPay = GrossAmount - deductAmount;
        $('#idNetPayable').val(netPay);

        // set text on approve button also
        $("#approveButton").val("Click to Approve the Payment Amount (Rs. " + netPay + ")");
    }

    $('#idDeductAmount').on('input', function (e) {
        recalculateNumbers();
    });

    function validateForm()
    {
        var deductAmount = $("#idDeductAmount").val();

        if (isNaN(deductAmount)) {
            ShowAlertArea("Error!", "Please enter a valid amount", true);
            return false;
        }

        if (deductAmount < 0 || deductAmount > GrossAmount)
        {
            ShowAlertArea("Error!", "Deduction Amount can be between 0 and " + GrossAmount, true);
            return false;
        }

        var beneficiaryAccountId = $("#idTargetAccount").val();
        if (beneficiaryAccountId == undefined || beneficiaryAccountId < 0)
        {
            ShowAlertArea("Error!", "Please select beneficiary account.", true);
            return false;
        }

        // get the number of characters in comments
        var commentsText = $("#idComments").val();
        if (commentsText != undefined && commentsText.length > MaxCommentsLength)
        {
            ShowAlertArea("Error!", "Notes can be maximum @maxCommentsLength characters. Currently Notes has " + commentsText.length + " characters.", false);
            return false;
        }

        // confirm 
        ShowAlertArea("Confirm!", "Once deduction is approved, it can't be changed. Please click Yes to 'Approve' or No to go back.", false);
    }

    recalculateNumbers();
</script>

<script src="~/Scripts/CustomScripts/EpicCrmCustomPopup.js"></script>