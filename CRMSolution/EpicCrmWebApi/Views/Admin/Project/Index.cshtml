@{

    IEnumerable<DomainEntities.CodeTableEx> ProjectCategory = (List<DomainEntities.CodeTableEx>)ViewBag.ProjectCategory;
    IEnumerable<DomainEntities.CodeTableEx> ProjectStatus = (List<DomainEntities.CodeTableEx>)ViewBag.ProjectStatus;
    string SearchResultAction = ViewBag.SearchResultAction;
}

@{
    Html.RenderPartial("_CodeSnippetPageHeader", "Projects");
}

@*<h2>Projects</h2>*@

<div class="well" id="idSearchWell">
    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Name</label>
                <input type="text" class="form-control" id="Name" />
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Project Category</label>
                <select class="form-control" id="selProjectCategory">
                    <option value="All">All</option>
                    @foreach (var category in ProjectCategory)
                    {
                        <option value="@category.Code">@category.Code</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>Project Status</label>
                <select class="form-control" id="selProjectStatus">
                    <option value="All">All</option>
                    @foreach (var status in ProjectStatus)
                    {
                        <option value="@status.Code">@status.Code</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="row">

        <div class="col-sm-2">
            <div class="form-group">
                <label>From (dd-mm-yyyy)</label>
                <div class="input-append date">
                    <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtFromDate" autocomplete="off" />
                    <span class="add-on">
                        <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                        </i>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <label>To (dd-mm-yyyy)</label>
                <div class="input-append date">
                    <input data-format="dd-MM-yyyy" type="text" class="form-control justDate" id="txtToDate" autocomplete="off" />
                    <span class="add-on">
                        <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                        </i>
                    </span>
                </div>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>Status</label>
                <select class="form-control" id="Status">
                    <option value="0">All</option>
                    <option value="1">Active</option>
                    <option value="2">In-Active</option>
                </select>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>&nbsp;</label>
                <input type="button" id="btnSearch" value="Search" class="form-control btn-success" />
            </div>
        </div>
    </div>
</div>
<div id="dataArea">

</div>

<script type="text/javascript">

</script>


@section scripts{
    <script src="/Scripts/jquery.datetimepicker.js"></script>
    <script>
        $(document).ready(
            function () {
                ShowSearch();
                $("#btnSearch").off('click').on('click', btnSearchClicked);
                $("#showSearch").off('click').on('click', ShowSearch);

                // once user changes selection boxes, clear results area;
                $('Select').change(function () { ClearResults(); });
                $('input').change(function () { ClearResults(); });

                $('.justDate').datetimepicker({ inline: false, format: 'd-m-Y', timepicker: false, yearStart: 2017, yearEnd: 2099 });

                $('.justDate').attr({ 'placeholder': 'dd-mm-yyyy' });

                //var endDate = Date.today();
                //var startDate = Date.today().add(-5).days();
                //$("#txtFromDate").val(startDate.toString('dd-MM-yyyy'));
                //$("#txtToDate").val(endDate.toString('dd-MM-yyyy'));
            });


        // Search button
        var btnSearchClicked = function (event) {
            DisableSearchButton();

            var searchCriteria = CaptureSearchCriteria();

            //alert(JSON.stringify(searchCriteria));
            //$('#dataArea').html('<p>Please wait...</p>');
            $('#dataArea').html(waitImage);
            $.ajax('GetSearchProjects', {
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: searchCriteria,
                success: function (data, textStatus, jqXHR) {

                    $('#dataArea').html(data);

                    if (document.getElementById("downloadLinkArea") != null) {
                        // create link to download the data as excel
                        // do some text replacements - remove links etc.
                        var dataToSave = data.replace(/<a.*\">/g, "").replace(/<\/a>/g, "");
                        // Checked check box to be turned into 'Yes'
                        dataToSave = dataToSave.replace(/<input checked=\"checked\" class=\"check-box\" disabled=\"disabled\" type=\"checkbox\" \/>/g, "Yes");

                        // replace image tag
                        dataToSave = dataToSave.replace(/<img .*png\" \/>/g, "");

                        // now create html and remove header row from downloadable data
                        var $dataAsHtml = $(dataToSave);
                        $dataAsHtml.find("#dataTableHeader").remove();
                        $dataAsHtml.find("h3").remove();
                        $dataAsHtml.find("img").remove();
                        $dataAsHtml.find(".removeFromDownload").remove();

                        // remove all rows that are there to show order details inline
                        // it will be there only for orders;
                        //$dataAsHtml.find(".orderDetailRow").remove();
                        dataToSave = $('<div>').append($dataAsHtml).html();

                        var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                        var url = URL.createObjectURL(blob);

                        var m = document.createElement('img');
                        m.height = "25";
                        m.width = "25";
                        m.src = "/Content/img/download_3.png";

                        var a = document.createElement('a');
                        a.download = "DownloadReport.xls";
                        a.href = url;
                        a.title = "Download as Excel";
                        a.appendChild(m);

                        //a.textContent = "Download as Excel";
                        //a.textContent = "<img height='15' width='15' src='~/Content/img/download_3.png' />";

                        document.getElementById("downloadLinkArea").appendChild(a);
                    }

                    $(".editInPopup").off('click').on('click', { callback: btnSearchClicked }, editPopupLinkClicked);
                    $(".addInPopup").off('click').on('click', { callback: btnSearchClicked }, addPopupLinkClicked);
                    EnableSearchButton();
                    if ($("#dataTable").length) {
                        HideSearch();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("An error occured while getting data matching your search criteria.")
                    EnableSearchButton();
                }
            });
        }

        function CaptureSearchCriteria() {
            var searchCriteria = {};
            searchCriteria.Name = $("#Name").val();
            searchCriteria.Category = $("#selProjectCategory").val();
            searchCriteria.Status = $("#selProjectStatus").val();
            searchCriteria.DateFrom = $("#txtFromDate").val();
            searchCriteria.DateTo = $("#txtToDate").val();
            searchCriteria.IsActive = $("#Status").val();

            return searchCriteria;
        }

        function DisableSearchButton() {
            $("#btnSearch").hide();
        }

        function EnableSearchButton() {
            $("#btnSearch").show();
        }

        function HideSearch() {
            $("#idSearchWell").hide();
            $("#showSearch").show();
        }

        function ShowSearch() {
            $("#idSearchWell").show("slow");
            $("#showSearch").hide();
        }

        function ClearResults() {
            $('#dataArea').html('');
        }

        var openAssociationBlocks = {};
        function closeArea(parentRowGuid, rowGuid) {
            // show all parent rows
            $('#' + parentRowGuid).parent().find('tr').each(function (i, e) {
                $(e).show();
            });

            $('#' + rowGuid).hide();
            openAssociationBlocks[rowGuid] = '';
        }

        function additionalAnchorClicked(parentRowGuid, rowGuid, Id) {
            if (openAssociationBlocks[rowGuid] === undefined || openAssociationBlocks[rowGuid] === '') // never opened or closed after open
            {
                // close all other parent rows, except the one that the click has come on.
                $('#' + parentRowGuid).parent().find('tr').each(function (i, e) {
                    if ($(e).prop('id') != parentRowGuid) {
                        $(e).hide();
                    }
                    else {
                        // add a class to color code the row, show when user expands the result set
                        // the user knows the row the user was on.
                        $(e).children('td').addClass('rowVisited');
                    }
                });

                openAssociationBlocks[rowGuid] = 'Display';  // first time click
                refreshItemList(parentRowGuid, rowGuid, Id);
            }
            else // already open - close it now;
            {
                closeArea(parentRowGuid, rowGuid);
            }
        }

        var cachedParentRowGuid = undefined;
        var cacheRowGuid = undefined;
        var cacheId = undefined;
        function refreshItemList(parentRowGuid, rowGuid, Id) {

            cachedParentRowGuid = parentRowGuid;
            cacheRowGuid = rowGuid;
            cacheId = Id;

            $('#' + rowGuid).show();
            $('#' + rowGuid).html(waitImage);

            var uri = '/Admin/GetProjectAssignments';
            $.ajax(uri, {
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: { 'Id': Id, 'rowId': rowGuid, 'parentRowId': parentRowGuid },
                success: function (data, textStatus, jqXHR) {
                    $('#' + rowGuid).html(data);

                    // need to add following line, as the returned data may have add/edit links that need to work in popup
                    $('#' + rowGuid).find("a.editInPopup").each(function (index, element) {
                        $(element).off('click').on('click', { callback: callback_refreshItemList }, editPopupLinkClicked);
                    });

                    $('#' + rowGuid).find("a.addInPopup").each(function (index, element) {
                        $(element).off('click').on('click', { callback: callback_refreshItemList }, addPopupLinkClicked);
                    });
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("An error occured while getting data.");
                }
            });
        }

        function callback_refreshItemList() {
            refreshItemList(cachedParentRowGuid, cacheRowGuid, cacheId);
        }


    </script>
}
