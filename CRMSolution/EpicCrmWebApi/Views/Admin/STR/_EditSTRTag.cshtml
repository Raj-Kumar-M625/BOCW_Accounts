@model STRTagModel
@{
    bool IsEditAllowed = ViewBag.IsEditAllowed;
    string caption = IsEditAllowed ? "Edit STR" : "View STR";

    DomainEntities.STRWeight strWeight = Model.STRWeight;

    long strVehicleNumberCount = ViewBag.VehicleNumberCount;
    string strVehicleNumber = ViewBag.STRVehicleNumber;

    bool IsCancelAllowed = IsEditAllowed && (Model.STRCount == 0);
}
@using (Html.BeginForm("EditSTRTag", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <span style="font-size:large;">@caption</span>

        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CyclicCount)
        @Html.HiddenFor(model => model.STRWeightCyclicCount)

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.STRNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.STRNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.STRNumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.STRDateAsText, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <input data-format="dd-MM-yyyy" type="text" name="STRDateAsText"
                           class="form-control justDate" value="@Model.STRDateAsText" />
                    @Html.ValidationMessageFor(model => model.STRDateAsText, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <table class="table table-bordered table-striped table-condensed">
            <thead>
                <tr>
                    <th>Source</th>
                    <th>STR #</th>
                    <th>Date</th>
                    <th># Bags</th>
                    <th>Net Weight (Kg.)</th>
                    <th># DWS</th>
                    <th>% Deduction</th>
                    <th>Start Odo</th>
                    <th>End Odo</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Field Data</td>
                    <td>@Html.DisplayFor(modelItem => Model.STRNumber)</td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.STRDate, "DatetimeShort")
                    </td>
                    <td>@Html.DisplayFor(modelItem => Model.BagCount)</td>
                    <td>@Html.DisplayFor(modelItem => Model.NetWeight)</td>
                    <td>@Html.DisplayFor(modelItem => Model.DWSCount)</td>
                    <td>&nbsp;</td>
                    <td>@Html.DisplayFor(modelItem => Model.StartOdo)</td>
                    <td>NA</td>
                </tr>

                <tr>
                    <td>Weighment</td>

                    @if (strWeight != null)
                    {
                        var netWeight = strWeight.EntryWeight - strWeight.ExitWeight;

                        <td>@Html.DisplayFor(modelItem => strWeight.STRNumber)</td>
                        <td>
                            @Html.DisplayFor(modelItem => strWeight.STRDate, "DatetimeShort")
                        </td>
                        <td>@Html.DisplayFor(modelItem => strWeight.BagCount)</td>
                        <td>@Html.DisplayFor(modelItem => netWeight)</td>
                        <td>@Html.DisplayFor(modelItem => strWeight.DWSCount)</td>
                        <td>@Html.DisplayFor(modelItem => strWeight.DeductionPercent)</td>
                        <td>NA</td>
                        <td>@Html.DisplayFor(modelItem => strWeight.ExitOdometer)</td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                    }
                </tr>
                <tr>
                    @if (strWeight != null)
                    {
                        var totalRunningKM = strWeight.ExitOdometer - Model.StartOdo;

                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <th colspan="3">Total Running Km (Weighment(EndOdo) - Field(StartOdo)):</th>
                        <th colspan="2">@Html.DisplayFor(modelItem => totalRunningKM) Km</th>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <th colspan="3">Total Running Km (Weighment(EndOdo) - Field(StartOdo)):</th>
                        <th colspan="2">&nbsp;</th>
                    }
                </tr>
            </tbody>
        </table>


        @if (IsEditAllowed && strWeight != null && Model.STRCount > 0)
        {
            <div>
                @Html.LabelFor(model => model.IsFinal, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.CheckBox("IsFinal", false, htmlAttributes: new { id = "idIsFinal", onclick = "cbSelectionChanged()" })
                </div>
                <br />
                <br />
            </div>
        }
        else
        {
            <div>
                @Html.HiddenFor(model => model.IsFinal)
            </div>
        }

        @if (strVehicleNumberCount == 1 && strWeight != null && strWeight.VehicleNumber != strVehicleNumber)
        { 
            <div>
                <label class="control-label" style="margin-top:10px;font-weight:normal;color:red;font-size:small;">
                    Warning : STR Load Vehicle Number doesn't match with STR Weighment Vehicle number.
                </label>
            </div>
        }

        @if (strVehicleNumberCount > 1)
        {
            <div>
                <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:small;">
                    Warning : STR loads contain multiple vehicle numbers.
                </label>
            </div>
        }


        @if (IsEditAllowed && (strWeight == null || Model.STRCount <= 0))
        {
            <div>
                <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:small;">
                    Required STR or Silo/Weighment data is not available.
                </label>
            </div>
        }

        @if (IsCancelAllowed)
        {
            <div>
                @Html.LabelFor(model => model.IsCancel, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.CheckBox("IsCancel", false, htmlAttributes: new { id = "idIsCancel" })
                </div>
            </div>
        }
        else
        {
            <div>
                @Html.HiddenFor(model => model.IsCancel)
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-5 col-md-4">
                @if (IsEditAllowed)
                {
                    <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
                }

            </div>
        </div>
    </div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}


<script type="text/javascript">

    function cbSelectionChanged() {
        var checkBox = document.getElementById("idIsFinal");

        if (checkBox.checked) {
            alert("Please note, Once data is saved, further edits won't be allowed on this STR.");
        }
    }

</script>

<script type="text/javascript">
    @Html.Raw("var IsEditAllowed = '" + IsEditAllowed.ToString() + "';");

    if (IsEditAllowed == 'False')
    {
        $("#popupForm Input").each(function (i, e) {
            $(e).attr("readonly", "true");
        });

        $("#popupForm textarea").each(function (i, e) {
            $(e).attr("readonly", "true");
        });

        $("#popupForm select").each(function (i, e) {
            $(e).attr("disabled", true);
        });

        $("input.justDate").datetimepicker({ datepicker: false, timepicker: false });
    }
</script>
