@model EntityBankDetailModel
@{
    IEnumerable<DomainEntities.CodeTableEx> customerBank = ViewBag.CustomerBank;
}
@using (Html.BeginForm("AddBankDetails", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <span style="font-size:large;">Add Bank Detail</span>

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.EntityId)
    @Html.HiddenFor(model => model.EntityName)
    @Html.HiddenFor(model => model.EntityType)
    @Html.HiddenFor(model => model.Status)
    @Html.HiddenFor(model => model.ImageCount, new {@id="imageCount"})
    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.EntityName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <p class="form-control-static">@Html.DisplayFor(model => model.EntityName)</p>
                @Html.HiddenFor(model => model.EntityName)
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.IsSelfAccount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.IsSelfAccount)
            </div>
        </div>
    </div>


    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.AccountHolderName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.AccountHolderName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AccountHolderName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.AccountHolderPAN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.AccountHolderPAN, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AccountHolderPAN, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <select class="form-control" id="selBankName" name="BankName">
                    <option value="">Select BankName</option>
                    @foreach (var o in customerBank.OrderBy(x => x.DisplaySequence))
                    {
                        if (o.Code.Equals(Model.BankName, StringComparison.OrdinalIgnoreCase))
                        {
                            <option value="@o.Code" selected>@o.Code</option>
                        }
                        else
                        {
                            <option value="@o.Code">@o.Code</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.BankAccount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.BankAccount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BankAccount, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.BankIFSC, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.BankIFSC, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BankIFSC, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.BankBranch, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.BankBranch, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BankBranch, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @onclick = "return false" } })
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comments)
            </div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ImageUpload, "Attach Photo", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            <input type="file" class="form-control" id="Image" accept=".png, .jpg, .jpeg" />
            <input type="text" name="ImageUpload" id="ImageUpload" hidden value="@Model.ImageUpload" />
            <div style="display: flex; align-items: center;flex-direction:column">
                <img src="@Model.ImageUpload" id="entityImage" width="100" height="100" style="display:none" />
                <button type="button" id="CancelBtn" disabled style="display:none;margin-top:4px;" class="btn btn-sm btn-danger">Delete</button>

            </div>
           
            @Html.ValidationMessageFor(model => model.ImageUpload, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="form-group">
        <div class="col-md-offset-5 col-md-4">
            <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
        </div>
    </div>
</div>
}


@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}

<script>
    var imageCount = 0; // Initialize image count to zero

    $("#Image").change(function () {
        debugger;
        var image = document.getElementById("Image").files[0]
        var fReader = new FileReader();
        fReader.readAsDataURL(image);
        fReader.onloadend = function (event) {
            $("#entityImage").css({
                "display": "block"
            })
            $("#ImageUpload").val(event.target.result);
            $("#entityImage").attr("src", event.target.result);
            $("#CancelBtn").prop("disabled", false).show();
            // Increment image count
            imageCount++;
            $("#imageCount").val(imageCount);
        }
    })

    if ($("#ImageUpload").val().length > 0) {
        debugger;
        $("#entityImage").css({
            "display": "block"
        })
    } else {
        $("#entityImage").css({
            "display": "none"
        })
    }
    $("#CancelBtn").click(function () {
        $("#Image").val("");
        $("#ImageUpload").val("");
        $("#entityImage").attr("src", "").hide();
        $(this).prop("disabled", true).hide();
        // Decrement image count
        if (imageCount > 0) {
            imageCount--;
        }
        $("#imageCount").val(imageCount);
    });

    // Check if an image is selected and show/hide the cancel button
    $("#Image").on("input", function () {
        if ($("#Image").val() === "") {
            $("#CancelBtn").prop("disabled", true).hide();
        } else {
            $("#CancelBtn").prop("disabled", false).show();
        }
    });
  
</script>