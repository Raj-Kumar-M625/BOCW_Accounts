@model EntityAddAgreementModel
@{

    IEnumerable<DomainEntities.WorkflowSeason> croptype = (IEnumerable<DomainEntities.WorkflowSeason>)ViewBag.ActiveCrops;
}


@using (Html.BeginForm("AddAgreement", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.EntityId)
    @Html.HiddenFor(model => model.ZoneName, new { @id = "selZone2Name" })
    @Html.HiddenFor(model => model.AreaName, new { @id = "selArea2Name" })
    @Html.HiddenFor(model => model.TerritoryName, new { @id = "selTerritory2Name" })
    @Html.HiddenFor(model => model.HQName, new { @id = "selHQ2Name" })
    @Html.HiddenFor(model => model.EmployeeName, new { @id = "selEmployeeName" })
    <div class="form-horizontal">

        <span style="font-size:large;">Add New Agreement</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="control-label col-md-2">
                <label>Zone <span style="color: red;">  * </span> </label>
            </div>
            <div class="col-sm-4">
                <select class="form-control" id="selZone2" name="ZoneCode">
                    <option value="">Select</option>
                </select>
            </div>
            <div>
                <div class="control-label col-md-2">
                    <label>Area <span style="color: red;">  * </span> </label>
                </div>
                <div class="col-md-4">
                    <select class="form-control" id="selArea2" name="AreaCode" required>
                        <option value="">Select</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                <div class="control-label col-md-2">
                    <label>Cluster <span style="color: red;">  * </span> </label>
                </div>
                <div class="col-md-4">
                    <select class="form-control" id="selTerritory2" name="TerritoryCode">
                        <option value="">Select</option>
                    </select>
                </div>
            </div>
            <div>
                <div class="control-label col-md-2">
                    <label>Village <span style="color: red;">  * </span> </label>
                </div>
                <div class="col-md-4">
                    <select class="form-control" id="selHQ2" name="HQCode">
                        <option value="">Select</option>
                    </select>
                </div>
            </div>
        </div>

        <hr style="height:1px;border-width:0;color:lightgray;background-color:lightgray;" />
        <br/>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <select class="form-control" id="Employee" name="EmployeeId">
                        @if (Model.EmployeeId != 0)
                        {
                            <option value="@Model.EmployeeId" selected>@Model.EmployeeName</option>
                        }
                        else
                        {
                            <option value="">Select Employee</option>
                        }
                        
                    </select>
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.WorkflowSeasonId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <select class="form-control" id="croptype" name="WorkflowSeasonId">
                        <option value="">Select Crop</option>
                        @foreach (var o in croptype)
                        {
                            if (o.Id == Model.WorkflowSeasonId)
                            {
                                <option value="@o.Id" selected>@o.TypeName </option>
                            }
                            else
                            {
                                <option value="@o.Id"> @o.TypeName </option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.LandSizeInAcres, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.LandSizeInAcres, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.LandSizeInAcres, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-offset-5 col-md-4">
                <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
            </div>
        </div>

    </div>
}


@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}


<script type="text/javascript">
    // Fill zone
    var selectedObj = {};
    for (i = 0; i < OfficeHierarchy.length; i++) {
        var o = OfficeHierarchy[i];
        selectedObj[o.ZoneName] = o.ZoneCode;
    }
    Object.keys(selectedObj).sort().forEach(function (element) {
        var opt = new Option(element, selectedObj[element]);
        $('#selZone2').append(opt);
    });

    $('#selZone2').change(function () { ZonesSelectionChanged2(); })
    $('#selArea2').change(function () { AreasSelectionChanged2(); })
    $('#selTerritory2').change(function () { TerritoriesSelectionChanged2(); })

    // select the zone in dropdown
    $("#selZone2 option").each(function () {
        if ($(this).val() == '@Model.ZoneCode')
        {
            $(this).prop('selected', true);
            ZonesSelectionChanged2();
            return false;  // come out of each iteration
        }
    });

    // select the Area in dropdown
    $("#selArea2 option").each(function () {
        if ($(this).val() == '@Model.AreaCode') {
            $(this).prop('selected', true);
            AreasSelectionChanged2();
            return false;  // come out of each iteration
        }
    });

    // select the territory in dropdown
    $("#selTerritory2 option").each(function () {
        if ($(this).val() == '@Model.TerritoryCode') {
            $(this).prop('selected', true);
            TerritoriesSelectionChanged2();
            return false;  // come out of each iteration
        }
    });

    // select the HQ in dropdown
    $("#selHQ2 option").each(function () {
        debugger
        if ($(this).val() == '@Model.HQCode') {
            $(this).prop('selected', true);
            if ($(this).val() != '') {
                fillSalesPersons();
            }
            return false;
        }
    });


    function ZonesSelectionChanged2() {
        $('#selArea2 option:not(:first-child)').remove();
        $('#selTerritory2 option:not(:first-child)').remove();
        $('#selHQ2 option:not(:first-child)').remove();
        $('#Employee option:not(:first-child)').remove();
        // get current value of Zone
        var selectedZone = $("#selZone2").val();
        var selectedZoneName = $("#selZone2 option:selected").text();
        $("#selZone2Name").val(selectedZoneName)
        FillAreasForZone(selectedZone, 'selArea2');
    }

    function FillAreasForZone(z, d) {
        var selectedObj = {};
        for (i = 0; i < OfficeHierarchy.length; i++) {
            var o = OfficeHierarchy[i];
            if (o.ZoneCode == z) {
                // use Area Name as key so we can sort by name
                selectedObj[o.AreaName] = o.AreaCode;
            }
        }
        Object.keys(selectedObj).sort().forEach(function (element) {
            var opt = new Option(element, selectedObj[element]);
            $('#' + d).append(opt);
        });
    }

    function AreasSelectionChanged2() {
        $('#selTerritory2 option:not(:first-child)').remove();
        $('#selHQ2 option:not(:first-child)').remove();
        $('#Employee option:not(:first-child)').remove();
        var selectedZone = $("#selZone2").val();
        var selectedArea = $("#selArea2").val();
        var selectedAreaName = $("#selArea2 option:selected").text();
        $("#selArea2Name").val(selectedAreaName)
        FillTerritories(selectedZone, selectedArea, 'selTerritory2');
    }

    // zone and area
    function FillTerritories(zo, ar, d) {
        var selectedObj = {};
        for (i = 0; i < OfficeHierarchy.length; i++) {
            var o = OfficeHierarchy[i];
            if (o.ZoneCode == zo && o.AreaCode == ar) {
                selectedObj[o.TerritoryName] = o.TerritoryCode;
            }
        }
        Object.keys(selectedObj).sort().forEach(function (element) {
            var opt = new Option(element, selectedObj[element]);
            $('#' + d).append(opt);
        });
    }

    function TerritoriesSelectionChanged2() {
        $('#selHQ2 option:not(:first-child)').remove();
        $('#Employee option:not(:first-child)').remove();
        var selectedZone = $("#selZone2").val();
        var selectedArea = $("#selArea2").val();
        var selectedTerritory = $("#selTerritory2").val();
        var selectedTerritoryName = $("#selTerritory2 option:selected").text();
        $("#selTerritory2Name").val(selectedTerritoryName)
        FillHQ(selectedZone, selectedArea, selectedTerritory, 'selHQ2');
    }

    // zone, area, tr
    function FillHQ(zo, ar, tr, d) {
        var selectedObj = {};
        for (i = 0; i < OfficeHierarchy.length; i++) {
            var o = OfficeHierarchy[i];
            if (o.ZoneCode == zo && o.AreaCode == ar && o.TerritoryCode == tr) {
                selectedObj[o.HQName] = o.HQCode;
            }
        }
        Object.keys(selectedObj).sort().forEach(function (element) {
            var opt = new Option(element, selectedObj[element]);
            $('#' + d).append(opt);
        });
    }

</script>

<script>
    $('select[id="selHQ2"]').change(function () {
        var selectedHQName = $("#selHQ2 option:selected").text();
        $("#selHQ2Name").val(selectedHQName);
        $('#Employee option:not(:first-child)').remove();
        html = '<option value= "Loading"> Loading </option>';
        $('#Employee').empty();
        $('#Employee').append(html);
        var searchCriteria = CaptureSearchCriteria();
        $.ajax('/Admin/GetSearchSalesPersonsDetails', {
            cache: false,
            type: "Get",
            contentType: "application/json",
            dataType: "json",
            data: searchCriteria,
            success: function (data, textStatus, jqXHR) {
                if (data.length > 0) {
                    opt = '<option value= ""> Select Employee </option>';
                    $('#Employee').empty();
                    $('#Employee').append(opt);
                    var selectEmp = {};
                    for (let i = 0; i < data.length; i++) {
                        var o = data[i];
                        selectEmp[o.Name] = o.EmployeeId;
                    }
                    Object.keys(selectEmp).sort().forEach(function (element) {
                        var opt = new Option(element, selectEmp[element]);
                        $('#Employee').append(opt);
                    });
                }
                else {
                    alert("Employee's are not available ")
                    opt = '<option value= ""> Select Employee </option>';
                    $('#Employee').empty();
                    $('#Employee').append(opt);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert("An error occured while getting data matching your search criteria.")
            }
        });
    });

    function CaptureSearchCriteria() {
        var searchCriteria = {};
        searchCriteria.Zone = $("#selZone2").val();
        searchCriteria.Area = $("#selArea2").val();
        searchCriteria.Territory = $("#selTerritory2").val();
        searchCriteria.HQ = $("#selHQ2").val();
        return searchCriteria;
    }

    $('select[id="Employee"]').change(function () {
        var selectedEmployeeName = $("#Employee option:selected").text();
        $("#selEmployeeName").val(selectedEmployeeName);
    });

    function fillSalesPersons() {
        var searchCriteria = CaptureSearchCriteria()
        $.ajax('/Admin/GetSearchSalesPersonsDetails', {
            cache: false,
            type: "Get",
            contentType: "application/json",
            dataType: "json",
            data: searchCriteria,
            success: function (data) {
                var selectEmp = {};
                for (i = 0; i < data.length; i++) {
                    var o = data[i];
                    selectEmp[o.Name] = o.EmployeeId;
                }
                Object.keys(selectEmp).sort().forEach(function (element) {
                    var opt = new Option(element, selectEmp[element]);
                    if ($(`#Employee option[value='${selectEmp[element]}']`).length == 0)
                        $('#Employee').append(opt);
                });
            }
        });
    }
</script>
