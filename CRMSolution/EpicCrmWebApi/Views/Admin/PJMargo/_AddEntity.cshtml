@model EntityCreateModel
@{
    IEnumerable<DomainEntities.OfficeHierarchy> officeHierarchy = (IEnumerable<DomainEntities.OfficeHierarchy>)ViewBag.OfficeHierarchy;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    IEnumerable<DomainEntities.CodeTable> crops = ViewBag.Crops;

}

@using (Html.BeginForm("AddEntity", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.EntityNumber)

<div class="form-horizontal">
    <span style="font-size: large; margin: 8px;">Add Profile</span>
        <div class="form-group">
            <div class="control-label col-md-2">
                <label>Zone <span style="color: red;">  * </span> </label>
            </div>
            <div class="col-sm-4">
                <select class="form-control commonclass" id="selectZone" >
                        <option value="">--Select--</option>
                </select>
                @Html.ValidationMessageFor(model => model.ZoneCode, "", new { @class = "text-danger" })
            </div>
            <div>
                <div class="control-label col-md-2">
                    <label>Area <span style="color: red;">  * </span> </label>
                </div>
                <div class="col-md-4">
                    <select class="form-control commonclass" id="selectArea"  required>
                            <option value="" >--Select--</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.AreaCode, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                <div class="control-label col-md-2">
                    <label>Cluster <span style="color: red;">  * </span> </label>
                </div>
                <div class="col-md-4">
                    <select class="form-control commonclass" id="selectTerritory">
                            <option value="">--Select--</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.TerritoryCode, "", new { @class = "text-danger" })

                </div>
            </div>
            <div>
                <div class="control-label col-md-2">
                    <label>Village <span style="color: red;">  * </span> </label>
                </div>
                <div class="col-md-4">
                    <select class="form-control commonclass" id="selectHQ" >
                            <option value="">--Select--</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.HQCode, "", new { @class = "text-danger" })

                </div>
            </div>

            <input type="text" hidden name="ZoneName" id="ZoneName" value="@Model.ZoneName" />
            <input type="text" hidden name="AreaName" id="AreaName" value="@Model.AreaName" />
            <input type="text" hidden name="TerritoryName" id="TerritoryName" value="@Model.TerritoryName" />
            <input type="text" hidden name="HQName" id="HQName" value="@Model.HQName" />

            <input type="text" hidden name="ZoneCode" id="ZoneCode" value="@Model.ZoneCode" />
            <input type="text" hidden name="AreaCode" id="AreaCode" value="@Model.AreaCode" />
            <input type="text" hidden name="TerritoryCode" id="TerritoryCode" value="@Model.TerritoryCode" />
            <input type="text" hidden name="HQCode" id="HQCode" value="@Model.HQCode" />
        </div>

        <div style="background:grey;height:0.5px;margin:20px">
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.EmployeeCode,"Employee Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">    
                    <select class="form-control" id="selectEmployee" name="EmployeeCode">
                 @if (Model.EmployeeCode == null)
                  {
                <option value="">--Select--</option>
                  }
                 else
                 {
                <option value="@Model.EmployeeCode" selected>@Model.EmployeeName</option>
                  }
                  </select>
                    <input type="text" hidden name="EmployeeName" id="EmployeeName" value="@Model.EmployeeName"/>
                    @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row m-3">
            <div>
                @Html.LabelFor(model => model.EntityName, "Farmer Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EntityName, new { htmlAttributes = new { @class = "form-control",
                   @minlength = "3",
                   @maxlength = "50",
                   @oninput = "this.value = this.value.replace(/[0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>\\/?]+$/, '');"
               } })
                    @Html.ValidationMessageFor(model => model.EntityName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.FatherHusbandName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FatherHusbandName, new { htmlAttributes = new { @class = "form-control",
                   @minlength = "3",
                   @maxlength = "50",
                   @oninput = "this.value = this.value.replace(/[0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>\\/?]+$/, '');" } })
                    @Html.ValidationMessageFor(model => model.FatherHusbandName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.UniqueId, "Aadhar Number", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.UniqueId, new { htmlAttributes = new { @class = "form-control", @oninput = "this.value = this.value.replace(/[^0-9]/, '');", @minlength = "12", @maxlength = "12" } })
                    @Html.ValidationMessageFor(model => model.UniqueId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.Number, "Phone Number", htmlAttributes: new { @class = "control-label col-md-2"})
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control", @oninput = "this.value = this.value.replace(/[^0-9]/, '');", @minlength = "10", @maxlength = "10" } })
                    @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                <label for="selectCrop" class="control-label col-md-2">Crop</label>
                <div class="col-md-4">
                    <select id="selectCrop" name="Crops" class="form-control" multiple="multiple" >
                        @if (Model.Crops != null){
                        foreach (var e in Model.Crops){
                          <option value="@e" selected>@e</option>
                        } }
                        @foreach (var crop in crops)
                        {
                            <option value="@crop.Code">@crop.Code</option>
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.Crops, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.LandSize,"Land Size (Acres)", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.LandSize, new { htmlAttributes = new { @class = "form-control",@type="text", @oninput = "this.value = this.value.replace(/[^0-9.]/, '');", @minlength = "1" } })
                    @Html.ValidationMessageFor(model => model.LandSize, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <input type="text" value="0.000000000" hidden name="Latitude" />
                    @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled", @Value = "0.000000000" } })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <input type="text" value="0.000000000" hidden name="Longitude" />
                    @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled", @Value = "0.000000000" } })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.CreatedBy,"Created By", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <input type="text" value="@Model.CreatedBy" class="form-control" disabled />
                    <input type="text" hidden value="@Model.CreatedBy"   name="CreatedBy"/>
                </div>
            </div>
        </div>
       
        <div class="form-group">
            <div class="col-md-offset-5 col-md-4">
                <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton"/>
            </div>

        </div>
    </div>
    }

    @{
        Html.RenderPartial("_CodeSnippetPopupCancelLink");
    }

    <script type="text/javascript">
    // Office Hierarchy object
    @Html.Raw("var OfficeHierarchy =[];")

        @foreach (var oh in officeHierarchy)
        {
            sb.AppendLine("var joh = { };");

            sb.AppendLine($"joh.ZoneCode = '{oh.ZoneCode}';");
            sb.AppendLine($"joh.ZoneName = '{oh.ZoneName}';");
            sb.AppendLine($"joh.AreaCode = '{oh.AreaCode}'; ");
            sb.AppendLine($"joh.AreaName = '{oh.AreaName}';");
            sb.AppendLine($"joh.TerritoryCode = '{oh.TerritoryCode}'; ");
            sb.AppendLine($"joh.TerritoryName = '{oh.TerritoryName}'; ");
            sb.AppendLine($"joh.HQCode = '{oh.HQCode}'; ");
            sb.AppendLine($"joh.HQName = '{oh.HQName}';");
            sb.AppendLine("OfficeHierarchy.push(joh);");
        }
    @Html.Raw(sb.ToString());

    </script>

    <script type="text/javascript" defer>
        $('#selectZone').change(function () { ZonesSelectionChanged(); })
        $('#selectArea').change(function () { AreasSelectionChanged(); })
        $('#selectTerritory').change(function () { TerritoriesSelectionChanged(); })
        $('#selectHQ').change(function () { HQselectionChanged(); })

        FillAreasForZone($("#ZoneCode").val())
        FillTerritories($("#ZoneCode").val(), $("#AreaCode").val())
        FillHQ($("#ZoneCode").val(), $("#AreaCode").val(), $("#TerritoryCode").val())

        $('#selectEmployee').change(function () {
            $('#EmployeeName').val($("#selectEmployee option:selected").text());
        })

        new MultiSelectTag('selectCrop')

        var selectedObj = {};
        for (let i = 0; i < OfficeHierarchy.length; i++) {
            var o = OfficeHierarchy[i];
            selectedObj[o.ZoneName] = o.ZoneCode;
        }
        Object.keys(selectedObj).sort().forEach(function (element) {
            var opt = new Option(element, selectedObj[element]);
            $('#selectZone').append(opt);
        });

        var zcode = $('#ZoneCode').val()
        if (zcode !== "")
            $(`#selectZone option[value='${zcode}']`).prop('selected', true);

        var acode = $('#AreaCode').val()
        if (acode !== "")
            $(`#selectArea option[value='${acode}']`).prop('selected', true);

        var tcode = $('#TerritoryCode').val()
        if (tcode !="")
            $(`#selectTerritory option[value='${tcode}']`).prop('selected', true);

        var hcode = $('#HQCode').val()
        if (hcode != "") {
            $(`#selectHQ option[value = '${hcode}']`).prop('selected', true);
            fillSalesPersons()
        }

        function CaptureSearchCriteria() {
            var searchCriteria = {};
            searchCriteria.Zone = $("#selectZone").val();
            searchCriteria.Area = $("#selectArea").val();
            searchCriteria.Territory = $("#selectTerritory").val();
            searchCriteria.HQ = $("#selectHQ").val();
            searchCriteria.Status = 2;
            searchCriteria.Association = 2;
            return searchCriteria;
        }

        function ZonesSelectionChanged() {
            $('#selectArea option:not(:first-child)').remove();
            $('#selectTerritory option:not(:first-child)').remove();
            $('#selectHQ option:not(:first-child)').remove();
            $('#selectEmployee option:not(:first-child)').remove();
            $('#AreaCode').val("")
            $('#TerritoryCode').val("")
            $('#HQCode').val("")
            $('#EmployeeName').val("")

            var opt = new Option("--Select--", "");
            $('#selectEmployee').empty();
            $('#selectEmployee').append(opt);

            var zoneName = $("#selectZone option:selected").text()
            $('#ZoneName').val(zoneName);
            $('#ZoneCode').val($("#selectZone").val())

            // get current value of Zone
            var selectedZone = $("#selectZone").val();
            CaptureSearchCriteria()

            FillAreasForZone(selectedZone);
        }

        function FillAreasForZone(z) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == z) {
                    // use Area Name as key so we can sort by name
                    selectedObj[o.AreaName] = o.AreaCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selectArea').append(opt);
            });
        }

        function AreasSelectionChanged() {
            $('#selectTerritory option:not(:first-child)').remove();
            $('#selectHQ option:not(:first-child)').remove();
            $('#selectEmployee option:not(:first-child)').remove();
            $('#TerritoryCode').val("")
            $('#HQCode').val("")
            $('#EmployeeName').val("")

            var opt = new Option("--Select--", "");
            $('#selectEmployee').empty();
            $('#selectEmployee').append(opt);

            $('#AreaName').val($("#selectArea option:selected").text());
            $("#AreaCode").val($("#selectArea").val())

            var selectedZone = $("#selectZone").val();
            var selectedArea = $("#selectArea").val();
             CaptureSearchCriteria()

            FillTerritories(selectedZone, selectedArea);
        }

        // zone and area
        function FillTerritories(zo, ar) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar) {
                    selectedObj[o.TerritoryName] = o.TerritoryCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selectTerritory').append(opt);
            });
        }

        function TerritoriesSelectionChanged() {
            $('#selectHQ option:not(:first-child)').remove();
            $('#selectEmployee option:not(:first-child)').remove();
            $('#HQCode').val("")
            $('#EmployeeName').val("")

            var opt = new Option("--Select--", "");
            $('#selectEmployee').empty();
            $('#selectEmployee').append(opt);

            $('#TerritoryName').val($("#selectTerritory option:selected").text());
            $("#TerritoryCode").val($("#selectTerritory").val())

            var selectedZone = $("#selectZone").val();
            var selectedArea = $("#selectArea").val();
            var selectedTerritory = $("#selectTerritory").val();
            CaptureSearchCriteria()

            FillHQ(selectedZone, selectedArea, selectedTerritory);
        }

        // zone, area, tr
        function FillHQ(zo, ar, tr) {
            var selectedObj = {};
            for (i = 0; i < OfficeHierarchy.length; i++) {
                var o = OfficeHierarchy[i];
                if (o.ZoneCode == zo && o.AreaCode == ar && o.TerritoryCode == tr) {
                    selectedObj[o.HQName] = o.HQCode;
                }
            }
            Object.keys(selectedObj).sort().forEach(function (element) {
                var opt = new Option(element, selectedObj[element]);
                $('#selectHQ').append(opt);
            });
        }

        function HQselectionChanged() {
            var searchCriteria = CaptureSearchCriteria()
            $('#EmployeeName').val("")

                var opt = new Option("Loading...", "");
                $('#selectEmployee').empty();
                $('#selectEmployee').append(opt);

            $('#HQName').val($("#selectHQ option:selected").text());
            $("#HQCode").val($("#selectHQ").val())

            $.ajax('GetSelectedSalesPersons', {
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: searchCriteria,
                success: function (data) {
                    fillStaffs(data);
                }
            });
           
        }

        function fillSalesPersons() {
            var searchCriteria = CaptureSearchCriteria()
            $.ajax('GetSelectedSalesPersons', {
                cache: false,
                type: "Get",
                contentType: "application/json",
                data: searchCriteria,
                success: function (data) {
                    var selectEmp = {};
                    for (let i = 0; i < data.length; i++) {
                        var o = data[i];
                        selectEmp[o.Name] = o.StaffCode;
                    }
                    Object.keys(selectEmp).sort().forEach(function (element) {
                        var opt = new Option(element, selectEmp[element]);
                        if ($(`#selectEmployee option[value='${selectEmp[element]}']`).length == 0)
                            $('#selectEmployee').append(opt);
                    });
                }
            });
        }

        function fillStaffs(data) {
            var selectEmp = {};
            var opt = new Option("--Select--", "");
            $('#selectEmployee').empty();
            $('#selectEmployee').append(opt);

            if (data.length < 1) {
                alert("No Employees Found!")
                return;
            }
          
            for (let i = 0; i < data.length; i++) {
                var o = data[i];
                selectEmp[o.Name] = o.StaffCode;
            }
            Object.keys(selectEmp).sort().forEach(function (element) {
                var opt = new Option(element, selectEmp[element]);
                 $('#selectEmployee').append(opt);
            });
        }
    </script>

