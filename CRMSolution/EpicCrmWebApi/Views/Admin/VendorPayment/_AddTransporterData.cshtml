@model EpicCrmWebApi.VendorSTRModel
@{
    int maxCommentsLength = ViewBag.MaxSTRNotesLength;
    decimal? exTonCharge = (Model.ExtraTonnage / 1000 * Model.CostPerExtraTon);
}

@using (Html.BeginForm("AddTransporterData", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    <div class="form-horizontal">
        <span style="font-size:large;">Add Additional Transporter Data</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.STRTagId)
        @Html.HiddenFor(model => model.HamaliRatePerBag)

    <div class="container">
        <table class="table table-bordered table-striped table-condensed" style="margin-top:2px;margin-bottom:5px;" id="idDetailsTable">
            <tr>
                <td></td>
                <td style="font-size:smaller;">(a)</td>
                <td style="font-size:smaller;">(b)</td>
                <td style="font-size:smaller;">(c)</td>
                <td style="font-size:smaller;">(d)</td>
                <td></td>
                <td style="font-size:smaller;">(f)</td>
            </tr>
            <tr>
                <th>@Html.DisplayNameFor(model => model.STRNumber)</th>
                <th>@Html.DisplayNameFor(model => model.StartOdo)</th>
                <th>@Html.DisplayNameFor(model => model.EndOdo)</th>
                <th>@Html.DisplayNameFor(model => model.SiloToShedKms)</th>
                <th>@Html.DisplayNameFor(model => model.CostPerKm)</th>
                <th>@Html.DisplayNameFor(model => model.NumberOfBags)</th>
                <th>@Html.DisplayNameFor(model => model.HamaliCharges)</th>
            </tr>
            <tr>
                <td>@Html.DisplayFor(modelItem => Model.STRNumber)</td>
                <td>@Html.DisplayFor(modelItem => Model.StartOdo)</td>
                <td>@Html.DisplayFor(modelItem => Model.EndOdo)</td>
                <td>@Html.DisplayFor(modelItem => Model.SiloToShedKms)</td>
                <td class="col-xs-2">@Html.EditorFor(modelItem => Model.CostPerKm, new { htmlAttributes = new { @class = "form-control", @id = "idCostPerKm", @type = "Text" } })</td>
                <td>@Html.DisplayFor(modelItem => Model.NumberOfBags)</td>
                <td>@Html.DisplayFor(modelItem => Model.HamaliCharges)</td>
            </tr>
        </table>
        <table class="table table-bordered table-striped table-condensed" style="margin-top:2px;margin-bottom:5px;" id="idWeightDetailsTable">
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td style="font-size:smaller;">(e)</td>
            </tr>
            <tr>
                @*<th>@Html.DisplayNameFor(model => model.GrossWeight)</th>*@
                <th>@Html.DisplayNameFor(model => model.NetWeight)</th>
                <th>@Html.DisplayNameFor(model => model.LoadedWeight)</th>
                <th>@Html.DisplayNameFor(model => model.VehicleCapacity)</th>
                <th>@Html.DisplayNameFor(model => model.ExtraTonnage)</th>
                <th>@Html.DisplayNameFor(model => model.CostPerExtraTon)</th>
                <th>@Html.DisplayNameFor(model => model.ExtraTonCharges)</th>
            </tr>
            <tr>
                @*<td>@Html.DisplayFor(modelItem => Model.GrossWeight)</td>*@
                <td>@Html.DisplayFor(modelItem => Model.NetWeight)</td>
                <td>@Html.DisplayFor(modelItem => Model.LoadedWeight)</td>
                <td>@Html.EditorFor(modelItem => Model.VehicleCapacity, new { htmlAttributes = new { @class = "form-control col-xs-1", @id = "idVehicleCapacity", @type = "Text" } })</td>
                <td>@Html.EditorFor(modelItem => Model.ExtraTonnage, new { htmlAttributes = new { @class = "form-control col-xs-1",@id = "idExtraTonnage", @readonly = "true"} })</td>
                <td>@Html.EditorFor(modelItem => Model.CostPerExtraTon, new { htmlAttributes = new { @class = "form-control col-xs-1", @id = "idCostPerExtraTon", @type = "Text" } })</td>
                <td>@Html.EditorFor(modelItem => exTonCharge, new { htmlAttributes = new { @class = "form-control col-xs-1", @id = "idExtraTonnageCharge", @readonly = "true" } })</td>
            </tr>
        </table>
        <div>
            <label class="control-label" style="margin-top:0px;font-weight:normal;color:blue;font-size:small; font-style:italic">* Initial Total Running kms is calculated by considering Shed Odo = Start Odo</label>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.ShedOdo, String.Format("{0} : {1}", Html.DisplayNameFor(m => m.ShedOdo), "(g)"), htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.ShedOdo, new { htmlAttributes = new { @class = "form-control", @id = "idShedOdo", @type = "Text" } })
                </div>
            </div>
            <div class="col-md-5">
                <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:smaller; font-style:italic">* Total Running Kms = (a-g) + (b-a) + (c)</label><br />
                <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:smaller; font-style:italic">* Transportation Charges = (h) * (d)</label>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.TotalRunningKms, String.Format("{0} : {1}", Html.DisplayNameFor(m => m.TotalRunningKms), "(h)"), htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.TotalRunningKms, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "idTotalRunningKms" } })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.TransportationCharges, String.Format("{0} : {1}", Html.DisplayNameFor(m => m.TransportationCharges), "(i)"), htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.TransportationCharges, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "idTransportationCharges" } })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.TollCharges, String.Format("{0} : {1}", Html.DisplayNameFor(m => m.TollCharges), "(j)"), htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.TollCharges, new { htmlAttributes = new { @class = "form-control", @id = "idTollCharges" } })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.WeighmentCharges, String.Format("{0} : {1}", Html.DisplayNameFor(m => m.WeighmentCharges), "(k)"), htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.WeighmentCharges, new { htmlAttributes = new { @class = "form-control", @id = "idWeighmentCharges" } })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.Others, String.Format("{0} : {1}", Html.DisplayNameFor(m => m.Others), "(l)"), htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Others, new { htmlAttributes = new { @class = "form-control", @id = "idOthers" } })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.NetPayableAmount, htmlAttributes: new { @class = "col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.NetPayableAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @id = "idNetAmount" } })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    <textarea name="Comments" rows="2" cols="60" maxlength="@maxCommentsLength" class="form-control" id="idComments">@Model.Comments</textarea>
                </div>
                <div class="col-md-5">
                    <label class="control-label" style="margin-top:0px;font-weight:normal;color:red;font-size:smaller; font-style:italic">* Net Payable Amount = <br />(e) + (f) + (i) + (j + k + l)</label>
                </div>
            </div>

        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="hidden" value="Submit" class="btn btn-default" id="popupSaveButton" />
                <input type="button" value="Approve" class="btn btn-success" id="saveButton" onclick="ValidateForm()" />
            </div>
        </div>
    </div>
    </div>
}

<div id="resultArea">
    <img id="idWait" src="/Content/img/pleasewait.gif" />
</div>

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
    Html.RenderPartial("_CodeSnippetConfirmBox");
}


<script type="text/javascript">

    @Html.Raw("var MaxCommentsLength = " + maxCommentsLength.ToString() + ";");

    //$('#idWait').hide();
    $('#popupSaveButton').on('click', function () { Save() });
    var startOdo = @Model.StartOdo;
    var endOdo = @Model.EndOdo;
    var siloToShed = @Model.SiloToShedKms;
    var strTagId = @Model.STRTagId;
    var strNumber = '@Model.STRNumber';
    var exTonnage = @Model.ExtraTonnage;
    var loadedWeight = @Model.LoadedWeight;
    //var grossWeight = @Model.GrossWeight;
    var netWeight = @Model.NetWeight;
    var bagCount = @Model.NumberOfBags;
    var hamaliRatePerBag = @Model.HamaliRatePerBag;
    //var exTonCharges = @exTonCharge;
    var hamaliCharges = @Model.HamaliCharges;
    //var costPerKms = @Model.CostPerKm;

    function CalculateExtraTonnage()
    {
        $('#idWait').hide(); 
        var vehicleCapacity = $('#idVehicleCapacity').val();
        if (isNaN(vehicleCapacity)) {
            ShowAlertArea("Error!", "Please enter a valid Vehicle Capacity", true);
            return false;
        }
        else {
            var exTon = (netWeight > vehicleCapacity) ? (netWeight - vehicleCapacity) : 0;
            $('#idExtraTonnage').val(Number(exTon));
        }
        CalculateExtraTonnageCharge();
    }

    function CalculateExtraTonnageCharge() {
        var costPerExtraTon = $('#idCostPerExtraTon').val();
        if (isNaN(costPerExtraTon)) {
            ShowAlertArea("Error!", "Please enter a valid Cost Per Extra Ton", true);
            return false;
        }
        else {
            var exTon = $('#idExtraTonnage').val();
            var exTonCharges = ( exTon / 1000 * costPerExtraTon);
            $('#idExtraTonnageCharge').val(Number(exTonCharges));
        }
        CalculateKms();
    }

    function CalculateKms()
    {
        $('#idWait').hide();
        var shedOdo = $('#idShedOdo').val();
        if (isNaN(shedOdo)) {
            ShowAlertArea("Error!", "Please enter a valid odometer reading", true);
            return false;
        }
        if (shedOdo > startOdo){
            ShowAlertArea("Error!", "Odometer reading can be between 0 and " + startOdo, true);
            return false;
        }
        if (shedOdo != null && shedOdo > 0) {
            var totKms = (startOdo - shedOdo) + (endOdo - startOdo) + siloToShed;
            $('#idTotalRunningKms').val(Number(totKms));
        }
        else {
            var totKms = (endOdo - startOdo) + siloToShed;
            $('#idTotalRunningKms').val(Number(totKms));
        }
        CalTransportationCharge();
    }

    function CalTransportationCharge() {
        var totKms = $('#idTotalRunningKms').val();
        var costPerKm = $('#idCostPerKm').val();
        if (isNaN(costPerKm)) {
            ShowAlertArea("Error!", "Please enter a valid Cost Per KM value", true);
            return false;
        }
        else {
            var transCharge = totKms * costPerKm;
            $('#idTransportationCharges').val(Number(transCharge));
        }
        CalculateNetAmount();
    }

    function CalculateNetAmount() {
        var trCharge = $('#idTransportationCharges').val();
        var toll = $('#idTollCharges').val();
        var weighment = $('#idWeighmentCharges').val();
        var others = $('#idOthers').val();
        var exTonCharges = $('#idExtraTonnageCharge').val();

        if (isNaN(toll) || (toll < 0) || isNaN(weighment) || (weighment < 0) ||  isNaN(others)) {
            ShowAlertArea("Error!", "Please enter a valid amount", true);
            return false;
        }
        var netAmount = Number(trCharge) + Number(toll) + Number(weighment) + Number(others) + Number(exTonCharges) + Number(hamaliCharges);

        $('#idNetAmount').val(netAmount);

        // set text on approve button
        $("#saveButton").val("Click to Save the Payment Amount (Rs. " + netAmount + ")");
    }

    $('#idShedOdo').on('input', function (e) {
        CalculateKms();
    });
    $('#idCostPerKm').on('input', function (e) {
        CalTransportationCharge();
    });
    $('#idVehicleCapacity').on('input', function (e) {
        CalculateExtraTonnage();
    });
    $('#idCostPerExtraTon').on('input', function (e) {
        CalculateExtraTonnageCharge();
    });
    $('#idTollCharges').on('input', function (e) {
        CalculateNetAmount();
    });
    $('#idWeighmentCharges').on('input', function (e) {
        CalculateNetAmount();
    });
    $('#idOthers').focusout('input', function (e) {
        CalculateNetAmount();
    });

    function ValidateForm()
    {
        var costPerKm = $('#idCostPerKm').val();
        if (isNaN(costPerKm)) {
            ShowAlertArea("Error!", "Please enter a valid Cost Per KM value", true);
            return false;
        }
        var costPerExtraTon = $('#idCostPerExtraTon').val();
        if (isNaN(costPerExtraTon)) {
            ShowAlertArea("Error!", "Please enter a valid Cost Per Extra Ton", true);
            return false;
        }
        var vehicleCapacity = $('#idVehicleCapacity').val();
        if (isNaN(vehicleCapacity)) {
            ShowAlertArea("Error!", "Please enter a valid Vehicle Capacity", true);
            return false;
        }
        var shedOdo = $('#idShedOdo').val();
        if (isNaN(shedOdo)) {
            ShowAlertArea("Error!", "Please enter a valid odometer reading", true);
            return false;
        }
        if (shedOdo < 0 || shedOdo > startOdo) {
            ShowAlertArea("Error!", "Odometer reading can be between 0 and " + startOdo, true);
            return false;
        }

        var toll = $('#idTollCharges').val();
        var weighment = $('#idWeighmentCharges').val();
        var others = $('#idOthers').val();
        if (isNaN(toll) || (toll < 0) || isNaN(weighment) || (weighment < 0) || isNaN(others)) {
            ShowAlertArea("Error!", "Please enter a valid amount", true);
            return false;
        }
        // get the number of characters in comments
        var commentsText = $("#idComments").val();
        if (commentsText != undefined && commentsText.length > MaxCommentsLength)
        {
            ShowAlertArea("Error!", "Notes can be maximum @maxCommentsLength characters. Currently Notes has " + commentsText.length + " characters.", false);
            return false;
        }

        // confirm
        ShowAlertArea("Confirm!", "Please click on 'Yes' to save your changes.", false);
    }

    function Save() {
        var collectiveData = {};
        collectiveData.STRTagId = strTagId;
        collectiveData.STRNumber = strNumber;
        collectiveData.ShedOdo = $('#idShedOdo').val();
        collectiveData.StartOdo = startOdo;
        collectiveData.EndOdo = endOdo;
        collectiveData.SiloToShedKms = siloToShed;
        collectiveData.TotalRunningKms = $('#idTotalRunningKms').val();
        collectiveData.CostPerKM = $('#idCostPerKm').val();
        collectiveData.TransportationCharges = $('#idTransportationCharges').val();
        collectiveData.VehicleCapacity = $('#idVehicleCapacity').val();
        //collectiveData.GrossWeight = grossWeight;
        collectiveData.NetWeight = netWeight;
        collectiveData.LoadedWeight = loadedWeight;
        collectiveData.ExtraTonnage = $('#idExtraTonnage').val();
        collectiveData.CostPerExtraTon = $('#idCostPerExtraTon').val();
        collectiveData.ExtraTonCharges = $('#idExtraTonnageCharge').val();
        collectiveData.TollCharges = $('#idTollCharges').val();
        collectiveData.WeighmentCharges = $('#idWeighmentCharges').val();
        collectiveData.Others = $('#idOthers').val();
        collectiveData.NumberOfBags = bagCount;
        collectiveData.HamaliRatePerBag = hamaliRatePerBag;
        collectiveData.HamaliCharges = hamaliCharges;
        collectiveData.NetPayableAmount = $('#idNetAmount').val();
        collectiveData.Comments = $('#idComments').val();
        collectiveData.PaymentStatus = "AwaitingApproval";

        $("#idTitle").hide();
        $("#idDetailsTable").hide();
        $("#idWeightDetailsTable").hide();
        $("#popupForm").hide();
        $("#idWait").show();

        $('#idCancelLinkContainer').remove();

        $.ajax('/Admin/AddTransporterData', {
            type: "POST",
            contentType: "application/JSON",
            data: JSON.stringify(collectiveData),
            success: function (data, textStatus, jqXHR) {

                $formHtml = $(data); // make it Jquery object
                $("#resultArea").html($formHtml);

                $formContainer = $("div#divOverGlass");

                // attach event on cancel
                $formHtml.find("#popupCancelLink").click(
                    {
                        formContainer: $formContainer,
                        form: $formHtml
                    }, cancelLinkClickOnGlassForm);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert("An error occured. Please refresh the page and try again.")
                $formContainer = $("div#divOverGlass");
                HideGlassForm({
                    formContainer: $formContainer
                })
            }
        });

    }
    CalculateKms();
</script>

<script src="~/Scripts/CustomScripts/EpicCrmCustomPopup.js"></script>
