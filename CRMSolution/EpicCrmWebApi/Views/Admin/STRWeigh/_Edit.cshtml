@model STRWeightModel
@{
    //Model.STRDateAsText = Model.STRDate.ToString("dd-MM-yyyy");
    IEnumerable<DomainEntities.Transporter> vehicles = ViewBag.Vehicles;
    bool IsEditAllowed = ViewBag.IsEditAllowed;

    string title = "";
    if (Model.Id > 0)
    {
        title = IsEditAllowed ? "Edit Weighment" : "View Weighment";
    }
    else
    {
        title = "Add Weighment";
    }
}


@using (Html.BeginForm("EditSTRWeight", "Admin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <span style="font-size:large;">@title</span>
    <hr />
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.STRDate)
    @Html.HiddenFor(model => model.CyclicCount)

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.STRNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.STRNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.STRNumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.STRDateAsText, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <input data-format="dd-MM-yyyy" type="text" name="STRDateAsText"
                           class="form-control justDate" value="@Model.STRDateAsText" />
                    @Html.ValidationMessageFor(model => model.STRDateAsText, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.VehicleNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <select class="form-control" id="idVehicleNumber" name="VehicleNumber">
                    <option value="" selected>Select Vehicle</option>
                    @foreach (var o in vehicles)
                    {
                        if (Model.VehicleNumber == o.VehicleNo)
                        {
                            <option selected value="@o.VehicleNo">@o.VehicleNo (@o.CompanyName)</option>
                        }
                        else
                        {
                            <option value="@o.VehicleNo">@o.VehicleNo (@o.CompanyName)</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.DWSCount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.DWSCount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DWSCount, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.EntryWeight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.EntryWeight, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EntryWeight, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.ExitWeight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.ExitWeight, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExitWeight, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.ExitOdometer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.ExitOdometer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExitOdometer, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.BagCount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.BagCount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BagCount, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.SiloNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.SiloNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SiloNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.SiloIncharge, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.SiloIncharge, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SiloIncharge, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.UnloadingIncharge, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.UnloadingIncharge, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnloadingIncharge, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.DeductionPercent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.DeductionPercent, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DeductionPercent, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <textarea name="Notes" rows="4" cols="30" class="form-control"
                          >@Model.Notes</textarea>
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-5 col-md-4">
            @if (IsEditAllowed)
            {
                <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
            }
        </div>
    </div>
</div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}
