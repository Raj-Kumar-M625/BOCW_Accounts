@model IEnumerable<DomainEntities.DashboardProduct>

@{
    ViewBag.Title = "Products";
    IEnumerable<DomainEntities.OfficeHierarchy> officeHierarchy = (IEnumerable<DomainEntities.OfficeHierarchy>)ViewBag.OfficeHierarchy;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();
}

<h2>Products</h2>

<div class="well">
    <div class="row">
        <div class="col-sm-2">
            <div class="form-group">
                <label>Zone</label>
                <select class="form-control" id="Zone">
                    <option value="0">Select Zone</option>
                    @foreach (var o in (IEnumerable<DomainEntities.CodeTableEx>)ViewBag.Zones)
                    {
                        <option value="@o.Code">@o.CodeName</option>
                    }
                </select>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>Area (mandatory)</label>
                <select class="form-control" id="Area">
                    <option value="0">Select Area</option>
                </select>
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                <label>Result Count (1 to 9999)</label>
                <input type="text" class="form-control" id="MaxItems" />
            </div>
        </div>
    </div>

    <div class="row">
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Product Code</label>
                    <input type="text" class="form-control" id="ProductCode" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" class="form-control" id="Name" />
                </div>
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Status</label>
                    <select class="form-control" id="Status">
                        <option value="2">All</option>
                        <option value="1">Active</option>
                        <option value="0">In Active</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-2">
                <div class="form-group">
                    <label>&nbsp;</label>
                    <input type="button" id="btnSearch" value="Search" class="form-control btn-success" />
                </div>
            </div>
        </div>
    </div>
<div id="dataArea">
</div>


<script type="text/javascript">
    // Office Hierarchy object
        @Html.Raw("var OfficeHierarchy =[];")

        @foreach(var oh in officeHierarchy)
        {
            sb.AppendLine("var joh = { };");

            sb.AppendLine($"joh.ZoneCode = '{oh.ZoneCode}';");
            sb.AppendLine($"joh.ZoneName = '{oh.ZoneName}';");
            sb.AppendLine($"joh.AreaCode = '{oh.AreaCode}'; ");
            sb.AppendLine($"joh.AreaName = '{oh.AreaName}';");
            sb.AppendLine("OfficeHierarchy.push(joh);");
        }
    @Html.Raw(sb.ToString());


</script>
    @section scripts{
        <script>

    $(document).ready(
        function () {
            $("#btnSearch").off('click').on('click', btnSearchClicked);

            // once user changes selection boxes, clear results area;
            $('Select').change(function () { ClearResults(); });
            $('input').change(function () { ClearResults(); });
            $('#Zone').change(function () { ZoneSelectionChanged(); })
                });

            // Search button
            var btnSearchClicked = function (event) {

                var searchCriteria = CaptureSearchCriteria();
                //alert(JSON.stringify(searchCriteria));
                // ensure area is selected
                if (searchCriteria.Area == undefined || searchCriteria.Area == "0") {
                    alert('Please select the mandatory search criteria and try again.');
                    return;
                }

                // validate max item count
                var mic = searchCriteria.MaxItems;
                if (mic == undefined || mic == '')
                {
                    searchCriteria.MaxItems = '1000';
                }
                else if (/^ *[0-9]{1,4} *$/.test(mic) == false)
                {
                    alert('Please input valid result count.');
                    return;
                }

                DisableSearchButton();

                //$('#dataArea').html('<p>Please wait...</p>');
                $('#dataArea').html(waitImage);

                $.ajax('GetSearchProducts', {
                    cache: false,
                    type: "Get",
                    contentType: "application/json",
                    data: searchCriteria,
                    success: function (data, textStatus, jqXHR) {
                        $('#dataArea').html(data);
                        // hide the area that shows order line items on this page itself;
                        $(".orderDetailRow").hide();
                        // reset the json object that hold flags about showing order items inline.
                        openCustomerBlocks = {};

                        if (document.getElementById("downloadLinkArea") != null) {
                            // create link to download the data as excel
                            // do some text replacements - remove links etc.
                            var dataToSave = data.replace(/<a.*\">/g, "").replace(/<\/a>/g, "");
                            // Checked check box to be turned into 'Yes'
                            dataToSave = dataToSave.replace(/<input checked=\"checked\" class=\"check-box\" disabled=\"disabled\" type=\"checkbox\" \/>/g, "Yes");

                            // now create html and remove header row from downloadable data
                            var $dataAsHtml = $(dataToSave);
                            $dataAsHtml.find("#dataTableHeader").remove();
                            // remove all rows that are there to show order details inline
                            // it will be there only for orders;
                            $dataAsHtml.find(".orderDetailRow").remove();
                            dataToSave = $('<div>').append($dataAsHtml).html();

                            var blob = new Blob([dataToSave], { type: "application/x-msexcel" });
                            var url = URL.createObjectURL(blob);

                            var a = document.createElement('a');
                            a.download = "DownloadReport.xls";
                            a.href = url;
                            a.textContent = "Download as Excel";

                            document.getElementById("downloadLinkArea").appendChild(a);
                        }

                        EnableSearchButton();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("An error occured while getting data matching your search criteria.")
                        EnableSearchButton();
                    }
                });
            }

            function CaptureSearchCriteria() {
                var searchCriteria = {};
                searchCriteria.ProductCode = $("#ProductCode").val();
                searchCriteria.Name = $("#Name").val();
                searchCriteria.Status = $("#Status").val();
                searchCriteria.Zone = $("#Zone").val();
                searchCriteria.Area = $("#Area").val();
                searchCriteria.MaxItems = $("#MaxItems").val().trim();
                return searchCriteria;
            }

            function DisableSearchButton() {
                $("#btnSearch").hide();
            }

            function EnableSearchButton() {
                $("#btnSearch").show();
            }

            function ClearResults() {
                $('#dataArea').html('');
            }

            function ZoneSelectionChanged() {
                $('#Area option:not(:first-child)').remove();

                // get current value of Zone
                var selectedZone = $("#Zone").val();
                FillAreasForZone(selectedZone);
            }

            function FillAreasForZone(z) {
                var selectedObj = {};
                for (i = 0; i < OfficeHierarchy.length; i++) {
                    var o = OfficeHierarchy[i];
                    if (o.ZoneCode == z) {
                        // use Area Name as key so we can sort by name
                        selectedObj[o.AreaName] = o.AreaCode;
                    }
                }
                Object.keys(selectedObj).sort().forEach(function (element) {
                    var opt = new Option(element + " (" + selectedObj[element] + ")", selectedObj[element]);
                    $('#Area').append(opt);
                });
            }

        </script>
        }
