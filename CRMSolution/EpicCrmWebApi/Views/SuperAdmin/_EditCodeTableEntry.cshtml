@model ConfigCodeTableModel
@{ 
    IEnumerable<DomainEntities.CodeTableEx> customertypes = ViewBag.CustomerTypes;
}
@using (Html.BeginForm("EditCodeTableEntry", "SuperAdmin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <span style="font-size:large;">Edit - @Model.Id</span>

    <hr />
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.TenantId)
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.CodeType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.CodeType, new SelectList(Model.UniqueCodeTypes), new { @id = "ddEditCodeType", @class = "form-control" })
            </div>
        </div>
    </div>

    <div class="form-group" id="divddCodeName">
        <div>
            @Html.LabelFor(model => model.ddCodeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <select class="form-control" id="selCodeName" name="ddCodeName">
                    <option value=" ">All</option>
                    @foreach (var o in customertypes.OrderBy(x => x.Code))
                    {
                        if (o.Code.Equals(Model.CodeName, StringComparison.OrdinalIgnoreCase))
                        {
                            <option value="@o.Code" selected>@o.Code </option>
                        }
                        else
                        {
                            <option value="@o.Code">@o.Code </option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="form-group" id="divtxtCodeName">
        <div>
            @Html.LabelFor(model => model.CodeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.CodeName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CodeName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.CodeValue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.CodeValue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CodeValue, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.DisplaySequence, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.DisplaySequence, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DisplaySequence, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div>
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.IsActive)
            </div>
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
        </div>
    </div>
</div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}

<script type="text/javascript">
    $(document).ready(
        function () {
            $("#ddEditCodeType").change(function () { LoadCodeNameControl("#ddEditCodeType"); });
            LoadCodeNameControl("#ddEditCodeType");
        }
    );
</script>

