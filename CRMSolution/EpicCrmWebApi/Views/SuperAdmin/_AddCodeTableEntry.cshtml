@model ConfigCodeTableModel
@{
    IEnumerable<DomainEntities.CodeTableEx> customertypes = ViewBag.CustomerTypes;
}


@using (Html.BeginForm("AddCodeTableEntry", "SuperAdmin", FormMethod.Post, new { Id = "popupForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.TenantId)

    <div class="form-horizontal">
        <span style="font-size:large;">New Code Table Entry</span>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.CodeType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.CodeType, new SelectList(Model.UniqueCodeTypes), new { @id = "ddAddCodeType", @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="form-group" id="divtxtCodeName">
            <div>
                @Html.LabelFor(model => model.CodeName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.CodeName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CodeName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group" id="divddCodeName">
            <div>
                @Html.LabelFor(model => model.ddCodeName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    <select class="form-control" id="selCodeName" name="ddCodeName">
                        <option value=" ">All</option>
                        @foreach (var o in customertypes.OrderBy(x => x.Code))
                        {
                             <option value="@o.Code">@o.Code </option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.CodeValue, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.CodeValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CodeValue, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.DisplaySequence, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.DisplaySequence, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DisplaySequence, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div>
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.IsActive)
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-success" id="popupSaveButton" />
            </div>
        </div>
    </div>
}

@{
    Html.RenderPartial("_CodeSnippetPopupCancelLink");
}

<script type="text/javascript">
    $(document).ready(
        function () {
            $("#ddAddCodeType").change(function () { LoadCodeNameControl("#ddAddCodeType"); });
            LoadCodeNameControl("#ddAddCodeType");
        }
    );
</script>
