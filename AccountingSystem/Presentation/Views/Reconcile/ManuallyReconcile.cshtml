@using Common.ConstantVariables;
@using Presentation.Models.Bank;

@model Presentation.Models.Bank.BankTransactionModel
@{
    var UserName = ViewBag.UserName;
    ViewData["Title"] = "Manually Reconcile";
    var gridId = "ListOfTransactionGird";
    var contr = "Reconcile";
    var pref = "filter";
}
<style>
    th {
        font-size: 14px;
    }

    td {
        font-size: 14px;
    }

</style>
<div class="mt-1">
    <div class="col-md mt-lg-3">
        <input type="checkbox" id="title1" class="accordioncollapse" checked="checked" />
        <label for="title1" class="labelclass">Bank Transaction</label>
        <div class="content">

            <table id="tblbankTransaction" class="table  table-bordered ">
                <caption hidden>Bank TramnsactionDetails</caption>
                <tr>
                    <th title="(dd-mm-yyyy)">Transaction Date</th>
                    <th title="(dd-mm-yyyy)">ValueDate</th>
                    <th>Description</th>
                    <th>₹ Credit</th>
                    <th>₹ Debit</th>
                    <th>₹ Balance</th>
                    <th>Account Number</th>
                    <th>Bank Name </th>
                    <th>Status</th>
                </tr>
                <tbody>
                    <tr>
                        <td>@Model.Transaction_Date.ToString("dd-MM-yyyy")</td>
                        <td>@Model.Value_Date.ToString("dd-MM-yyyy")</td>
                        <td>@Model.Description</td>
                        <td>@Model.Credit</td>
                        <td>@Model.Debit</td>
                        <td>@Model.Balance</td>
                        <td>@Model.AccountNo</td>
                        <td>@Model.BankName</td>
                        <td>@Model.Status</td>
                    </tr>
                </tbody>
            </table>

        </div>
        <br />
    </div>
</div>
<div class="col-md mt-lg-2">
    <input type="checkbox" id="title2" class="accordioncollapse" checked="checked" />
    <label for="title2" class="labelclass">Search Filter</label>
    <div class="content">
        <div id="outFilter" class=" awe-il searchgrid">
            @*context will add a prefix to all awesome editors html ids*@
            @using (Html.Awe().BeginContext(pref))
            {
                <div class="row mt-3">
                    <div class="col-md-3">
                        @Html.Awe().DatePicker("manuallyReoncileFilter.Date").Placeholder("Date").SelectRange().ChangeMonth().ChangeYear().CssClass("daterangefiled")
                    </div>
                    <div class="col-md-3 px-1">
                        @Html.Awe().AjaxRadioList("manuallyReoncileFilter.Bankname").Url(Url.Action("GetBankList","Reconcile")).Odropdown(o=>o.Caption("---Select BankName---").ClearBtn())
                    </div>
                    <div class="col-md-2 px-1">
                        @Html.Awe().TextBox("manuallyReoncileFilter.AccountNumber").Placeholder("Account Number").CssClass("input-search form-control")
                    </div>
                    <div class=" col-sm-2">
                        @Html.Awe().TextBox("manuallyReoncileFilter.payableAmount").Numeric().Placeholder("Min Amount").CssClass("input-label min_val")
                    </div>
                    <div class=" col-md-2">
                        @Html.Awe().TextBox("manuallyReoncileFilter.payableMaxAmount").Numeric().Placeholder("Max Amount").CssClass("input-label max_val")
                    </div>
                </div>
                <div class=" row mt-3">
                    <div class="col-md-2 pl-4">
                        @Html.Awe().AjaxRadioList("manuallyReoncileFilter.TransactionType").Url(Url.Action("GetTransactionType", "Reconcile")).Odropdown(o =>o.Caption("---Select Transaction Type---").ClearBtn())
                    </div>

                    <div class="col-md-9 align-content-end">
                        <button type="button" id="btnClearFilter" class="btn btn-primary billreset"><i class="bi bi-bootstrap-reboot"></i> <i class="float-left"></i> Reset</button>
                    </div>
                </div>
                <br />
                <div>
                </div>
            }
        </div>
    </div>
</div>
<br />
<div class="col-md mt-lg-2">
    <input type="checkbox" id="title3" class="accordioncollapse" checked="checked" />
    <label for="title3" class="labelclass">
        List Of Transactions
        <button type="button" id="btnmanualReconcile" class="btn btn-success" style="margin-left: 80%;"><i class="fa fa-save mr-2"></i>Submit</button>

    </label>

    <div class="content">
        @(Html.Awe().Grid(gridId)
            .Mod(o => o.Main().Custom("outsideFilter"))
            .Url(Url.Action("GetListOfTransactions", contr))
            .Persistence(Persistence.Session)
            .Height(450)
            .Resizable()
            .Reorderable()

            .Columns(
            @*new Column { Bind = "Id", Width = 75, Groupable = false },*@
            new Column
        {
            Width = 50,
            ClientFormat = Html.Awe().CheckBox("Id")
        .Ochk()
        .Prefix("c.(Id)")
        .HtmlAttributes(null, new { data_val = ".(Id)" })
        .ToString(),

            Header = Html.Awe().CheckBox("ChkAll").Ochk().SyncScript().ToString()
        }.Mod(o => o.Nohide()),
            new Column { Bind = "TransactionDate", Header = "<p title='(dd-mm-yyy)'>Transaction Date</p>", HeaderCssClass = "boldh", MinWidth = 200 },
            new Column { Bind = "SystemName", Prop = "SystemName", Header = "System Name", HeaderCssClass = "boldh" },
            new Column { Bind = "TransactionDetailedType", Prop = "TransactionDetailedType", Header = "Transaction Detailed Type", HeaderCssClass = "boldh" },
            new Column { Bind = "PaymentMode", Prop = "PaymentMode", Header = "Payment Mode", HeaderCssClass = "boldh" },
            new Column { Bind = "Amount", Prop = "Amount", Header = "₹ Amount", HeaderCssClass = "boldh", CssClass = "amount" },
            new Column { Bind = "UtrNumberforBank", Prop = "UtrNumberforBank", Header = "UTR Number", HeaderCssClass = "boldh" },
            new Column { Bind = "Status", Header = "Status", HeaderCssClass = "boldh" }
            //new Column { Bind = "PaymentStatus", Header = "Payment Status", HeaderCssClass = "boldh", CssClass = "statuscolor" }
            ))
    </div>
</div>
<script>
    // outside filter row custom mod
    function outsideFilter(o) {
        var g = o.v;
        var fcont = $('#outFilter');
        var opt = { model: {} };
        o.fltopt = opt;

        // reload each filter control when grid loads
        g.on('aweload', function () {
            $('#outFilter .awe-val').each(function () {
                var api = $(this).data('api');
                api && api.load && api.load();
            });
        });

        // apply filters on control change
        fcont.on('change', function (e) {
            opt.inp = fcont.find('input').not('.nonflt input');
            // instead of opt.inp we could set opt.cont = fcont; but this will also include the itemsType input
            // and the grid would reload when we change the items type also

            awem.loadgflt(o);
        });

        $('#btnClearFilter').on('click', function () {
            fcont.find('.awe-val').not('.nonflt input').each(function () {
                var it = $(this).val('');
                var api = it.data('api');
                api && api.render && api.render();
                // call api.render instead of change to load the grid only once
            });

            opt.inp = fcont.find('input').not('.nonflt input');

            awem.loadgflt(o);
        });


        // keep same filter editors values after page refresh

        var fkey = 'persFout' + o.id;
        var storage = sessionStorage;
        var pref = '@pref';

        g.on('awefinit', function () {
            var fopt = storage[fkey];
            if (fopt) {
                fopt = JSON.parse(fopt, function (key, val) {
                    if (val && val.length > 0 && val[0] === '[') {
                        return JSON.parse(val);
                    }

                    return val;
                });

                if (fopt.model) {
                    o.fltopt.model = fopt.model;
                    o.fltopt.order = fopt.order;

                    // set persisted model filter params
                    var res = awef.serlObj(fopt.model);
                    res = res.concat(awef.serlArr(fopt.order, 'forder'));
                    o.fparams = res;
                    var model = fopt.model;

                    g.one('aweload', function () {
                        for (var prop in model) {
                            var editor = $('#' + pref + prop);
                            if (editor.length) {
                                editor.val(awef.sval(model[prop]));
                                if (editor.closest('.awe-txt-field')) {
                                    editor.data('api').render();

                                }

                            }
                        }
                    });
                }
            }

            g.on('aweload', function (e) {
                if ($(e.target).is(g)) {
                    fopt = o.fltopt;
                    storage[fkey] = JSON.stringify({ model: fopt.model, order: fopt.order });
                }
            });
        });


        g.on('awerender', function (e) {
            var gChk = gridPersistentCheckboxes("GridChkPersistent", "Id");
        });


    }

    //Multiple Select check box
    var pid = [];
    var selItems = [];

    var $grid = $('#@gridId');
    function gridPersistentCheckboxes(gid, chkName) {
        var Id = $(this).data('val');
        var chkSel = '[name=' + chkName + ']';
        var chkAllSel = '[name=ChkAll]';
        var vals = {};
        var chkAllSelected = false;
        var grid = $('#@gridId');
        var rowsel = '.awe-row:not(.o-frow)';

        grid.on('awerender', function () {
            var allChecked = true;
            grid.find(rowsel).each(function () {
                var row = $(this);
                if (vals[row.data('k')]) {
                    var apiData = row.find(chkSel).val(true).data('api');
                    if (apiData != null) {
                        apiData.render();
                    }
                } else {
                    allChecked = false;
                }
            });
            var apiData = grid.find(chkAllSel).val(allChecked).data('api');
            if (apiData != null) {
                apiData.render();
            }
        });


        grid.on('change', chkAllSel, function () {
            if (!chkAllSelected && $(this).val() === 'false') {
                $(this).val('true').change();
                chkAllSelected = true;
                return;
            }
            var val = $(this).val();
            var isChecked = !chkAllSelected && val === 'true';

            grid.find(rowsel).each(function (index, element) {

                var $row = $(this);
                if ($row.find(chkSel).val(val).data('api') != undefined)
                    $row.find(chkSel).val(val).data('api').render();
                var key = $row.data('k');
                var rowData = grid.data('api').model($row);

                if (isChecked) {
                    vals[key] = 1;
                    if (rowData != null) {
                        if (selItems.indexOf(s => s.id === rowData.id) === -1) {
                            var existing = selItems.find(x => x.id == rowData.id)
                            if (existing == null) {
                                selItems.push(rowData);
                            }
                        }
                    }
                }
                else {
                    var isChkAllChecked = $("input#ChkAll").val() == 'true';
                    if (isChkAllChecked) {
                        $('input#ChkAll').next().find('.o-chk').removeClass('o-chked');
                        chkAllSelected = false;
                        $("input#ChkAll").val("false")

                    }
                    var index = selItems.findIndex(s => s.id === rowData.id);
                    var test = selItems.splice(index, 1);
                }
            });
            chkAllSelected = isChecked;
           // processSelections();
        });

        // check single row
        grid.on('change', chkSel, function () {
            var chk = $(this);
            var isChecked = chk.val() === 'true';
            var $row = chk.closest(rowsel);
            var key = chk.closest(rowsel).data('k');
            var rowData = grid.data('api').model($row);

            if (isChecked) {
                vals[key] = 1;
                if (rowData != null) {
                    if (selItems.indexOf(s => s.id === key) === -1) {
                        var existing = selItems.find(x => x.id == rowData.id)
                        if (existing == null) {
                            selItems.push(rowData);
                        }
                    }
                }
            }
            else {
                var isChkAllChecked = $("input#ChkAll").val() == 'true';
                if (isChkAllChecked) {
                    $('input#ChkAll').next().find('.o-chk').removeClass('o-chked');
                    chkAllSelected = false;
                }
                var index = selItems.findIndex(s => s.id === rowData.id);
                var test = selItems.splice(index, 1);
            }

            // processSelections();
        });

        //function processSelections() {

        //    if (Object.keys(vals).length == 0) {
        //        $('#noOfTransaction').val('');
        //        $('#noOfVendor').val('');
        //    }
        //    else {
        //        var sum = 0;
        //        console.log(selItems);
        //        $.each(selItems, function (i, item) { sum += parseFloat(item.paymentAmount); });
        //        $('#noOfTransaction').val(sum.toFixed(2));
        //        //  $('#noOfTransaction').val(Object.keys(vals).length);

        //        $('#noOfVendor').val(Array.from(new Set($.map(selItems, c => c.vendorID))).length);
        //    }
        //}
        return {
            getAll: function () {
                var keys = [];
                for (var k in vals) {
                    keys.push(k);
                }
                return keys;
            },
            clear: function () {
                vals = {};
                grid.data('api').load();
            }
        };
    }

    // get data for filter editor from grid model
    function filterData(name) {
        return function () {
            var g = $('#@gridId');
            var o = g.data('o');
            return awem.frowData(o, name);
        }
    }

    $("#btnmanualReconcile").on("click", function () {
        var uri = '@Url.Action("Index","Reconcile")';

        debugger;
        totalAmount = 0;
        for (i = 0; i < selItems.length; i++) {
            totalAmount = totalAmount + selItems[i].amount;
        }
        var bankAmount = @Model.Debit != 0 ? @Model.Debit : @Model.Credit!= 0 ? @Model.Credit : 0;

        if (selItems.length == 0) {
            Swal.fire({
                text: 'Please select at least one bank file!!',
                icon: 'warning',
                confirmButtonText: 'Ok',
            })
            $('.awe-popup').each(function () {
                if ($(this).data('api'))
                    $(this).data('api').destroy();
            });
            return false;
        } else if (bankAmount < totalAmount) {
            Swal.fire({
                text: 'The Reconciling Amount Cannot be greater than Credit or Debit amount',
                icon: 'warning',
                confirmButtonText: 'Ok',
            });
            totalAmount = 0
        }
        else {
            Swal.fire({
                icon: 'warning',
                title: 'Are you sure to Reconcile ?',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'No',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: 'Post',
                        url: '/Reconcile/ManuallyReconcile',
                        data: { transactions: selItems, bankTransactionId: @Model.Id },
                        success: function (data) {
                            Swal.fire({
                                text: 'Reconciled the Transaction Successfully',
                                icon: 'success',
                                confirmButtonText: 'Ok',
                            }).then((result) => {
                                window.location.href = uri;
                            });

                        },
                        error: function (result) {
                            Swal.fire({
                                text: 'An Error Occured While Reconciling',
                                icon: 'error',
                                confirmButtonText: 'Ok',
                            });
                            console.log(result)
                        }
                    });
                }
            });
        }
    });
</script>
