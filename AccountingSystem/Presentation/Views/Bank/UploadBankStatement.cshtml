@{
    var gridId = "BankStatementListGrid";
    var contr = "Bank";
    var pref = "filter";
}
<style>
    input[type='file'] {
        color: black;
    }
</style>
<form  asp-action="UploadBankStatementInput" asp-controller="Bank" method="post"  enctype="multipart/form-data">
    <div id="outFilter" class=" awe-il searchgrid">
        <p><b>Upload Bank File</b></p>
        <div class="content">
            <div class=" d-flex flex-row justify-content-start">
                <div class="form-group col-md-3">
                    <input id="File" name="File" type="file" onchange="Validates()" accept="application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">
                    <label id="filecount" ></label>
                    @*  <ul id="showFilesLists"></ul>*@
                </div>
                <br />

                <div class="form-group col-md-3">
                    <label class="control-label">Start Date</label>
                    <label class="text-danger">  * </label>
                    <input type="date" name="StartDate" class="form-control" id="BillDate" required />
                </div>
                <div class="form-group col-md-3">
                    <label class="control-label">End Date</label>
                    <label class="text-danger">  * </label>
                    <input type="date" name="EndDate" class="form-control" id="DueDate" required />
                </div>
            </div>
            <div class=" d-flex flex-row justify-content-start">
                <div class="form-group col-md-3">
                    <label class="control-label">Total Credit Amount</label>
                    <label class="text-danger">  * </label>
                    <input type="number" name="TotalCreditAmount" id="txtAmount" class="form-control pl-3 input-amount actualamount" required data-decimal="2" oninput="enforceNumberValidation(this)" min="0" onchange="calculateBillAmount(this.value)" />
                </div>
                <div class="form-group col-md-3">
                    <label class="control-label">Total Debit Amount</label>
                    <label class="text-danger">  * </label>
                    <input type="number" id="txtAmount" name="TotalDebitAmount" class="form-control pl-3 input-amount actualamount" required data-decimal="2" oninput="enforceNumberValidation(this)" min="0" onchange="calculateBillAmount(this.value)" />
                </div>
                <div class="form-group col-md-3">
                    <label class="control-label">Remarks</label>
                    <label class="text-danger">  * </label>
                    <input type="text" id="txtAmount" name="Remarks" class="form-control pl-3" required />
                </div>
                <div class="form-group col-md-3">
                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary">
                            Upload
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<div>&nbsp;</div>
<div>&nbsp;</div>
@(Html.Awe().Grid(gridId)
      .Mod(o => o.Main().Custom("outsideFilter"))
      .Url(Url.Action("GetBankStatements", contr))
      .Height(450)
      .Resizable()
      .Reorderable()
      .Columns(
         @*new Column { Bind = "Id", Width = 75, Groupable = false },*@
         @* new Column { Bind = "vendorID", ClientFormat  = "<a class='btn btn-primary btn-sm' href='" + Url.Action("AddBill", "Bill", new { id = ".(vendorID)" }) + "'><i class='bi bi-plus'></i>Add Bill</a>", Width = 150 ,Header = "Add Bill Items",Groupable=false},      *@
         @*new Column { Bind = "BillReferenceNo", ClientFormat = "<a href='" + Url.Action("BillDetails", "Bill", new { Id = ".(Id)" }) + "'>.(BillReferenceNo)</a>", Header = "Bill Ref No", HeaderCssClass = "boldh", MinWidth = 180 },*@
         new Column { Bind = "StartDate", Header = "<p title='(dd-mm-yyyy)'>Start Date</p>", HeaderCssClass = "boldh", MinWidth = 200 },
         new Column { Bind = "EndDate", Header = "<p title='(dd-mm-yyyy)'>End Date</p>", HeaderCssClass = "boldh", MinWidth = 200 },
         new Column { Bind = "NoOfTransaction", Prop = "NoOfTransaction", Header = "No. Of Transaction", HeaderCssClass = "boldh" },
         new Column { Bind = "Remarks", Prop = "Remarks", Header = "Remarks", HeaderCssClass = "boldh" },
         new Column { Bind = "FileName", Prop = "FileName", Header = "File Name", HeaderCssClass = "boldh" },
         new Column { Bind = "UploadedDate", Header = "<p title='(dd-mm-yyyy)'>Uploaded Date</p>", HeaderCssClass = "boldh", MinWidth = 200 },
        new Column { Bind = "TotalCreditAmount", Prop = "TotalCreditAmount", Header = "₹ Total Credit Amount", HeaderCssClass = "boldh ", CssClass = "amount" },
        new Column { Bind = "TotalDebitAmount", Prop = "TotalDebitAmount", Header = "₹ Total Debit Amount", HeaderCssClass = "boldh ", CssClass = "amount" },
        new Column { ClientFormat = "<a href='/Bank/DownloadBankStatement/.(Id)'><img src='../images/download.png' alt='download Image'></a>", Header = "Download", HeaderCssClass = "boldh ", CssClass = "icon" }))

<br />

<script>
    function outsideFilter(o) {
        var g = o.v;
        var fcont = $('#outFilter');
        var opt = { model: {} };
        o.fltopt = opt;

        // reload each filter control when grid loads
        g.on('aweload', function () {
            $('#outFilter .awe-val').each(function () {
                var api = $(this).data('api');
                api && api.load && api.load();
            });
        });

        // apply filters on control change
        fcont.on('change', function (e) {
            opt.inp = fcont.find('input').not('.nonflt input');
            // instead of opt.inp we could set opt.cont = fcont; but this will also include the itemsType input
            // and the grid would reload when we change the items type also

            awem.loadgflt(o);
        });

        $('#btnClearFilter').on('click', function () {
            fcont.find('.awe-val').not('.nonflt input').each(function () {
                var it = $(this).val('');
                var api = it.data('api');
                api && api.render && api.render();
                // call api.render instead of change to load the grid only once
            });

            opt.inp = fcont.find('input').not('.nonflt input');

            awem.loadgflt(o);
        });

        // keep same filter editors values after page refresh

        var fkey = 'persFout' + o.id;
        var storage = sessionStorage;
        var pref = '@pref';

        g.on('awefinit', function () {
            var fopt = storage[fkey];
            if (fopt) {
                fopt = JSON.parse(fopt, function (key, val) {
                    if (val && val.length > 0 && val[0] === '[') {
                        return JSON.parse(val);
                    }
                    return val;
                });
                if (fopt.model) {
                    o.fltopt.model = fopt.model;
                    o.fltopt.order = fopt.order;

                    // set persisted model filter params
                    var res = awef.serlObj(fopt.model);
                    res = res.concat(awef.serlArr(fopt.order, 'forder'));
                    o.fparams = res;
                    var model = fopt.model;

                    g.one('aweload', function () {
                        for (var prop in model) {
                            var editor = $('#' + pref + prop);
                            if (editor.length) {
                                editor.val(awef.sval(model[prop]));
                                if (editor.closest('.awe-txt-field')) {
                                    editor.data('api').render();
                                }
                            }
                        }
                    });
                }
            }

            g.on('aweload', function (e) {
                if ($(e.target).is(g)) {
                    fopt = o.fltopt;
                    storage[fkey] = JSON.stringify({ model: fopt.model, order: fopt.order });
                }
            });

            //g.on('awerender', function (e) {
            //    var gChk = gridPersistentCheckboxes("GridChkPersistent", "Id");
            //    $.when($.post('@Url.Action("GetTotalGSTTDSPayment", "GSTTDS")'))
            //        .done(function (res) {
            //            $("#totalGSTTDSPayableAmount").val(res);
            //        });
            //    $('#numberOfRecords').val($('#GSTTDSListGrid').data("api").getResult().ic);
            //});
        });
    }
</script>