@using Presentation.Models.Vendor
@model Presentation.Models.Vendor.VendorPaymentViewModel


@{
    var UserName = ViewBag.UserName;
    ViewData["Title"] = "Adjustment";
    var gridId = "PaymentListGrid";
    var contr = "Adjustment";
    var grid = "_GenerateBankFile";
    var pref = "filter";
    var ID = ViewBag.Id;
    var name = ViewBag.Name;
    var defaultDateFrom = DateTime.Now.ToString("yyyy-MM-dd");
}
@Html.InitCrudPopupsForGrid(grid, contr)

<div id="outFilter" class=" awe-il searchgrid">
    @*context will add a prefix to all awesome editors html ids*@
    @using (Html.Awe().BeginContext(pref))
    {
        <div class="row mt-3 ">            
            <div class=" col-sm-2 px-2">
                <input class="form-control px-2 h-100 w-100" value="@name" readonly  disabled />
            </div>
            <div class=" col-sm-2 pl-4 ">

                @Html.Awe().TextBox("adjustmentFilters.AdjustmentReferenceNo").Placeholder(" Adjustment Ref No").CssClass("input-search")

            </div>
            <div class=" col-sm-2 pl-lg-5">

                @Html.Awe().TextBox("adjustmentFilters.Amount").Numeric().Placeholder("Amount").CssClass("input-label min_val")

            </div>
            <div class=" col-sm-2 pl-5">

                @Html.Awe().DatePicker("adjustmentFilters.Date").Placeholder("Date").SelectRange().ChangeMonth().ChangeYear()

            </div>
            <div class=" col-md-2">
                </div>
            <div class=" col-md-2">
                <button type="button" id="btnClearFilter" class="btn btn-primary billresetbtncss "><i class="bi bi-bootstrap-reboot"></i> Reset</button>
            </div>

        </div>
        <div class="row  mt-3">
            @*<div class="col-md-3 ">

                @Html.Awe().AjaxRadioList("adjustmentFilters.Status").Url(Url.Action("GetPaymentStatus", "Payment")).Odropdown(o =>o.Caption("--- Select Payment Status---").ClearBtn())

            </div>*@

            @*<div class="col-md-3 ">

                @Html.Awe().AjaxRadioList("adjustmentFilters.approvedBy").Url(Url.Action("GetApprovedByList", "Payment")).Odropdown(o =>o.Caption("--- Select ApprovedBy List---").ClearBtn())

            </div>

            <div class="col-md-3 ">

                @Html.Awe().AjaxRadioList("adjustmentFilters.createdBy").Url(Url.Action("GetCreatedByList", "Payment")).Odropdown(o =>o.Caption("--- Select CreatedBy List ---").ClearBtn())

            </div>*@

          
        </div>
        <br />
        <div>
        </div>
    }    
</div>

<div class="mt-2 float-right ">
    <a class="btn btn-primary  mr-2" asp-controller="Adjustment" asp-action="AddAdjustment" asp-route-VendorId="@ID"><i class="fa fa-plus"></i> Add Adjustment</a>

</div>


<div>&nbsp;</div>
<div>&nbsp;</div>



@(Html.Awe().Grid(gridId)
      .Mod(o => o.Main().Custom("outsideFilter"))
      .Url(Url.Action("GetAdjustmentList", contr, new { VendorId = ID }))
      .Persistence(Persistence.Session)
      .Height(450)
      .Resizable()
      .Reorderable()
      .Columns(
          @*new Column { Bind = "AdjustmentReferenceNo", Prop = "AdjustmentReferenceNo", ClientFormat = "<a href='" + Url.Action("ApproveAdjustment", "Adjustment", new { id = ".(Id)" }) + "'>.(PaymentReferenceNo)</a>", Header = "Adjustment Ref No", HeaderCssClass = "boldh" },*@
         new Column { Bind = "AdjustmentReferenceNo", ClientFormat = "<a href='" + Url.Action("AdjustmentDetails", "Adjustment", new { Id = ".(Id)" }) + "'>.(AdjustmentReferenceNo)</a>", Header = "Adjustment Ref No", HeaderCssClass = "boldh", MinWidth = 180 },
          new Column { Bind = "BillPaymentRefNo", Prop = "BillPaymentRefNo", Header = "Reference No", HeaderCssClass = "boldh", MinWidth = 230, Groupable = true },
          new Column { Bind = "AdjustmentType", Prop = "AdjustmentType", Header = "Adjustment Type", HeaderCssClass = "boldh", MinWidth = 230, Groupable = true },
          new Column { Bind = "Date", Prop = "Date", Header = "Payment Date", HeaderCssClass = "boldh", MinWidth = 230, Groupable = true },         
          new Column { Bind = "Amount", Prop = "Amount", Header = "₹ Amount", HeaderCssClass = "boldh", CssClass = "amount" },
          new Column { Bind = "CreatedBy", Prop = "CreatedBy", Header = "Created By", HeaderCssClass = "boldh" },
          new Column { Bind = "ApprovedBy", Prop = "ApprovedBy", Header = "Approved By", HeaderCssClass = "boldh" },
         new Column { Bind = "AdjustmentStatus.StatusMaster.CodeValue", Prop = "Status", Header = "Status", HeaderCssClass = "boldh", CssClass = "statuscolor" }
          ))

<script type="text/javascript">
    function exportToExcel() {
        var url = '@Url.Action("ExportToPaymentList", contr)';
        var $form = $('<form method="post"/>').attr('action', url).appendTo('body');

        var grid = $('#@(gridId)');

        // request parameters (sorting, grouping, any parent parameters)
        var req = grid.data('api').getRequest();

        // send visible columns info, binds to GridExpParams
        var viscols = utils.getVisCols(grid);
        awef.loop(viscols,
            function (v) {
                $form.append("<input type='hidden' name='visNames' value='" + v + "'/>");
            });

        awef.loop(req,
            function (val) {
                $form.append("<input type='hidden' name='" + val.name + "' value='" + val.value + "'/>");
            });

        //$form.append($('#allPages').clone());
        $form.submit();
        $form.remove();
    }
    // outside filter row custom mod
    function outsideFilter(o) {
        var g = o.v;
        var fcont = $('#outFilter');
        var opt = { model: {} };
        o.fltopt = opt;

        // reload each filter control when grid loads
        g.on('aweload', function () {
            $('#outFilter .awe-val').each(function () {
                var api = $(this).data('api');
                api && api.load && api.load();
            });
        });

        // apply filters on control change
        fcont.on('change', function (e) {
            opt.inp = fcont.find('input').not('.nonflt input');
            // instead of opt.inp we could set opt.cont = fcont; but this will also include the itemsType input
            // and the grid would reload when we change the items type also

            awem.loadgflt(o);
        });

        $('#btnClearFilter').on('click', function () {
            fcont.find('.awe-val').not('.nonflt input').each(function () {
                var it = $(this).val('');
                var api = it.data('api');
                api && api.render && api.render();
                // call api.render instead of change to load the grid only once
            });

            opt.inp = fcont.find('input').not('.nonflt input');

            awem.loadgflt(o);
        });

        $(".max_val").change('input', function () {
            $(".max_val").each(function () {
                var maxval = parseInt($(this).val());
                var minval = parseInt($(".min_val").val());
                if (minval > maxval) {
                    Swal.fire({
                        text: 'Maximum amount cannot be less than Minimum amount',
                        icon: 'warning',
                        confirmButtonText: 'Ok',
                    }).then((result) => {

                        $(".max_val").val("");

                    })
                }
            });

        });
        $(".pstatus").each(function () {
            var status = $(this).val();
            if (status == "Pending") {
                var color = "red";
            }



        });

        // keep same filter editors values after page refresh
        var fkey = 'persFout' + o.id;
        var storage = sessionStorage;
        var pref = '@pref';

        g.on('awefinit', function () {
            var fopt = storage[fkey];
            if (fopt) {
                fopt = JSON.parse(fopt, function (key, val) {
                    if (val && val.length > 0 && val[0] === '[') {
                        return JSON.parse(val);
                    }

                    return val;
                });

            }

            g.on('aweload', function (e) {
                if ($(e.target).is(g)) {
                    fopt = o.fltopt;
                    storage[fkey] = JSON.stringify({ model: fopt.model, order: fopt.order });
                }
            });
        });


    }

    // get data for filter editor from grid model
    function filterData(name) {
        return function () {
            var g = $('#@gridId');
            var o = g.data('o');
            return awem.frowData(o, name);
        }
    }

    function gridCheckboxes(gridId) {
        debugger;
        // select/unselect all
        var $grid = $('#' + gridId);
        $grid.on('change', '#ChkAll', function () {
            $grid.find('[name=Id]').val($(this).val()).change();
        }).on('aweload', function () {
            $('#ChkAll').val('').change();
        });
    }

</script>